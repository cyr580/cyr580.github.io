<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ios14越狱美化</title>
    <url>/2021/03/12/2021-03-12-leader-art/</url>
    <content><![CDATA[<p><img data-src="/media/16597697134305.png"></p>
]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>ios14</tag>
      </tags>
  </entry>
  <entry>
    <title>去掉git pull/push密码</title>
    <url>/2021/03/13/2021-03-13-daily/</url>
    <content><![CDATA[<p>执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>三分钟在GitHub上搭建个人博客</title>
    <url>/2021/03/13/2021-03-13-leader-art/</url>
    <content><![CDATA[<p>GitHub作为全球最大的程序员交友网站，是一个代码托管平台和开发者社区，开发者可以在Github上创建自己的开源项目并与其他开发者协作编码。</p>
<p>最近想在GitHub上搭建一个自己的博客，可是搜寻了网上的好多教程都不成功。有的教程偏老，有的教程不适合小白过于复杂。没办法，自己刚入门，捣鼓了半天，总算摸出了一条适合小白搭建博客的方法，下面进入正题：（注意：此方法适合小白）</p>
<p>1.首先，不用多说，得先有一个GitHub账号吧：</p>
<p><img data-src="/images/2.jpg"></p>
<p>填好自己得个人信息（用户名好像不能用汉字）：</p>
<p><img data-src="/images/3.png"></p>
<p>然后点击Create an account.</p>
<p><img data-src="/images/4.jpg"></p>
<p>2.开始搭建博客：</p>
<p>以前GitHub上的项目之类的都是一大堆源代码，对于一个新手来说，看到一大堆源码，只会让人头晕脑涨，不知何处入手。他希望看到的是，一个简明易懂的网页，说明每一步应该怎么做。因此，github就设计了Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。</p>
<p>首先，我们需要新建一个Repositories,Repositories就相当于一个库，存放我们的项目文件。</p>
<p><img data-src="/images/5.jpg"></p>
<p>然后给自己的Repositories取一个名字，注意：名称格式最好为：用户名.github.io</p>
<p><img data-src="/images/6.jpg"></p>
<p>然后点击create repositories.</p>
<p>随后跳转到该库界面,由于我是搭建好的，所以会有项目文件，然后选择Settings</p>
<p><img data-src="/images/7.jpg"></p>
<p>进入settings后，往下拉，找到GitHub pages设置界面</p>
<p><img data-src="/images/8.jpg"></p>
<p>按如图所示选择，注意，选择source之后记得Save，然后点击Choose a theme选择一个博客主题。</p>
<p><img data-src="/images/9.jpg"></p>
<p>然后点击Select theme</p>
<p>到这一步呢，正常来说你就可以看到自己的博客了。在地址栏输入：用户名.<a href="http://github.io你就可以访问页面了./">http://github.io你就可以访问页面了。</a></p>
<p>最后修改代码,再用git push即可！</p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone越狱，手机操作所有代码</title>
    <url>/2021/03/15/2021-03-15-code/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/03/30/mP4R3beIQDSdkua.jpg"><br>脱离电脑端，iPhone/iPad（ios14）操作jekyll上传文章、修改网站代码等，非常实用  </p>
<span id="more"></span>
<p><strong>准备工作</strong>  </p>
<ol>
<li>手机越狱  </li>
<li>安装插件newterm 2/filza/git  </li>
<li>github仓库  </li>
</ol>
<p><strong>代码</strong>  </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">su  </span><br><span class="line">alpine  </span><br><span class="line">git clone https://github.com/username/username  </span><br><span class="line"><span class="built_in">cd</span> /var/mobile/Documents/github/repo  </span><br><span class="line">sudo su - root</span><br><span class="line">git branch master</span><br></pre></td></tr></table></figure>

<p><strong>代码</strong>  </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">git add —all  </span><br><span class="line">git commit -m”blog“  </span><br><span class="line">git push origin master  </span><br><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure>

<p><strong>代码</strong>  </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">克隆代码：git clone 远程仓库的url</span><br><span class="line">配置邮箱：git config —global user.email “<span class="number">58054530</span>@qq.com”</span><br><span class="line">配置用户名：git config —global user.name “cyr580”</span><br><span class="line">从远程仓库下拉代码到本地：git pull</span><br><span class="line">放弃本地代码的修改：git checkout — &lt;file&gt;</span><br><span class="line">将本地代码添加到缓冲区：git add * .</span><br><span class="line">移除add到缓冲区的文件：git reset HEAD &lt;file&gt;</span><br><span class="line">将本地代码提交到本地仓库：git commit -m”fp“</span><br><span class="line">将本地仓库同步到远程仓库：git push origin master</span><br><span class="line">查看日志：git log</span><br><span class="line">查看某个文件的提交日志：git log 文件名</span><br><span class="line">查看某个用户的提交日志：git log —author=“author”</span><br><span class="line">查看某条提交日志相信信息：git show 版本号</span><br><span class="line">查看git全部命令：git —<span class="built_in">help</span></span><br><span class="line">查看git某个命令的使用：git <span class="built_in">help</span> 命令名</span><br><span class="line"></span><br><span class="line">定位到abc.deb插件所在文件夹，输入<span class="built_in">cd</span> /var/mobile/aaa 回车</span><br><span class="line">输入解包命令 dpkg-deb -x ./abc.deb ./tmp 回车</span><br><span class="line"></span><br><span class="line">输入命令dpkg-deb -e ./abc.deb ./tmp/DEBIAN回车</span><br><span class="line"></span><br><span class="line">修改完成退出。执行赋予权限命令以及打包命令</span><br><span class="line"></span><br><span class="line">*输入chmod –R <span class="number">755</span> ./ tmp/DEBIAN（赋予tmp/DEBIAN文件夹<span class="number">0755</span>命令，否则打包不成功）</span><br><span class="line"></span><br><span class="line">🍉 chmod <span class="number">755</span> 路径</span><br><span class="line"></span><br><span class="line">*输入dpkg-deb -b ./tmp false8.deb</span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line"><span class="built_in">echo</span> ”Hello World“ &gt; index.html</span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Depends: <span class="title">mobilesubstrate</span>, <span class="title">firmware</span> (&gt;= 11.0), <span class="title">com.junesiphone.lockpluspro</span> | <span class="title">com.junesiphone.lockpluspro</span>, <span class="title">com.junesiphone.frontpage</span> | <span class="title">com.junesiphone.frontpage</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">git</span> <span class="title">config</span> —<span class="title">global</span> <span class="title">user.name</span> ”<span class="title">none</span>“</span></span><br><span class="line"><span class="function"><span class="title">git</span> <span class="title">config</span> —<span class="title">global</span> <span class="title">user.email</span> ”<span class="title">none</span>@<span class="title">gmail.com</span>“</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">git</span> <span class="title">config</span> <span class="title">user.email</span> ”58054530@<span class="title">qq.com</span>“</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">git</span> <span class="title">config</span> <span class="title">user.name</span> ”<span class="title">cyr580</span>“</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">git</span> <span class="title">config</span> -<span class="title">l</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">git</span>仓库删除所有提交历史记录，成为一个干净的新仓库</span></span><br><span class="line"><span class="function"><span class="title">APRIL</span> 28<span class="title">TH</span>, 2017</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">把旧项目提交到<span class="title">Git</span>上，但是会有一些历史记录，这些历史记录中可能会有项目密码等敏感信息。如何删除这些历史记录，形成一个全新的仓库，并且保持代码不变呢？</span></span><br><span class="line"><span class="function">1.<span class="title">Checkout</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="title">git</span> <span class="title">checkout</span> —<span class="title">orphan</span> <span class="title">latest_branch</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. <span class="title">Add</span> <span class="title">all</span> <span class="title">the</span> <span class="title">files</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="title">git</span> <span class="title">add</span> -<span class="title">A</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. <span class="title">Commit</span> <span class="title">the</span> <span class="title">changes</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="title">git</span> <span class="title">commit</span> -<span class="title">am</span> ”<span class="title">commit</span> <span class="title">message</span>“</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">4. <span class="title">Delete</span> <span class="title">the</span> <span class="title">branch</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="title">git</span> <span class="title">branch</span> -<span class="title">D</span> <span class="title">master</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">5.<span class="title">Rename</span> <span class="title">the</span> <span class="title">current</span> <span class="title">branch</span> <span class="title">to</span> <span class="title">master</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="title">git</span> <span class="title">branch</span> -<span class="title">m</span> <span class="title">master</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">6.<span class="title">Finally</span>, <span class="title">force</span> <span class="title">update</span> <span class="title">your</span> <span class="title">repository</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="title">git</span> <span class="title">push</span> -<span class="title">f</span> <span class="title">origin</span> <span class="title">master</span></span></span><br></pre></td></tr></table></figure>

<p><strong>代码</strong>  </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">apk update</span><br><span class="line">apk upgrade</span><br><span class="line">apk add bash</span><br><span class="line">apk add —no-cache bzip2-dev</span><br><span class="line">apk add —no-cache bash</span><br><span class="line">apk add bash-doc</span><br><span class="line">apk add dpkg-dev</span><br><span class="line">bash ./<span class="number">1</span>.sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>在jekyll插入youtube视频</title>
    <url>/2021/03/16/2021-03-16-daily/</url>
    <content><![CDATA[<p>一段代码搞定，非常简单<br>YouTube分享，复制<br>文章中加入到以下代码模版中即可    </p>
<span id="more"></span>



<p>效果展示👇  </p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/lyh2kAjcmSY" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>youtube</tag>
      </tags>
  </entry>
  <entry>
    <title>XiGua 34</title>
    <url>/2021/03/23/2021-03-23-daily-1/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/03/29/OnE37buKdMkCz1W.jpg"></p>
]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo安装</title>
    <url>/2021/03/29/2021-03-29-daily-3/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/03/29/rRUQFn7BfKNyYmk.jpg"></p>
<h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<span id="more"></span>
<br>

<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</code></pre>
<br>

<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<br></p>
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</code></pre>
<br>

<p>文件结构<br><br></p>
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
</code></pre>
<br>


<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page —path about/me ”About me“</span><br><span class="line">hexo new page —path about/me</span><br></pre></td></tr></table></figure>
</code></pre>
<br>


<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd blog  #进入blog目录</span><br><span class="line">hexo cl #清理缓存</span><br><span class="line">hexo g #生成网站文件</span><br><span class="line">hexo s #本地测试代码，Ctrl+c停止本地映射</span><br><span class="line">hexo d #推送本地代码到github</span><br><span class="line">http://localhost:4000</span><br></pre></td></tr></table></figure>
</code></pre>
<br>

<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git —save</span><br></pre></td></tr></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Actions</title>
    <url>/2021/03/29/2021-03-29-daily-4/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e20c526269bf61ab7307243aa49b1aef4566df28a04d79f152849ab504593ecb"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo文章加密</title>
    <url>/2021/03/30/2021-03-29-daily-5/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cda65a8cbb3184c60255c58646b83fda97cfc656c745ba1552f79c8ceea3c1ca">d7eadd0b02eee5183a694f4706bc48026c16e01e14e13fedeb667dabc37171fbbd442f5dd218c11533622f13b6a92fb9386d31dead3e806fe8909f288b475aed79a53a9d95c493127ba6ad66a757fec0f45d344f03b1fda68228876ad91b361b17590c12bcca360e104869ae6a21c7618e767c6b0c4437b01ab0effe312f68639288a355098212297d4ae962abe80cd6800f25efcfaf41b5ad78629fcf940f0120c057081298c7a609f2f4f46d0303d1e819e73c2ee55aea9892c122297358041c26becfbdc4045b28f7a6904f1f8fd21438df4280704ec7dd8469bde26d9893167ec81eab0d6835fe23e7957896b47494b1570106956f202627d84689875fe5a11a8b8991788237dfa84c9ec7b5c5e2acd80eecb3af18795a87d7bc9c03e8646fa191915903fed439288384531e24f10b0b5b8766e66e0e6f90c22901f145c30a7ff2d9780f89bc06e12f71a00e67e7b420101fc5c360ea119a3739616f95ed8e5a2c87b1fd4aff80c9f7b4a41fac84ac7aa77fa18997e29f541ac4846ed6bab960a59bd6cca123c03f702f8268817c9177e5ce42c9b9be7d5e8844157a003f6fa43dc0bcaf3886de8ea5d466c0c8063650cc3a012e108ea31927dcfa8877dac77ccfaa08b8fb9108ca4d2da8167764d08ac9640231802bddb6a0f235f4430a1d8c889f5fbb03586de7f5e2e3f1bc1f94b8f943deff7c4b6c0ee0e1fd5f47c67a4c0dd25a3fa48b671e2dafbc37507a6b681ff6b1c2d1a43d70d3426697cf3c28277c8c2f9a5a06737141e9319a51adb9715fcf0cfdcd475c337c72926a019710b11f89c2d43df553e592acc8b767a3a6c52b05d2426d46170db6eebd6e52523faa7597a1bc76c660fa321d7008010efb05a23f1b93db31bdf507aeee46d8cf41a1fb491f1783e17a0a47944b49fef441889155584f5ed34b78bdbe2bfe4d43976049b89df203e30b23fd8ed89d18e378540e4ea1e8caed9c4777e22a70ddfdebcdf17226512e7f5ee3109edf6e1c829a65d3a0c92dd99f20155543b900c8f31903ae08bc48bb14f44f0697ac7bab7a731a82aed856998d9db23a5e057ad6daf91ff08b239f547c774b2e555b59423a8e18228db9c5ebd77678971101d89b09330c46efb73645c89fa63b9b8ed9873d80a29b61b0deaf8652f6aa3a6000d9212754836292ee0e947935bac4382b52e73d8e731e47703c74a89aa99c990db7302aa1edabd437037b10dca816512f41c66eec46512a3f963f8e5b60c2d30118638fec65a3ba7161599f3caa9316ecf1cc6cc17d12e5b606d91510e9a0dbb49b25996056f021c51bda5e3414f335bf83a21cb039f4715c8b4ec01e737265182d911958ffe5f30c22e01b37e013d350dbc408d6b4efb227716eb2da05d389aa598cc9f129a2d7654a8f6a8934a873ff723afc1e6e069bc6662cce8aadb815bc636b82cbf63db43741d09b16fd55c4748effc5e96b841238a2d563844ed3aa1f39eaaca415363d09adeb3f83c85fbefdb95328a457daf17ea16107eb86b5c12e9817c971db37f89b1fac2abfc781742ff2deb4f43dd0876c41c1bb0963e9bb19d8baf0b83065898559bc4fffff4481a0c17d5477a90b42f6b8d5d9da91f00b7319d877ccc6d5e3843c759a523d227c17f4eac5a1a81505fa5ee39ba8fbcc97c58847544bdedf7af7f7cec6a541ab6ff43bc968e9ad522b9509e97494e27dbd19924d4ac71d23d6c05391ba47f3a0b88a35b42b03073336d24a6d2f8088fdf1e64999d0158a70a617beba5692cdbcb4cb81f417ffb12584aabeea104fac220d5ffe7aa3ca44afe61063ae9a457edf82b34ccd0f0ed6ee53152bd59caba952ca8bb4556bf4ee4e7ca1a4be01be1bbba42eabe9180b66e8f2a7442aab2dafe7b6ea94f3df68e635428fbc958d7db337b287311ddaedb2559aee2deee635817868737afd6945c8288da0f091274be202d9e8545fd89a9d7597889af9c6b6a02af2bd6491f2b735ba3bac2788f9d5c2dccdaf1843efbeaadbe246435190d0059630428e9382544fb175db7bcd456bdb9bd7aaff69d502f2d40dbcfec404c82c1fabda387c9375523c1c1a80fa1d454aecabc51c5496c4f160205c51af0d93d1c1fe2a6d1815ff57e7ecba00125e4b48829315c3b59e9e5d43ade9f01dfad364d39da2f3a1dd901cf04c27436477e034091649bf95b001dee2d8c540a13b686056891e8f8cc0a23d9517e0410f7f108b3ad38cad756f4331bfebaf10a92f502df2468766be045d4d9752097b2b345f306c3300f61a1c188527a4773ae3f7e47fe0de5c75182235176cff451ef84fcbb4fd5fa7d4ae174692fc5b1d69bf6be0821ad5e466ba5ffa7970db3a7d014ab71bfbd268ba52711808ddd2d7e628614482f293e09a0278b7623c8e59e67c93789ab72645224c2a699768fb564e111e6e4af1750b0f751dad83ad76b47d99ca8152b4f11788a1602badb261bebc32c1c105fa47c9f58921beca6124c27b72dd486331a747cf1ad362a4eb4a06282278bf6acc481f0ef918dbf0d746b7b6d5a6e7787ff9b5b8b25d5618a1d2f213250697608f8f4b9daf418ae188213f72c318bdd38fa09781dfd24c97284bf65702b697ed71312e8d5c37c1ce2e04423c46cef8028883dd70f73ad3fd11d8f2383dff3267e40704eb22460c77cc21503651d3354ccc95c9d7acb2263b8303f4ae4d3a21a3901f4d26ee9073f29614d5cca7b9e34c3e55a176d95d6f33f4845f322f9bfa9cb5705e74e005ec81f7b73fb8f7f6b444527b3309eefce98fc6859581180b7738ce7f43ffae74f8e5b2895b1aa8269b38e915cd08903673888fdb8a36feb6df336610548ae641ffa0303cd3f07c50bafef2a1e536be1854638563a247eb9b1a368698bfebea1a2495ef7b4ce4bbbee7a93299404d9fcaf09731414d6f550a9e689187d0a93d6f4f7d33b3789ead17fa4c5d1592fc5a7165d1acc15fccbe561df6a1ce881296d16e81e9c76b9b94d2904ef6b9cdaad360092c89b9c0ce0de3db491982c0bfbe58fd7507ad9e7b8d104041f6eba6d023ead712c11f928b057628d0637800dcdce0d029fc2b66182d1ac70812ec6324615d70e185cc848088f6cff779aed36abbda7b0835a4bfa22171cf014f887a00102e4ff0f2ef36848ef172a9e0d2c8400bc3fd49a4e3c82892b4131fec89409399691a859b1ffabf5ccf3d4b1c9b550b7abdf1637a28a68e40b1434d954fb80cbc6e4e7dd827ed495c0d5cf7d41ec5d403d0b0386a55cbfc19f0465031173cd649e34c705413599188d69aa8595c87ec8990fcda7be391f3d7418c99c29889665cf9fed90528777cf0c0b3dccd18e5a2f1ac8dfcc6dabb1af9f6e228a0424a85a3d4774a621ae115923f1c9b42f980d57b36308e50ff4fca1829d3621841a2aae99aeb437f9e8cf9eb6a80fad83c96c7cb3c6976de65af5dd4779b040497b527bf735f06f7c9398780cddb72f3322471228a17b5afad89857095cc5e4432d97477bf6c2a4b05acbdcd24fdcfd1687bfe92adeb79fa7799bc143aaadb85efcf82fd6422ebffd303453c410bb6721eab6fcfe0face91a9648b8bf72c2c490497a8a9e4ae34ebd3f836a9c79e1b58c2859c96e8744bbc0903d0be9a1ffffd54f47334725debd97090bf40ad82501717d10bba862e731b61308572924565ae5016dd27a5e0ee5bf76511135d6db11c5081032a6b9ae69ac49c89bb1bac733f00bb13388269f2419c492f3be42de41066799860f55584c75301c0f0e64c31e55a05789bd6a44f1e2f08a584c1f80d7d48425d9a8d124f1d840ae426d6c87a34b5816e3d935dbf72a0b2a814c930328cebe45ed6ec388ab693f639d542ed725e1da734672ba976793de42875ab558055b846156704735fc0e4e231baf12bc25e3bea9289ba7df2cf1332d72ee4dd6eb3fdcc9b9fa072e0402d7bce3b40ec5d8b5520cd416082445edd793ab7885491263e0f7837dc8e3576c6cb11ecf65ed22630ef782718c18f9f33fa8c099c467f62649b102fcb9f915b4acb32b60ecad80df77ee3f7f6d352beb1cee612da694ba088b1b5081a5f4c0e11a366e58ea02c432ad2ec7df7f5f400088dcdaf6bff6c17e6bf706bceb35d9d34b9f1c48cdc340cefc6242ff2ff2f8f09db23ecf94556fe33b3dd30618110743614c5fde95b8f02716f921d8c648c71e721ba2cc7adb27d33a7cde05855dc143ccd768bb24d56d60373c9d68d20c512de6bbb25ab8f9c59135f2c0a73f6fe9875f57a3641f164f138ba67bbaa19a5509c482201cbaa9afd89917e13c199c43d7877ad1e37292083030a86940f1add033bd1a808d68a5eb0446b9e74b446e4f763defb4bb16a596071483ddb6a2e9b8c76ee7a9ca8e33e6b643da77df3ac48ea171abcc02fa31c2b73bdd52c7351cc35cd22e62a430468f37455924af87ec43d3f56574f0ff0e26e7ba6966f2ca42a75085356df651cf86a855020d6f3e711273cc38a0129f46f354b63209e17de4ca2ff026b807db5e7106b1ac0f51e4886acd579b7d67b6b43991f535a54c621f3bca1b2ac3b9b704ea48f7553ee4ca7cc766bdbe47e23ce7952826e8de996e52bdaf0b7e48174cfe91de03aeb28d04a8dda2c07028adfa839668c726c9d347233a212d24fc015a5208130aca312646a7902eef2beafa67b92084e7aeb5524f460f6fa76e1d1b033b82692fc8f0dcbbbc728b822db2d852099ab012bbe593e727ff7c69b70f2afa5e5f931a28c669034db75ab3a9b872c30277441ee218ec8b230e273e55e46932246943a4483149fa695f7ce406d69c4485c7df7e05f435a45024ddbab33b525776f07089776b3b8c76080883a290889e057c8b465e0ecdc208191fa3694aeaddf3c9b1fa295191855c4cf3ba76304260a636d012836dbf32888426f0f9763654aeb49de66d29c86d0da94d8bacc2afa23828fa655effb0ea25ce641ea038071ddff54e4a5c0af0d3b2ae27b95a372bd571078d404ed03abe317745bf3665d90ea9867d87289eacbc854962c055d919d65f1344080bcb905a4b3b9a82d1974a5ce6d7d369680fbd44c36c827ac762d066fb5bf37f906fa8a0502377cc943af449ae73e69973833c8aa7e95ee781f1834121258b465eeff</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>越狱后修改root密码</title>
    <url>/2021/03/29/2021-03-29-daily/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/03/29/6lLXi4UDRS3v7GY.jpg"></p>
<p>1:越狱后在CYDIA下载<code>NewTerm 2</code>插件，安装好了会要求注销手机</p>
<span id="more"></span>
<p>2:安装好了桌面点击<code>NewTerm</code> 图标，输入<br><code> su</code><br>然后点键盘上的换行键（自带键盘是Return键，第三方键盘是回车键或换行键，建议自带键盘操作），此时会提示输入password，输入默认的密码：<br><code>alpine</code><br>自己确定输入正确后再点Return键</p>
<p>3.输入正确的原始密码后再输入：<br><code>passwd root</code><br>此时会提示要求你输入新的密码，输入完自己的密码后按return键，此时会提示再次输入，再输入一次自己的密码，如果两次输入的密码不一样就会提示要求你再次输入new passwd.</p>
]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>ios运行nodejs</title>
    <url>/2021/03/29/2021-03-29-daily2/</url>
    <content><![CDATA[<ul>
<li>npm</li>
<li>nodejs</li>
<li>hexo</li>
</ul>
<p>⏬<br><a href="https://apt.procurs.us/">Repo  https://apt.procurs.us</a></p>
]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>ios14未越狱运行hexo-git-nodejs-npm</title>
    <url>/2021/03/31/2021-03-31-daily/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/03/31/9OgFDZqEdW4nuYI.jpg"></p>
<p>如果你是一名学习计算机相关专业的学生，或是经常跟Linux打交道的用户，那么Linux必定是你一生挚友。</p>
<span id="more"></span>
<p>虽然Linux不像微软的桌面系统那样，占据市场的大半江山，但是Linux的开源、免费、稳定和丰富吸引着越来越多用户与之相拥。</p>
<p>自从接触了Linux，我就成了Linux系统的忠实用户，我使用过许多种发行版，也各有各的特色。除了有些没法在Linux上运行的软件会使用Windows，大部分情况都是用Linux。</p>
<p>我不仅在电脑上使用Linux，也会在手机、iPad上使用。在知道iSH前，我在iPad使用Linux都是借助服务器。其实iPad越狱也可以使用Linux Shell，但是为了平板的安全和稳定，也就没越狱，也不提倡。</p>
<h3 id="什么是iSH？"><a href="#什么是iSH？" class="headerlink" title="什么是iSH？"></a>什么是iSH？</h3><p>iSH其实是一款APP，但是目前还没有在Apple Store正式上线。iSH是一个模拟器，用来在ARM架构的iOS设备上模拟x86架构，让iOS设备在本地运行Linux Shell环境。</p>
<p><img data-src="https://i.loli.net/2021/03/31/mTk14nZ5eJvQPz2.jpg"></p>
<p>这意味着你不用越狱，就可以在一台iOS设备上运行一个Linux系统。我想这是iOS用户的一个福音，而我正是有这个需求的用户。</p>
<p>Alpine Linux是一个由社区开发的Linux操作系统，该操作系统以安全为理念，面向x86路由器、防火墙、虚拟专用网、IP电话盒及服务器而设计。</p>
<h5 id="Alpine-Linux的特点："><a href="#Alpine-Linux的特点：" class="headerlink" title="Alpine Linux的特点："></a>Alpine Linux的特点：</h5><ol>
<li><p>小巧：基于Musl libc和busybox，和busybox一样小巧，非常适合用作Docker镜像。</p>
</li>
<li><p>安全：面向安全的轻量发行版；</p>
</li>
<li><p>简单：提供APK包管理工具，软件的搜索、安装、删除、升级都非常方便。</p>
</li>
</ol>
<p>也许就是这些特点，iSH选用Alpine Linux。</p>
<h5 id="（App-Store版已正式上线，可直接在应用商店搜索安装）"><a href="#（App-Store版已正式上线，可直接在应用商店搜索安装）" class="headerlink" title="（App Store版已正式上线，可直接在应用商店搜索安装）"></a>（App Store版已正式上线，可直接在应用商店搜索安装）</h5><h5 id="更换源："><a href="#更换源：" class="headerlink" title="更换源："></a>更换源：</h5><p>因为Alpine Linux默认使用的是国外的源，使用国外的服务器，网速特别慢，更换成国内阿里云、中科大、清华的源都可以。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/apk/repositories</span><br></pre></td></tr></table></figure>
<p>在最上面添加这两行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 阿里云源</span><br><span class="line">https://mirrors.aliyun.com/alpine/v3.11/main</span><br><span class="line">https://mirrors.aliyun.com/alpine/v3.11/community</span><br><span class="line"># 中科大源</span><br><span class="line">https://mirrors.ustc.edu.cn/alpine/v3.11/main</span><br><span class="line">https://mirrors.ustc.edu.cn/alpine/v3.11/community</span><br></pre></td></tr></table></figure>
<h5 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk update</span><br></pre></td></tr></table></figure>

<p>安装一些常用的软件：</p>
<p>zsh：我使用的shell</p>
<p>git：代码版本控制软件，clone我在GitHub上的配置文件</p>
<p>curl：克隆GitHub代码要用到</p>
<p>neofetch：显示当前系统的一些信息</p>
<p>neovim：我最常用的代码编辑器</p>
<p>nodejs：hexo需要用到</p>
<p>npm：hexo需要用到</p>
<p>hexo：必装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk add zsh git neofetch curl neovim</span><br></pre></td></tr></table></figure>
<h5 id="如果没有预装apk，输入以下代码"><a href="#如果没有预装apk，输入以下代码" class="headerlink" title="如果没有预装apk，输入以下代码"></a>如果没有预装apk，输入以下代码</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -qO- http://dl-cdn.alpinelinux.org/alpine/v3.12/main/x86/apk-tools-static-2.10.5-r1.apk | tar -xz sbin/apk.static &amp;&amp; ./sbin/apk.static add apk-tools &amp;&amp; rm sbin/apk.static</span><br><span class="line"># For the latest apk-tools, go to http://dl-cdn.alpinelinux.org/alpine/latest-stable/main/x86/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>github</tag>
        <tag>iSH</tag>
      </tags>
  </entry>
  <entry>
    <title>越狱手机上直接搭建cydia-repo源（github）</title>
    <url>/2021/04/01/2021-04-01-daily/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/04/01/qEky7oj31FriUm8.jpg"></p>
<p>拥有一个自己的repo，越狱后，各种折腾美化、插件，闲得蛋疼可以试试自己搭建一个repo，搭建容易，维护不易，需要花大量时间来关注并更新！</p>
<span id="more"></span>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li>git  ——默认Boss源或者<a href="https://apt.procurs.us/">点击直达procurs-Taurine</a></li>
<li>newterm2  ——<a href="https://repo.packix.com/">点击直达packix</a></li>
<li>github仓库  ——<a href="https://www.github.com/">点击直达github</a></li>
<li>Filza  ——<a href="https://cydia.akemi.ai/">点击直达akemi</a></li>
</ol>
<h1 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h1><p><img data-src="https://i.loli.net/2021/04/01/HZfdW1j93JTtlnI.jpg"><br><img data-src="https://i.loli.net/2021/04/01/USI6GrwRO15DEzs.jpg"></p>
<h4 id="复制下面这个地址（后面需要推送到这里）"><a href="#复制下面这个地址（后面需要推送到这里）" class="headerlink" title="复制下面这个地址（后面需要推送到这里）"></a>复制下面这个地址（后面需要推送到这里）</h4><p><img data-src="https://i.loli.net/2021/04/01/2AjUqt97QfuOeBi.jpg"></p>
<h1 id="手机newterm把这个仓库克隆到本地"><a href="#手机newterm把这个仓库克隆到本地" class="headerlink" title="手机newterm把这个仓库克隆到本地"></a>手机newterm把这个仓库克隆到本地</h1><ol>
<li>打开newterm</li>
<li>输入<code>su</code><font color=#FF0000>必须获取root权限</font></li>
<li>输入<code>alpine</code>(默认root密码)</li>
<li>打开filza，我在Document目录下创建一个github文件夹</li>
<li><code>cd /var/mobile/Documents/github/</code>我的文件夹路径</li>
<li><code>git clone https://github.com/cyr580/myrepo</code>我的仓库地址</li>
<li>打开filza，找到/Documents/github/myrepo</li>
<li>把我传的文件复制进myrepo文件夹根目录<a href="https://www.dropbox.com/s/laqs0fsfjoneg7b/myrepo.zip?dl=0">点击下载文件</a>  </li>
</ol>
<h4 id="接着修改各种文件"><a href="#接着修改各种文件" class="headerlink" title="接着修改各种文件"></a>接着修改各种文件</h4><p>—Release文件<br><img data-src="https://i.loli.net/2021/04/01/5z4XQPLDNwKZfRq.jpg"><br>—deb插件放入/debs目录</p>
<h4 id="接着自动生成packages和packages-bz2文件"><a href="#接着自动生成packages和packages-bz2文件" class="headerlink" title="接着自动生成packages和packages.bz2文件"></a>接着自动生成packages和packages.bz2文件</h4><p>这个是源列表文件，有了这个文件才可以在cydia搜索到你的插件<br>上面发的文件内有一个<code>xxxx.sh</code>的文件，<font color=#FF0000>手机打开Filza点击sh文件，运行即可</font><br>检查目录下packages文件是否为0kb（0kb肯定有问题），如果你添加了deb到debs文件夹，那这个列表生成后会占用空间，而不是0kb</p>
<h1 id="最后就是git推送到仓库和更改github-pages分支"><a href="#最后就是git推送到仓库和更改github-pages分支" class="headerlink" title="最后就是git推送到仓库和更改github pages分支"></a>最后就是git推送到仓库和更改github pages分支</h1><ol>
<li>打开newterm</li>
<li><code>su</code></li>
<li><code>alpine</code>默认密码</li>
<li><code>cd /var/mobile/Documents/github/myrepo</code>，看清楚🧐，cd到的目录是myrepo</li>
<li><code>git add -A</code>添加全部文件</li>
<li><code>git commit -m&quot;repo&quot;</code>，日志，每次必须操作一次，后面的repo字母可以随意改英文或者数字</li>
<li><code>git push origin master</code>，推送到仓库，这里会踩坑，文章最后会说到</li>
<li><code>git branch master</code><font color=#FF0000>创建分支，下面github pages改为master分支，保存</font></li>
</ol>
<p><img data-src="https://i.loli.net/2021/04/01/OdkylnCSVqAZLmY.jpg"></p>
<p><img data-src="https://i.loli.net/2021/04/01/DBd42C6iOfWnemE.jpg"></p>
<h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><h5 id="不能git-push的原因是没有设置邮箱和名字，输入以下命令"><a href="#不能git-push的原因是没有设置邮箱和名字，输入以下命令" class="headerlink" title="不能git push的原因是没有设置邮箱和名字，输入以下命令"></a>不能git push的原因是没有设置邮箱和名字，输入以下命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email “58054530@qq.com”</span><br><span class="line">git config --global user.name “cyr580”</span><br></pre></td></tr></table></figure>
<h5 id="每一次增加-删除-修改任何deb文件后，必须点击-update-sh-重新生成一次packages-packages-bz2（这是源列表）"><a href="#每一次增加-删除-修改任何deb文件后，必须点击-update-sh-重新生成一次packages-packages-bz2（这是源列表）" class="headerlink" title="每一次增加/删除/修改任何deb文件后，必须点击 update.sh 重新生成一次packages/packages.bz2（这是源列表）"></a>每一次增加/删除/修改任何deb文件后，必须点击 <code>update.sh</code> 重新生成一次packages/packages.bz2（这是源列表）</h5><p><img data-src="https://i.loli.net/2021/04/01/jEnRclSVmZp6KN3.jpg"></p>
<h5 id="最后来一次完整的git"><a href="#最后来一次完整的git" class="headerlink" title="最后来一次完整的git"></a>最后来一次完整的git</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取root权限</span></span><br><span class="line">su</span><br><span class="line"><span class="comment">#输入密码，下面是默认密码</span></span><br><span class="line">alpine</span><br><span class="line"><span class="comment">#cd 源目录</span></span><br><span class="line"><span class="built_in">cd</span> /xx/xx/xx/xx</span><br><span class="line"><span class="comment">#添加deb到debs，并用.sh文件生成packages和packages.bz2，接着git</span></span><br><span class="line">git add -A</span><br><span class="line"><span class="comment">#日志，每次必须操作</span></span><br><span class="line">git commit -m“repo”</span><br><span class="line"><span class="comment">#推送到仓库</span></span><br><span class="line">git push</span><br><span class="line"><span class="comment">#输入github的登录帐号和密码</span></span><br><span class="line">xxxxx 回车</span><br><span class="line">xxxxx 回车</span><br><span class="line">等待推送，会跑命令...</span><br><span class="line">接着去添加源愉快的玩耍吧</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>github</tag>
        <tag>cydia</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 越狱机重置ssh密码</title>
    <url>/2021/04/01/2021-04-01-daily2/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/04/01/wYDScjvZ1tHFKRN.jpg"></p>
<p>ios14越狱后ssh/root登录密码忘记了，查资料得知iPhone的账号密码修改方式，下面有详细教程</p>
<span id="more"></span>
<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p><code>/private/etc/master.password</code></p>
<h3 id="使用filza找到下面行"><a href="#使用filza找到下面行" class="headerlink" title="使用filza找到下面行"></a>使用filza找到下面行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root:xxxxxxxxxxxxx:0:0::0:0:System Administrator:/var/root:/bin/sh</span><br><span class="line">mobile:xxxxxxxxxxxxx:501:501::0:0:Mobile User:/var/mobile:/bin/sh</span><br></pre></td></tr></table></figure>
<h3 id="将root-及mobile-后面的13个x字符处修改成"><a href="#将root-及mobile-后面的13个x字符处修改成" class="headerlink" title="将root:及mobile:后面的13个x字符处修改成"></a>将root:及mobile:后面的13个x字符处修改成</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root:/smx7MYTQIi2M:0:0::0:0:System Administrator:/var/root:/bin/sh</span><br><span class="line">mobile:/smx7MYTQIi2M:501:501::0:0:Mobile User:/var/mobile:/bin/sh</span><br></pre></td></tr></table></figure>

<h3 id="修改后保存此文件，你越狱机的ssh密码就重新回到默认的：alpine"><a href="#修改后保存此文件，你越狱机的ssh密码就重新回到默认的：alpine" class="headerlink" title="修改后保存此文件，你越狱机的ssh密码就重新回到默认的：alpine"></a>修改后保存此文件，你越狱机的ssh密码就重新回到<font color=#FF0000>默认</font>的：<code>alpine</code></h3>]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>github</tag>
        <tag>cydia</tag>
      </tags>
  </entry>
  <entry>
    <title>关于ios制作修改deb插件</title>
    <url>/2021/04/01/2021-04-01-daily3/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/04/01/KC83IhRA4bi7cWV.jpg"></p>
<p>简单易懂的语言来理解deb内文件</p>
<span id="more"></span>
<h1 id="很早想写这篇教程，但是懒…"><a href="#很早想写这篇教程，但是懒…" class="headerlink" title="很早想写这篇教程，但是懒…"></a>很早想写这篇教程，但是懒…</h1><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ul>
<li><p>DEBIAN</p>
<ul>
<li>control  </li>
</ul>
</li>
<li><p>/var （可以是任何文件目录，根据不同插件来决定）</p>
<ul>
<li>/var/mobile/Library/FrontPage/xx/xx</li>
</ul>
</li>
</ul>
<h1 id="首先修改control文件"><a href="#首先修改control文件" class="headerlink" title="首先修改control文件"></a>首先修改control文件</h1><p><img data-src="https://i.loli.net/2021/04/01/rW5QLyfp24snwKe.jpg">  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Package: 插件包的名称，通常是com.xx.xx</span><br><span class="line">Version: 版本</span><br><span class="line">Section: 类别</span><br><span class="line">Depends: 依赖</span><br><span class="line">Architecture: iphoneos-arm</span><br><span class="line">Name: 插件名</span><br><span class="line">Author: cyr580</span><br><span class="line">Maintainer: 维护者 &lt;cyr580@qq.com&gt;</span><br><span class="line">Description: 描述</span><br><span class="line">Icon: 图标</span><br><span class="line">Depiction: 网页描述</span><br></pre></td></tr></table></figure>
<h1 id="解包-打包deb📦"><a href="#解包-打包deb📦" class="headerlink" title="解包/打包deb📦"></a>解包/打包deb📦</h1><ol>
<li>定位到abc.deb插件所在文件夹，输入cd /var/mobile/aaa 回车（aaa代表文件夹路径）</li>
<li>输入解包命令 dpkg-deb -x ./abc.deb ./tmp 回车</li>
<li>输入命令dpkg-deb -e ./abc.deb ./tmp/DEBIAN回车</li>
<li>修改完成退出。执行赋予权限命令以及打包命令，输入chmod –R 755 ./ tmp/DEBIAN（赋予tmp/DEBIAN文件夹0755命令，否则打包不成功），或者chmod 755 路径</li>
<li>输入dpkg-deb -b ./tmp false8.deb</li>
</ol>
<h1 id="越狱后filza直接解包打包"><a href="#越狱后filza直接解包打包" class="headerlink" title="越狱后filza直接解包打包"></a><font color=#FF0000>越狱后filza直接解包打包</font></h1><ol>
<li>打开<code>filza</code></li>
<li>找到需要修改的<code>deb</code>，比如<code>a.deb</code></li>
<li>点击打开a.deb（不要安装，点击解压）</li>
<li>按照上述教程修改即可</li>
<li><font color=#FF0000>重点来了：修改完成之后，全部选中DEBIAN文件夹和var文件夹</font>，分享，打包DEB（filza自带打包功能）</li>
<li>接上前一篇文章教程，把deb放到debs目录，<code>.sh</code>生成packages和packages.bz2文件，push即可</li>
</ol>
]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>github</tag>
        <tag>cydia</tag>
      </tags>
  </entry>
  <entry>
    <title>repo支持sileo</title>
    <url>/2021/04/02/2021-04-02-daily-2/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/04/02/Z3P8pLryEvqAunm.png"></p>
<p>比较简单，只需增加json</p>
<span id="more"></span>

<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><ul>
<li>repo.xx.com（源地址根目录）<ul>
<li>sileo（json目录）<ul>
<li>assets（图片目录）  </li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h2><p><a href="https://www.dropbox.com/s/ka96wajgsynndcp/sileo%E6%94%AF%E6%8C%81%E6%A8%A1%E7%89%88.zip?dl=0">点击下载</a>  </p>
<h2 id="cydia-zebra与sileo网页描述，分别需要添加json，在deb插件描述文件内添加以下内容"><a href="#cydia-zebra与sileo网页描述，分别需要添加json，在deb插件描述文件内添加以下内容" class="headerlink" title="cydia/zebra与sileo网页描述，分别需要添加json，在deb插件描述文件内添加以下内容"></a>cydia/zebra与sileo网页描述，分别需要添加json，在deb插件描述文件内添加以下内容</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Depiction: https://evynw.github.io/depictions/?p=com.cyr580.xigua31.SB</span><br><span class="line">SileoDepiction: https://cyr580.github.io/sileo/xigua31.SB.json</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>github</tag>
        <tag>cydia</tag>
        <tag>sileo</tag>
        <tag>zebra</tag>
      </tags>
  </entry>
  <entry>
    <title>转载：网上对ios插件的介绍</title>
    <url>/2021/04/02/2021-04-02-daily-3/</url>
    <content><![CDATA[<h4 id="转载内容，比较详细"><a href="#转载内容，比较详细" class="headerlink" title="转载内容，比较详细"></a>转载内容，比较详细</h4><span id="more"></span>
<p>Cydia中的软件源地址保存在 /etc/apt/sources.list.d/ 目录下，分为两种：</p>
<ol>
<li>以软件包形式安装的软件源，如Cydia默认的软件源，Modmyi、BigBoss等，该类软件源是以独立的.list文件记录软件源地址。</li>
<li>由用户在Cydia里输入地址添加的软件源，该类软件源全部保存在 cydia.list中。<br>以上两种形式的软件源本质没有差别，但只软件源的文件存放位置上是有不同的。<br>以Saurik自己的软件源为例。打开 saurik.list文件， 可以看到有以下内容 （以#开头的行属于注释，没有实际用途）</li>
</ol>
<p>deb <a href="http://apt.saurik.com/">http://apt.saurik.com/</a> tangelo-3.7 main<br>那么，软件源的 Release 文件的地址是 <a href="http://apt.saurik.com/dists/tangelo-3.7/Release">http://apt.saurik.com/dists/tangelo-3.7/Release</a><br>Cydia就是通过或许Release文件进而检测软件源的存在，然后再下载记录软件包相关信息的 Packages 文件。<br>而对于在Cydia中输入软件源地址进行添加的这种源，方法有些不同。因为默认情况下，输入地址以后，Cydia会认为Release文件存放于输入的地址所在的目录下。在list文件中的记录信息为：</p>
<blockquote>
<p>deb <a href="http://www.xxx.com/">http://www.xxx.com</a> ./<br>并不会继续往子目录里检测Release文件。<br>因此，搭建Cydia软件源首先需要配置服务器上相关目录和文件的存放位置。<br>取决于软件源的添加方式，文件/目录的路径设置可以分为以下两种情况：</p>
<ol>
<li> 只公布软件源的地址，让用户手动输入地址来添加。这种方式的文件/目录设置最为简单。<br>以威锋源为例，威锋源的地址为 <a href="http://app.weiphone.com/cydia">http://app.weiphone.com/cydia</a><br>那么在郁闷app.weiphone.com下，存在目录cydia。目录cydia即使软件源所在的目录。<br>将文件Release放置在cydia目录下即完成了软件源的搭建。<br>要注意，搭建软件源，必须保证至少有Release和Packages两个文件。</li>
<li>以软件包的形式安装，即直接在 /etc/apt/source.list.d/ 目录以文件的形式添加，那么这个就没有什么固定的位置了。<br>基本上仿照Saurik和BigBoss的list文件的格式即可。<br>list文件格式：</li>
<li><h1 id="do-not-edit-this-file-to-add-your-own-custom-sources"><a href="#do-not-edit-this-file-to-add-your-own-custom-sources" class="headerlink" title="do not edit this file to add your own custom sources"></a>do not edit this file to add your own custom sources</h1></li>
<li><h1 id="this-file-is-subject-to-be-upgraded-as-part-of-a-package"><a href="#this-file-is-subject-to-be-upgraded-as-part-of-a-package" class="headerlink" title="this file is subject to be upgraded as part of a package"></a>this file is subject to be upgraded as part of a package</h1></li>
<li><h1 id="either-add-your-own-list-file-to-etc-apt-sources-list-d"><a href="#either-add-your-own-list-file-to-etc-apt-sources-list-d" class="headerlink" title="either add your own .list file to /etc/apt/sources.list.d"></a>either add your own .list file to /etc/apt/sources.list.d</h1></li>
<li><h1 id="or-add-your-entry-to-the-global-etc-apt-sources-list-file"><a href="#or-add-your-entry-to-the-global-etc-apt-sources-list-file" class="headerlink" title="or add your entry to the global /etc/apt/sources.list file"></a>or add your entry to the global /etc/apt/sources.list file</h1>deb 软件源地址 项目名 类型<br>文件名任意<br>其中，Release文件应放置于 软件源地址/项目名/ 这个目录下，Packages文件放置位置由Release文件来决定（详情见后文）。<br>之前提到过，搭建软件源必须要有Release和Packages两个文件。前者的作用是记录软件源本身的相关信息，而后者的作用则是记录具体软件包的存放位置和安装信息等数据。</li>
</ol>
</blockquote>
<p>以下是Release文件的格式：</p>
<blockquote>
<p>Origin: BigBoss</p>
</blockquote>
<blockquote>
<p>Label: BigBoss</p>
</blockquote>
<blockquote>
<p>Suite: stable</p>
</blockquote>
<blockquote>
<p>Version: 1.0</p>
</blockquote>
<blockquote>
<p>Codename: BigBoss</p>
</blockquote>
<blockquote>
<p>Support: <a href="http://cydia.saurik.com/support/">http://cydia.saurik.com/support/</a>*</p>
</blockquote>
<blockquote>
<p>Architectures: darwin-arm iphoneos-arm</p>
</blockquote>
<blockquote>
<p>Components: main</p>
</blockquote>
<blockquote>
<p>Description: Apps &amp; Themes! We host your apps. Email me.</p>
</blockquote>
<blockquote>
<p>MD5Sum:<br>be8806290d5904cdf45b542706f6a3ad 165020 main/binary-darwin-arm/Packages<br>  03026ac993187b0eecae50466f64fb3c 35049 main/binary-darwin-arm/Packages.gz<br>  93091f5ca485e066d5fc32ca1327830c 3031061 main/binary-iphoneos-arm/Packages<br>  d7aec18dee5b627339b77a9d91e3f92f 368222 main/binary-iphoneos-arm/Packages.bz2  </p>
</blockquote>
<p>其中红字部分是必填内容，紫色部分是可选内容。<br>每项的作用：</p>
<blockquote>
<p>Origin: 软件源名称，可以使用中文（Cydia的软件源列表中显示的标题）</p>
</blockquote>
<blockquote>
<p>Label:  同上，也可以使用中文</p>
</blockquote>
<blockquote>
<p>Suite: 软件源的类型，比如正式源，测试源等，可以分别用stable, beta, unstable等来表示，一般填 stable就可以了</p>
</blockquote>
<blockquote>
<p>Version: 版本号，这个其实不重要，随便填，一般都是写1.0</p>
</blockquote>
<blockquote>
<p>Codename: 代码代号，比如BigBoss的就写BigBoss，威锋的就写WeiPhone，也没什么限制，只能用英文</p>
</blockquote>
<blockquote>
<p>Architectures: 结构。iPhone平台统一写 iphoneos-arm</p>
</blockquote>
<blockquote>
<p>Components: main</p>
</blockquote>
<blockquote>
<p>Description: 软件介绍，可以使用中文和html代码，具体能使用哪些代码在下面会介绍。<br>可选</p>
</blockquote>
<blockquote>
<p>Support: 支持，没什么作用，除非特别需要，否则可以不要这个。</p>
</blockquote>
<blockquote>
<p>MD5Sum: 不是必须的，但如果Packages文件位置不与Release文件在同一目录下，则必须有此项。另外，如果需要签名Release文件，也必须有这个。关于MD5Sum的格式，在下文也会介绍。</p>
</blockquote>
<blockquote>
<p>Description格式<br>显示在Cydia中每个软件页面最下方。<br>不能直接换行，如果要实现显示换行显示，可以使用<br>代码。<br>要加粗显示，可以使用<strong></strong>代码<br>可以使用html代码设置字体颜色。<br>不能使用超链接代码。<br>代码： Description: WeiPhone-威锋网为您提供iPhone所需软件/补丁。<br><br>联系我们: <strong>weip.com@ gmail.com</strong><br>实际显示效果如下：  </p>
</blockquote>
<blockquote>
<p>MD5Sum格式<br>MD5Sum是用来记录Packages即相关文件的文件大小，存放路径和MD5值。<br>MD5Sum: 之后另起一行，开头要空一格（论坛里用quote或code代码之后都不显示开头的空格）<br>每行格式是：<br>空格+文件MD5值+空格+文件大小(以字节为单位)+文件路径 （全部没有+）<br>而文件路径的格式则有文件存放位置来决定。<br>如果是没有设置Release文件的路径，那么Release和Packages同在根目录，则路径为 Packages，直接就是文件名，没有其它路径。<br>如果在之前设置了Release文件的路径，如Saurik和BigBoss，那么Packages 的路径为 main/binary-iphoneos-arm/Packages，起始文件夹，即main，要与Release文件同在一个目录下。main和binary-iphoneos-arm要与Releases中的对应信息相匹配。<br>对于Packages.gz和Packages.bz2，格式相同，也记得要另起一行。<br>因此，Packages文件的保存位置就是 软件源地址/dists/main/Codename（与Release文件中一致）/main/binary-iphoneos-arm下。</p>
</blockquote>
<blockquote>
<p>Release文件的示例可以参看以下几个地址：<br><a href="http://app.weiphone.com/cydia/Release">http://app.weiphone.com/cydia/Release</a><br><a href="http://apt.saurik.com/dists/tangelo-3.7/Release">http://apt.saurik.com/dists/tangelo-3.7/Release</a><br><a href="http://apt.bigboss.us.com/repofiles/cydia/dists/stable/Release">http://apt.bigboss.us.com/repofiles/cydia/dists/stable/Release</a></p>
</blockquote>
<p>以下是生成Packages文件的方法：<br>Packages文件格式</p>
<blockquote>
<p>Package: 3proxy<br>Version: 0.5.3k-2<br>Architecture: iphoneos-arm<br>Maintainer: Jay Freeman (saurik) <img data-src="http://img.5iqiqu.com/images6/46/46c8b054896ebdc032eacc833610af5e.jpg"><br>Installed-Size: 1208<br>Filename: debs/3proxy_0.5.3k-2_iphoneos-arm.deb<br>Size: 416318<br>MD5sum: f84cb6764a9df30ab326c17f51de15fd<br>Section: Networking<br>Priority: optional<br>Homepage: <a href="http://3proxy.ru/download/">http://3proxy.ru/download/</a><br>Description: tiny free proxy server<br>Name: 3proxy<br>Depiction: <a href="http://cydia.saurik.com/info/3proxy/">http://cydia.saurik.com/info/3proxy/</a><br>Tag: purpose::daemon, role::hacker</p>
</blockquote>
<p>Packages实质上是deb文件的control信息集合，另外多了deb文件本身的信息。（control文件是记录软件包本身的信息，但没有deb文件本身）<br>多出的deb文件信息为：</p>
<blockquote>
<p>Filename（deb文件位置与文件名）<br>Size（deb文件大小，字节为单位）<br>MD5sum（deb文件MD5值） 要保证Cydia能正确获取deb的相关数据，除了以上3个deb文件信息以为，还必须保证至少有以下两项：</p>
</blockquote>
<blockquote>
<p>Package（软件标识符，相当于身份证号码，用于识别唯一的软件）</p>
</blockquote>
<blockquote>
<p>Version（软件版本号） 这里重点关注的是Filename。Filename项决定了在服务器上deb文件的存放位置。如果没有上级目录，即deb文件和Packages文件处于同一目录，那么只需要一个单独的文件名就可以了，不需要加上目录名，即xxxx.deb。但这样在软件数量多的时候会导致管理上的混乱。<br>假设deb文件存放在debs目录下，那么Filename就应该是 debs/xxx.deb 这样的格式。<br>其余项会在二楼deb制作教程中介绍。<br>一个软件包的全部信息在Packages文件中是以连续的一段存在，每一行是不同的信息。不同软件之间以空行做分隔。</p>
</blockquote>
]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>github</tag>
        <tag>cydia</tag>
        <tag>sileo</tag>
        <tag>zebra</tag>
      </tags>
  </entry>
  <entry>
    <title>Filza直接生成packages.bz2</title>
    <url>/2021/04/02/2021-04-02-daily/</url>
    <content><![CDATA[<p>-<br>由于ios无dpkg-scanpackages命令，无奈google，终于找到了几年前WF一位网友分享的sh，可以在手机上直接生成packages.bz2<br>-</p>
<span id="more"></span>
<blockquote>
<p>环境：任何支持dpkg命令的unix系统<br>工具：dpkg及相关组件</p>
</blockquote>
<ul>
<li>iPhone OS（已越狱）：自带dpkg-deb命令，无dpkg-scanpackages命令</li>
<li>Debian/Ubuntu：自带dpkg-deb和dpkg-scanpackages命令</li>
<li>Fedora: 无dpkg相关命令</li>
<li>Mac OS X：无任何dpkg相关命令</li>
<li>Windows：非unix系统，无dpkg相关命令 以上系统中，Fedora不支持dpkg，也无法通过安装系统组件来支持dpkg，因此Fedora系统不能用于生成Packages文件。<br>而对于Mac OS X系统，本身虽然不支持dpkg，但可以通过安装一个叫 Fink 的软件来获得dpkg命令。<br>Fink 下载页面： <a href="http://www.finkproject.org/download/">http://www.finkproject.org/download/</a><br>如何安装请见官网说明。<br>对于Windows系统，可以通过安装 Cygwin + dpkg 来获取dpkg命令。<br>Cygwin下载地址： <a href="http://www.cygwin.com/setup.exe">http://www.cygwin.com/setup.exe</a><br>dpkg命令可以直接在Cygwin中获取。<br>但个人不推荐在Windows下使用dpkg，因为Cygwin体积很大，与其安装这个，还不如直接安装个Ubuntu来的简单。<br>各个系统下生成Packages的方法基本一样。<br>最简单的方法是利用dpkg-scanpackages命令来制作Packages文件。<br>iPhone OS 不适用（因为没有这个命令）</li>
</ul>
<hr>
<ol>
<li>手机打开filza</li>
<li>将需要发布的deb文件放在debs目录</li>
<li>cd repo根目录</li>
<li>sh文件与debs文件夹同级</li>
<li>执行命令（下面的sh）</li>
</ol>
<p><a href="https://www.dropbox.com/s/dp2nme0mbii3tqi/Filza-update.sh?dl=0"><font color=#FF0000>点击下载sh</font></a>  </p>
]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>github</tag>
        <tag>cydia</tag>
        <tag>sileo</tag>
        <tag>zebra</tag>
      </tags>
  </entry>
  <entry>
    <title>Sketch绝佳搭配！30秒制作交互原型的次时代神器Flinto🔥</title>
    <url>/2021/04/09/2021-04-09-daily/</url>
    <content><![CDATA[<p>30 秒出交互原型，5 分钟搞定交互动画！今天给大家安利一款超实用的交互原型制作神器，亮点有 3：整体交互原型制作，与 Sketch 无缝配合，制作速度快快快到难以想象，内附一个教程，不到 20 秒效果就完成你敢信？来收！</p>
<span id="more"></span>

<p>Flinto 的前身是一款在线制作原型的工具，通过上传图片，添加热点配合相应的交互动作快速的生成整体原型通过网页或者手机端展示给客户观看，与之前介绍的 Briefs 非常相似，但 Flinto 是在线应用。<br>随着移动设备的普及，Flinto 也不断进化，团队开发出了 Flinto for mac 版本，截止到现在的版本是 Flinto 1.12</p>
<p><img data-src="/images/IMG_1.png" alt="图片"></p>
<p>任何工具的出现都是为了提高我们的效率。作为一款交互原型制作软件首先要满足：</p>
<ol>
<li>可以人机交互</li>
<li>便于设计师与其他人员沟通</li>
<li>减少开发成本</li>
</ol>
<h1 id="Flinto-的一些效果"><a href="#Flinto-的一些效果" class="headerlink" title="Flinto 的一些效果"></a>Flinto 的一些效果</h1><p><img data-src="/images/IMG_2.gif" alt="图片"><br><img data-src="/images/IMG_3.gif" alt="图片"><br><img data-src="/images/IMG_4.gif" alt="图片"><br><img data-src="/images/IMG_5.gif" alt="图片"></p>
<p>也许我们很难想象，以上的后面三个效果都是在极短的时间内完成的（极短&lt;=5 分钟）<br>目前的 Flinto 除了拥有透明度变化，XYZ 轴旋转，XY 轴位移，运动曲线调整，移动端保存预览，等基础功能之外，最大的优点有五个：</p>
<ol>
<li>整体交互原型的制作</li>
<li>与 sketch 无缝配合</li>
<li>制作速度快</li>
<li>制作速度真快</li>
<li>制作速度非常快</li>
</ol>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p><img data-src="/images/IMG_6.gif" alt="图片"></p>
<p>下面我们要制作如上图的效果：</p>
<p>1.首先在 sketch 中绘制静态效果图：<br><img data-src="/images/IMG_7.jpg" alt="图片"></p>
<p>2.利用 Flinto 插件一键导出到 Flinto，点击相应图片添加触发交互的行为，这里是 Tap，即单击，新建变化（New transition）<br><img data-src="/images/IMG_8.gif" alt="图片"></p>
<p>3.把背景层透明度调整为 0，调整整个图层位置，链接放大图片到小图片，调节运动参数。<br><img data-src="/images/IMG_9.gif" alt="图片"></p>
<p>4.保存动作，选择四张图片成组制作滚动 Scroll，添加返回行为，预览效果。<br><img data-src="/images/IMG_10.gif" alt="图片"></p>
<p>以上的效果我制作原型其实只用了不到 20 秒。</p>
<p>之所以那么短的时间得益于 Flinto 的 connet layer（类似于 Flash 的补间动画）的作用，使图层之间的变化可以非常迅速的制作，并且 Back link 功能使我们可以一键制作原型的返回效果，这两点无疑大大加快了制作速度，并且由 New Transition 制作的交互动作和 connet layer 的标签还可以重复使用，总之，难以想象的快。</p>
]]></content>
      <categories>
        <category>PC</category>
      </categories>
      <tags>
        <tag>ios14</tag>
        <tag>Sketch</tag>
        <tag>Flinto</tag>
      </tags>
  </entry>
  <entry>
    <title>PS教程-头像</title>
    <url>/2021/05/24/2021-05-24-daily/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/05/24/BrD3etvdWuHNpfI.jpg"></p>
<span id="more"></span>

<iframe width="560" height="315" src="https://www.youtube.com/embed/H5pMb29aIH4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      <categories>
        <category>PS</category>
      </categories>
      <tags>
        <tag>youtube</tag>
        <tag>photoshop</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin解决升级后wifi无法搜到网络</title>
    <url>/2021/10/28/2021-10-28-blog/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/10/28/cSARgKZktJP8UDE.jpg"></p>
<span id="more"></span>

<h2 id="内核问题，以下命令修复"><a href="#内核问题，以下命令修复" class="headerlink" title="内核问题，以下命令修复"></a>内核问题，以下命令修复</h2><ol>
<li>首先确保电脑已经连接至有线网络，有可用网络连接<br>使用以下命令在sources.list里添加debian backports源</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;deb http://deb.debian.org/debian buster-backports main contrib non-free&quot; | sudo tee -a /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>然后执行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt autopurge bcmwl-kernel-source broadcom-sta-*</span><br><span class="line"></span><br><span class="line">sudo apt -t buster-backports install broadcom-sta-common broadcom-sta-dkms broadcom-sta-source</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PC</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Discord webhooks加入github推送通知</title>
    <url>/2021/11/29/2021-11-29-blog/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/11/29/wV9Q8JvGZXLPbK3.jpg"></p>
<span id="more"></span>

<iframe width="560" height="315" src="https://www.youtube.com/embed/RdifjyEuUbE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>youtube</tag>
      </tags>
  </entry>
  <entry>
    <title>Lockplus pro/FrontPage指针代码</title>
    <url>/2021/11/29/2021-11-29-js/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2021/11/29/njFJiDcR3rhxGZL.jpg"></p>
<span id="more"></span>

<h3 id="Lockplus-pro-FrontPage-Filza"><a href="#Lockplus-pro-FrontPage-Filza" class="headerlink" title="Lockplus pro/FrontPage/Filza"></a>Lockplus pro/FrontPage/Filza</h3><ol>
<li>Lockplus pro制作两个或三个box，分别为时针/分针/秒针，设置<strong>原点坐标</strong>，并导出为FrontPage</li>
<li>复制clock.js/jquery.min.js到/var/mobile/Library/FrontPage/主题名/js</li>
<li>打开clock.js，分别修改 </li>
<li><code>$(&quot;#秒针box名字, #secshad&quot;) </code></li>
<li><code>$(&quot;#时针box名字, #hourshad&quot;)</code></li>
<li><code>$(&quot;#分针box名字, #minshad&quot;)</code></li>
<li>保存js</li>
<li>打开根目录index.html</li>
<li>添加 <code>&lt;script src=&quot;js/clock.js&quot;&gt;&lt;/script&gt;</code></li>
<li>如不生效，把另外一个js也像第9步一样，一起加进去</li>
</ol>
<h3 id="指针js下载"><a href="#指针js下载" class="headerlink" title="指针js下载"></a><font color=red>指针js下载</font></h3><p><a href="https://pan.baidu.com/s/1H04MwQDtock3L2a9EHmpJw">提取码：ZhZ7 </a><br><br><br><br><br><br></p>
<hr>
<p><img data-src="https://i.loli.net/2021/11/29/4WDoap3cFg1zeZR.jpg"></p>
<hr>
<p><img data-src="https://i.loli.net/2021/11/29/WOmjLtgUQekTF7E.jpg"></p>
<hr>
<p><img data-src="https://i.loli.net/2021/11/29/fx3w7BKPiYHrGQZ.jpg"></p>
<hr>
<p><img data-src="https://i.loli.net/2021/11/29/D7sBJpKOZUwAihy.jpg"> </p>
<hr>
<p><img data-src="https://i.loli.net/2021/11/29/h2m8uysz7jlYIbc.jpg"></p>
<hr>
<p><img data-src="https://i.loli.net/2021/11/29/ryfRWMQ3LwoKF68.png"></p>
]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>各种代码（备份）</title>
    <url>/2022/01/06/2022-01-06-blog/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="188043cd47028dcf5dcc91c0c86cbf5ec1a78c8c893592b9a7d873db4dfbc3b3">372103fd74acef0a78b65f679c501eeeefa81ffe92804ad2bd30c5fff8469feae57d1a87709ba66623aaa0ebf37f21fd7abde368a619125d98702be30969c84f7293ea9bded47f8fddcc1168477678b1630ae3fa247f27d77cb1162fa6dfbb5cf02ad919fe3a4f15cb08103b4e0432520703a7102a412e51d97d0295c790731800ae04d4c01d1dd44ceeda1e2a0c7b91f3e7cfdf8556c23cef41b38c2e2f77bb09fd87ac3f92aaae5886ca92aef20bc4436a2a1e14d8169fe53f1b9cffe3fe93cafe3a64a0901d03ee06d26b598a702cf1cc96eb7981d3f5cd454119901526923d899af238e35d9df06886495eda893cccfbe55d2c190fe8b0f388f7c7991e31849dd1dee1c163f8e2b2d9b9cea4fe2003516192fd6ada6c080ffe58a8fcd437af6f977cb71de4543023ea151f642624e1c95b54d427ec6b21a3990e6baf1c99a265c1c228f6907dd4be09c0c5b047655109aafbee7fad321a0891438806491b7d6ebe551cb92c5ae706f0b29c8f9e7d446f398f1b9674ba1e86cc4a6235227fbd8e5064045f5fc276db683ec5b995081870dc715b1bee0fd225c4e5b1a3220cdf87dc795c833f83b5875b71fa80415023c341994b58c7f1c69226f04f65b9e49a485dde2ef3ec2db9db75b17568d36a52c9bda080ddbb66ae043e7d729e281205ca60531e2341c8e2ff081d0ac523dabb7e930eac6e70559166b961ed0488f379ca2d1218468dcf5bfbe2d0170754ec788a4e2b589b0b19e6132351025864e0fddc650aed20c7f06169f953606b6cdc74a0dc8312a9a35d63dadbaee087aa5f80fe4e49e74050f7c368c89e86a22863dbbb4aff911dd29956584ed159d7ad0fecf0286c0399357e6ab2bcf3b98850ad621226e0c0c408eebbed0999b7fe80c2f5c4acf977418ac36664062f87f2873ee8affc1736672292164eb520a627b3b538264386febc8d6e3607eae0aa97919d615201f8afad0f35e14ba7a5d765f0571df24b56f1b3430d5f8bc579bece129b94a001164c1644f9c2427a96576d80bf6db09b606d23d07a4e6b4604b14ce24e1c49aeedb5da422366b7367972b97b8c1a0ac45d73ead1e66261909cca4d5b654dda149cadfb7210a72c0f200e0fe0a5a72a457c4885fc4f944ee8722fd9e3e632f9dfda07e982167077c9b496e6f426f9a7d2fab5b654260df46f1a42d525e33423c05a4d752ab8016d7e131d5856eae75db6ed378fc6b2737e7119bc31d0bfab17f07cc2b1e8b246ad1e748056a2fa61c0bc597fe52f6632473576d959096d754febee649c8a570a5daefc49c8401c98733b65ae54e6aabcea36189ab3558b73f480de26f3986e650f5533fc5503dbc1c911b2ebedd974db7ffecf3e1cb72a130f13d6399b5d66559c961697cb9d7d3b3b911f7ef9e2e65e31ce27e8a74d0078105ea0c0f5c2df8f5bddc22369b0fc5e90d031e7d7ff5d2f9e0c3826899bd60d2f1f3b48da33da6ed352cd0f9aaefae54968775c8d2bcbde718b3ac1efcd66a5c058271c573cf8cea4faace98ca02e0b56fdea874eeff596c9fc9ff0f40397a8b86542e24e11a4824eff918eeb433e7529d2fff61d3e32c9ebc21d3aca8dcadf8d5fabc7febab72655b95976a6be19b18630cf97fd626fe341220be540e73a2714d33492d4395c1dfbd20c5962cf1a9e59aabf2cc37812827a940a9c72ef6d557903dc7453c32959902e9bc697f23fe6693a721e1afbe7a2460be2d358febfd26820e62ec47d5945c10eb3725960a5ba3b683a32c036d60855fa1e2b0ce18464ef75fce9e7430dc278a9a9c0c1559a368d3f1fe5e7152a9d4f8b1de0016827afe135f5e9beccb294188e20730cf561840dfbc77dbd1bc8fb40724a6c7330df9698cc60cdf4ee07298d8006882f27bbf90936a349a572e4382c37d59b0d782e03f633be5d3c14bbc558d86af3910c1de49d2c5405bfcf92a82a9af2e5c6f581fbc3076490950f57ea184bfd294af77e91783d99584c7af0087a3d7cc664c54141c2dc63ef5030659bac6334844ace19625b19915d9b6eaaffc01b4d3bdb5efb0fda52236538f65ac7743c2982d2f9967802179c53c1b2e6a4064de503f892e8b0f954048f314172e598f20dffa0cb74742692bef59a5a57f8d6c0130f31b38a60de7ee0bc75d6c9fb7ed00509f8209754c165874e0bdc80094c4062b82ad547ec9161d345f41d51a32c16464162d3cf675e957b2d8372a266c0a6021d40c05f0ebabe5418829f4783e3ee66255294502784c867eb4042331882b4d2b631bdfbc990a2db7853f0f71a830987679cc2675d1764c861613c76d94ff87aef005a02c7c1ad0cf3f988711786d6cf5238fd204052b1e2d9f96f70f644640d3ccdb822168c81233514c85ce847949352a62c3e11b36a68e64b80d86901f247ce2f5575a15b7520116e61d48023d35f79b489971bf49b6e1aca9d53298d1872f834f9b03cb9aadc82c935208fdba0eef66a3baab432d4593fa5092c2716c56fdb29124a7f67610f27bb9f7ba397f47bad8f1110531590f312bc1cd9dfca8964c1a01c697d75f9346846fbe29e487526202e43e1b019120cd5f7bd6d65a00fe2356d24eda44dfdab79f2ca0d152343bb73724078</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>PC</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>小米路由器Pro(R3P)刷入OpenWrt</title>
    <url>/2022/01/12/2022-01-12-blog/</url>
    <content><![CDATA[<p><img data-src="/assets/IMG_1.jpg" alt="mi"></p>
<span id="more"></span>
<h1 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h1><p>U盘一个(格式化成FAT32格式) 能访问路由器后台、访问SSH、使用U盘的电脑或手机一台 预先下载好OpenWrt固件(<a href="https://openwrt.org/toh/hwdata/xiaomi/xiaomi_mi_router_3_pro">下载页面</a>，找<strong>Firmware OpenWrt Install URL</strong>)<br>（Github下载地址，<a href="https://github.com/cyr580/openwrt-ramips-mt7621-xiaomi_mir3p/blob/master/openwrt-ramips-mt7621-xiaomi_mir3p-squashfs-factory.bin?raw=true">openwrt-ramips-mt7621-xiaomi_mir3p-squashfs-factory.bin</a>）</p>
<h1 id="刷入开发版固件，获取SSH访问权限"><a href="#刷入开发版固件，获取SSH访问权限" class="headerlink" title="刷入开发版固件，获取SSH访问权限"></a>刷入开发版固件，获取SSH访问权限</h1><p>获取到SSH权限之后，才能刷入非官方固件。<br>小米路由器获取SSH权限的方法是：先刷入开发版固件，用app绑定路由器后，访问开放平台，可以获取到root密码、下载ssh解锁工具。<br>接下来就按照这个步骤进行操作：</p>
<p>首先，打开MiWiFi下载页，点击ROM图标，找到小米路由器Pro 开发版的下载按钮，点击下载。 开发版最后一次更新时间是2017年8月25日，看样子也不会再更新了，所以直接放<a href="http://bigota.miwifi.com/xiaoqiang/rom/r3p/miwifi_r3p_firmware_daddf_2.13.65.bin">下载链接</a>。</p>
<p>下载好固件后，直接去路由器后台更新固件，等待重启。</p>
<p>手机下载MiWiFi app，打开并绑定路由器到小米账号，然后卸载。</p>
<p>访问<a href="https://d.miwifi.com/rom/ssh">MiWiFi SSH页面</a>。登录小米账号后，就可以看到绑定的路由器，后面跟着root密码和一个下载工具包的按钮。记住这个root密码，然后把工具包下载下来，文件名应该是miwifi_ssh.bin。</p>
<p>这个页面写有详细的使用方法，此处复读：</p>
<blockquote>
<ol>
<li>请将下载的工具包bin文件复制到U盘（FAT/FAT32格式）的根目录下，保证文件名为miwifi_ssh.bin；</li>
<li>断开小米路由器的电源，将U盘插入USB接口；</li>
<li>按住reset按钮之后重新接入电源，指示灯变为黄色闪烁状态即可松开reset键；</li>
<li>等待3-5秒后安装完成之后，小米路由器会自动重启，之后您就可以尽情折腾啦 ：）</li>
</ol>
</blockquote>
<p>第1步复制miwifi_ssh.bin到U盘的同时，顺便把OpenWrt固件一起放进去，改名为factory.bin。</p>
<p>路由器开机完成后，就可以尝试着拿刚才获取到的root密码访问SSH了。但不一定刚开好机就能访问，可能要等几分钟。</p>
<h1 id="刷入OpenWrt固件"><a href="#刷入OpenWrt固件" class="headerlink" title="刷入OpenWrt固件"></a>刷入OpenWrt固件</h1><p>假设此时已经将OpenWrt固件放入U盘并改名为<font color=red>factory.bin</font>，也可以<strong>SCP传入/tmp目录</strong>，记得改个简短的文件名，方便操作，如<font color=red>firmware.bin</font></p>
<p>ssh 进入到路由器，然后执行下面的指令，小米路由器 IP 一般是<font color=red>192.168.31.1</font></p>
<p>打开ssh，输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /extdisks/sda1</span><br><span class="line">nvram set flag_try_sys1_failed=1</span><br><span class="line">nvram set flag_try_sys2_failed=0</span><br><span class="line">nvram set flag_boot_success=0</span><br><span class="line">nvram commit</span><br><span class="line">dd if=factory.bin bs=1M count=4 | mtd write - kernel1</span><br><span class="line">mtd erase rootfs0</span><br><span class="line">mtd erase rootfs1</span><br><span class="line">mtd erase overlay</span><br><span class="line">dd if=factory.bin bs=1M skip=4 | mtd write - rootfs0</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>/extdisks/sda1 对应的是U盘根目录。如果重插过U盘，这个路径可能会有变化。</p>
<p>或者：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">nvram set flag_try_sys1_failed=1 </span><br><span class="line">nvram set flag_try_sys2_failed=0 </span><br><span class="line">nvram set flag_boot_success=0 </span><br><span class="line">nvram commit</span><br><span class="line">dd if=firmware.bin bs=1M count=4 | mtd write - kernel1</span><br><span class="line">mtd erase rootfs0</span><br><span class="line">mtd erase rootfs1</span><br><span class="line">mtd erase overlay</span><br><span class="line">dd if=firmware.bin bs=1M skip=4 | mtd write - rootfs0</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>输入完命令后，路由器会自动重启，之后就会变成OpenWrt了。</p>
<h1 id="如果想刷回官方固件"><a href="#如果想刷回官方固件" class="headerlink" title="如果想刷回官方固件"></a>如果想刷回官方固件</h1><p>假设此时U盘仍然是FAT/FAT32格式。建议先将U盘里的文件清空。</p>
<p>从刚才的下载页面，下载官方固件，放入U盘，并重命名为miwifi.bin。</p>
<p>打开路由器ssh，输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fw_setenv flag_try_sys1_failed 0</span><br><span class="line">fw_setenv flag_try_sys2_failed 1</span><br><span class="line">fw_setenv flag_boot_success 0</span><br></pre></td></tr></table></figure>
<p>断电，将U盘插入路由器，按住reset键通电，黄灯闪烁时松开。（同上面的2、3、4步）</p>
<p>等待几分钟，黄灯/蓝灯常亮后，就刷回官方固件了。</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>SCP上传固件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp firmware.bin root@192.168.31.1:/tmp</span><br></pre></td></tr></table></figure>

<p>刷完不要着急，等个十分钟左右指示灯变蓝（非要着急拔电源变砖了，后果自负），然后进入后台管理即可<br>路由器 IP ：<font color=red>192.168.1.1</font><br>默认用户名：<font color=red>root</font><br>默认密码：<font color=red>password</font></p>
<p>如果和宽带冲突，自己先别把路由器和宽带连一起，先连路由器和设备登录进去（WiFi 或网线都行），改下路由器的 IP ，<font color=red>网络 -&gt; 接口 -&gt; LAN</font>，改成自己想要的，宽带是 <font color=red>1.1</font>，你随便改个 <font color=red>2.1</font></p>
]]></content>
      <categories>
        <category>PC</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>小米路由器</tag>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>openwrt本地安装ipk</title>
    <url>/2022/01/13/2022-01-13-blog/</url>
    <content><![CDATA[<h1 id="0penwrt固件离线安装IPK插件教程"><a href="#0penwrt固件离线安装IPK插件教程" class="headerlink" title="0penwrt固件离线安装IPK插件教程"></a>0penwrt固件离线安装IPK插件教程</h1><p>（以WIN系统为例）</p>
<p>当我们不想换系统，而只想安装一个里面没有的插件时，可以试试OpenWrt固件离线安装IPK插件教程。废话不多说，开整。</p>
<span id="more"></span>
<p>准备工作：<br>    1. 电脑上安装好winscp这个软件（自行百度下载安装）以及要安装的ipk插件保存到电脑上。<br>    2. 用网线或者无线连接你的路由器，保证能进入到路由器的系统界面，路由器的ssh要开启（openwrt固件基本上默认都是开启的）<br>    3. 打开winscp工具：</p>
<p><img data-src="/assets/o1.jpg" alt="图片"></p>
<p>备用说明图 输入命令<font color=green>opkg install xxxx.ipk</font></p>
]]></content>
      <categories>
        <category>PC</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWrt 安装 AdGuard Home 设置广告拦截</title>
    <url>/2022/01/13/2022-01-13-blog1/</url>
    <content><![CDATA[<p> AdGuard Home 是广告拦截与反跟踪软件，可以将广告与追踪相关的域名屏蔽，同时不再需要安装任何客户端，包括 Windows、Mac、Android、iOS，下面我们说的是 OpenWrt 安装 AdGuard Home 设置全局广告拦截，教程开始之前，我先介绍一下 AdGuard Home 的工作原理。</p>
<span id="more"></span>
<p>AdGuard Home 的工作原理是在 DNS 的域名解析过程中拦截网页上的广告，目前支持 DNS over TLS 和 DNS over HTTPS，本教程讲解讲解如何配置 OpenWRT 的 AdGuardHome 实现DNS防污染加快网站解析速度 和 广告拦截。</p>
<p><img data-src="https://s2.loli.net/2022/01/13/4JygMN3zUbjTAVH.jpg"></p>
<h2 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h2><p>AdGuard Home<a href="https://cloud.opssh.cn/chajian/luci-app-adguardhome_1.8-11_all.ipk">⏬点击下载</a></p>
<p>AdGuard Home源码<a href="https://github.com/cyr580/luci-app-adguardhome">⏬点击下载源码</a></p>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>方法一</p>
<p>通过本站高速下载好 AdGuard Home 插件，打开 OpenWrt 管理界面，进入系统列表页找到文件传输，选择上传 AdGuard Home 插件，并在上传文件列表进行安装，如下图：<br><img data-src="https://s2.loli.net/2022/01/13/R7lJwkNpu83nChZ.jpg"><br>方法二</p>
<p>打开 OpenWrt 管理界面，进入系统列表页找到软件包，将 本站的 AdGuard Home 插件高速下载网址 复制到 下载并安装软件包的填写框内，点击确定，如下图：<br><img data-src="https://s2.loli.net/2022/01/13/toEPQrC8DFkK3Hn.jpg"></p>
<h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><p>1、点击 服务 -&gt; AdGuard Home，更新核心版本，等待核心更新完成并启用 AdguardHome 插件，点击日志，如果有运行记录，则表示AdGuardHome已正常运行，如下图：<br><img data-src="https://s2.loli.net/2022/01/13/DOAWUyfebiXRzxk.jpg"><br>2、置 AdGuardHome 密码，点击 改变网页登录密码 并添加，填写 改变网页登录密码，点击载入计算模块，然后再点击计算，如下图：<br><img data-src="https://s2.loli.net/2022/01/13/SjZgVmziGp7UD8v.jpg"><br>3、点击按钮进入 AdGuardHome，或在地址栏中输入 192.168.2.1:3000，进入后配置 AdGuardHome，注意：账号为 root，密码为上一步你设置的密码，比如我的：admin，如下图：</p>
<p>注意：配置 AdGuardHome 时，设置端口环节，建议手动修改，比如默认80，53，我就修改成了8080，55<br><img data-src="https://s2.loli.net/2022/01/13/2pchMYH4iNQsxl5.jpg"><br>4、进入 AdGuardHome 控制台后，点击 设置 进入 DNS设置，如下图：<br><img data-src="https://s2.loli.net/2022/01/13/PfS6VCGvDq3MLly.jpg"><br>5、进入 DNS设置 后，填写 上游 DNS 服务器，选择 并行请求，填写 Bootstrap DNS 服务器，上游 DNS 服务器 和 Bootstrap DNS 服务器已经列举在下面了，如下图：<br><img data-src="https://s2.loli.net/2022/01/13/3dzFhSNofcexiBY.jpg"><br>特别注意：Bootstrap DNS 用于解析上游DNS，所以尽可能将 Bootstrap DNS 的第一条设置为当地运营商的DNS地址（支持IPV6），当地运营商的DNS地址可通过直接命令框内使用 ipconfig /all 查询，前提是必须网线直接插在光猫上</p>
<p>上游 DNS 服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">114.114.114.114</span><br><span class="line">114.114.115.115</span><br><span class="line">223.5.5.5</span><br><span class="line">223.6.6.6</span><br><span class="line">119.29.29.29</span><br><span class="line">180.76.76.76</span><br><span class="line">101.226.4.6</span><br><span class="line">123.125.81.6</span><br><span class="line">101.226.4.6</span><br><span class="line">101.226.4.6</span><br><span class="line">https://dns.google/dns-query</span><br><span class="line">https://dns.quad9.net/dns-query</span><br><span class="line">https://doh.opendns.com/dns-query</span><br><span class="line">https://1.1.1.1/dns-query</span><br><span class="line">tls://dns.rubyfish.cn</span><br><span class="line">tls://8.8.8.8</span><br><span class="line">tls://8.8.4.4</span><br><span class="line">tls://dns.google:853</span><br></pre></td></tr></table></figure>

<p>Bootstrap DNS 服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当地电信DNS</span><br><span class="line">当地移动DNS</span><br><span class="line">当地联通DNS</span><br><span class="line">119.29.29.29</span><br><span class="line">223.5.5.5</span><br><span class="line">180.76.76.76</span><br><span class="line">8.8.8.8</span><br><span class="line">8.8.4.4</span><br><span class="line">208.67.222.222</span><br></pre></td></tr></table></figure>

<p>6、点击 过滤器 ，选择 DNS封锁清单，添加下方合适的规则并将对应规则打钩，软后点击检查更新，如下图：<br><img data-src="https://s2.loli.net/2022/01/13/8FpCOVgtouD9GyX.jpg"><br>7、返回 OpenWrt 的 AdGuard Home 插件设置内将重定向设置为 作为dnsmasq 的上游服务器即可，这样我就让 AdGuardHome 生效了，如下图：<br><img data-src="https://s2.loli.net/2022/01/13/krGQE3iBvgoOz8e.jpg"></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>前面就是全部的教程内容了，拦截效果由规则决定，建议使用合适的规则，不要滥用规则，拦截效果可到 AdGuard Home 网页管理内查看。</p>
<p>网络环境中，多个DNS缓存可能造成网络访问异常，所以需要进入 AdGuard Home 网页管理处，点击 设置，选择 DNS设置，将DNS缓存大小设置为 0 即可</p>
]]></content>
      <categories>
        <category>PC</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWRT刷回小米路由器R3P官方固件</title>
    <url>/2022/01/15/2022-01-15-blog/</url>
    <content><![CDATA[<p>1、从小米下载开发固件，并将其重命名为miwifi.bin放到U盘(FAT/FAT32)根目录。<br>2、打开WINSCP，上传kernel0.bin到路由器/tmp目录下。<br>   然后SSH连接到路由器输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">mtd write kernel0.bin kernel</span><br></pre></td></tr></table></figure>
<p>3、拔掉电源将U盘插到路由器。<br>4、重新插入电源，按住复位键等待黄灯闪烁再松开复位键,等待5分钟安装固件。</p>
<p>文件下载：<br><a href="https://cyr580.github.io/c/kernel0.bin">https://cyr580.github.io/c/kernel0.bin</a><br><a href="https://cyr580.github.io/c/miwifi.bin">https://cyr580.github.io/c/miwifi.bin</a></p>
]]></content>
      <categories>
        <category>PC</category>
      </categories>
      <tags>
        <tag>小米路由器</tag>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>路由器相关（备份）</title>
    <url>/2022/01/15/2022-01-15-blog1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d5cf68455994ea2ede3fe93d7b00e3f821a0a8524d98ace716b9c9715ace2f16">372103fd74acef0a78b65f679c501eeebb217222fa0e5115cff93eb7694369cbabd31b317e12666ea41f606871b3fdc75d3b34ea3a1d8550053774951423695961983be7da0a13ff4bbf0384dac1c7d8d41d46c9b57f8e4aeb91975df5d3d4a88abf6416819e19211cbaf4f5c42853557f4fee25be091b9f95e9ac4e96167405042c2f8181fa21ee533a3e54fe425f64d882e3a6aece9fb695326421f59b177e6a02099089b7e0f5cf51e645395062807a47d16f2caf48667f146948ef717adcc46bf6c7ae444036e49c6c9d44f1c9301070e69a57e9d2fd38f2ed1180a322613247982c38f38256dee9ba5c193485681bc1c1857ab1dded780f3be732db928e620a05937d18b287b9f483b8323ee7f774ba7c126ac13222b18a23e1a55c36a750990fedc6aa87f5afd1397a8ce0eb00e6c3cb861e826a04b6a84bd2cd346137c4ab53f5950c7ba93692eabf002901f09d1fb3d2af52077a6e1179ea0f85328c37eea0c47f4ab8ba80530d25bb4b7186ab634217d5f865f5c5eb9fe692daade7afac893a50cb002f7ddf862104456de9fadb34272da4ee994e2218dee1c5003b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>PC</category>
      </categories>
      <tags>
        <tag>小米路由器</tag>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>国内外免费公共 DNS 服务推荐</title>
    <url>/2022/01/15/2022-01-15-blog2/</url>
    <content><![CDATA[<p><img data-src="https://s2.loli.net/2022/01/15/y4XoUTxJkCPj9mG.jpg"></p>
<span id="more"></span> 
<p>我们都知道想要能上网，就必须要使用DNS。DNS一般都是你的运营商提供给你的，也可以是一些其它组织提供的，比如我们熟知的谷歌的DNS 8.8.8.8，国内114dns的114.114.114.114 。这些由大的厂商和机构提供的公开解析服务，叫做公共DNS。</p>
<p>不过首先要明白，公共DNS不是：</p>
<ul>
<li>  不是根服务器</li>
<li>  不是权威dns托管商，不提供域名注册等服务，比如万网和DNSpod</li>
<li>  不是权威dns，不针对个别域名进行解析</li>
</ul>
<p>公共DNS服务的特点就是服务的域名数量巨大，用户数多，同时要求具有安全性和抗攻击性，低延迟（响应快），无拦截（无广告）以及对解析成功率要求非常的高。并在一定程度上提高网页的链接速度，因此选择使用一个优秀的DNS，可以显著的提高网络冲浪体验。</p>
<p>下面微观君就介绍一些国内外优秀的公共DNS供大家选用。</p>
<hr>
<h2 id="国内公共-DNS"><a href="#国内公共-DNS" class="headerlink" title="国内公共 DNS"></a>国内公共 DNS</h2><h2 id="腾讯云-DNS"><a href="#腾讯云-DNS" class="headerlink" title="腾讯云 DNS"></a><strong>腾讯云 DNS</strong></h2><p>Public DNS+ 是 DNSPod 推出的公共域名解析服务，DNSPod 曾是中国第一大DNS解析服务提供商，现在 DNSPod 已经被腾讯云收购，因此也叫做腾讯公共 DNS 服务。腾讯 DNS 可以为用户提供更加快速、准确、稳定的递归解析服务，且不会对任何域名进行恶意劫持。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">IPv4 DNS 地址：119.29.29.29</span><br></pre></td></tr></table></figure>

<p>服务地址：<a href="https://link.zhihu.com/?target=https://www.dnspod.cn/Products/Public.DNS">https://www.dnspod.cn/Products/Public.DNS</a></p>
<h2 id="阿里云公共-DNS"><a href="#阿里云公共-DNS" class="headerlink" title="阿里云公共 DNS"></a>阿里云公共 DNS</h2><p>由阿里云提供的公共DNS服务。阿里云拥有全球数百台服务器组成的集群，具有充足的带宽资源；其自研高性能DNS系统和清洗中心，保障系统稳定和安全。BGP anycast技术，让您访问最近的DNS集群；动态缓存技术，加速解析响应。阿里云公共 DNS具有稳定，快速，智能的优势。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">IPv4 DNS 地址：223.5.5.5 / 223.6.6.6</span><br><span class="line">IPv6 DNS 地址：2400:3200::1 / 2400:3200:baba::1</span><br></pre></td></tr></table></figure>

<p>服务地址：<a href="https://link.zhihu.com/?target=https://alidns.com/">https://alidns.com/</a></p>
<h2 id="百度公共-DNS"><a href="#百度公共-DNS" class="headerlink" title="百度公共 DNS"></a><strong>百度公共 DNS</strong></h2><p>由百度推出的公共DNS的服务，依托百度强大技术，具有云防护，无劫持，更精准三大优势。</p>
<ul>
<li>  云防护：病毒、木马、钓鱼网站一网拦截，百度云防护实时守护您的访问安全</li>
<li>  无劫持：无恶意跳转，无强制广告，百度公共DNS让您的每一次访问都畅通无阻</li>
<li>更精准：遍布全国的递归出口、智能解析，所有的努力只为让CDN定位更精准，让您的每一次访问都更高效</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">IPv4 DNS 地址：180.76.76.76</span><br><span class="line">IPv6 DNS 地址：2400:da00::6666</span><br></pre></td></tr></table></figure>

<p>服务地址：<a href="https://link.zhihu.com/?target=https://dudns.baidu.com/intro/publicdns">https://dudns.baidu.com/intro/publicdns</a></p>
<h2 id="114-DNS"><a href="#114-DNS" class="headerlink" title="114 DNS"></a><strong>114 DNS</strong></h2><p>114 DNS 源自南京信风 2010 年为中国电信及中国联通两个大省约 2000 万宽带用户提供备份服务的超大型 DNS 系统，同时提供公众 DNS 解析服务及权威 DNS 解析备份服务，114DNS 将为中国的互联网及电子商务提供可靠的基础安全保障。114DNS 为国内云安全DNS服务先行者，114DNS 平台由多个基础电信运营商与南京信风共建共享，但由南京信风提供技术支持以确保服务的优质高效。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">IPv4 DNS 地址：114.114.114.114 / 114.114.115.115</span><br></pre></td></tr></table></figure>

<p>服务地址：<a href="https://link.zhihu.com/?target=http://www.114dns.com/">http://www.114dns.com/</a></p>
<h2 id="OneDNS"><a href="#OneDNS" class="headerlink" title="OneDNS"></a><strong>OneDNS</strong></h2><p>OneDNS是北京微步在线科技有限公司旗下产品，为防止DNS解析服务被滥用，OneDNS个人版对来自每个IP地址的解析请求量做了限制，其解析服务分为拦截版，纯净版，家庭版三种。拦截版含有恶意网站拦截、广告过滤等功能；纯净版则不对访问网站进行任何过滤拦截，直接返回其真实的响应结果。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">拦截版 IPv4 DNS 地址：117.50.11.11    52.80.66.66</span><br><span class="line">纯净版 IPv4 DNS 地址：117.50.10.10    52.80.52.52</span><br><span class="line">家庭版 IPv4 DNS 地址：117.50.60.30    52.80.60.30</span><br></pre></td></tr></table></figure>

<p>服务地址：<a href="https://link.zhihu.com/?target=https://www.onedns.net">https://www.onedns.net</a></p>
<hr>
<h2 id="国外DNS-服务"><a href="#国外DNS-服务" class="headerlink" title="国外DNS 服务"></a>国外DNS 服务</h2><h2 id="谷歌公共-DNS"><a href="#谷歌公共-DNS" class="headerlink" title="谷歌公共 DNS"></a><strong>谷歌公共 DNS</strong></h2><p>谷是最早推出免费DNS服务的平台。谷歌DNS它们易于记忆，并且每个人都可以使用。谷歌DNS的主要优势来自他们作为一家公司的声誉。谷歌每年收入极多，有能力提供最稳定和更有弹性的DNS服务器。这个DNS服务器的唯一问题是它们存储有关您的运营的信息，如果美国政府决定需要这些信息，它们可以与第三方共享，Google通常被认为是最好的DNS服务器。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">IPv4 DNS 地址：8.8.8.8 / 8.8.4.4</span><br></pre></td></tr></table></figure>

<p>服务地址：<a href="https://link.zhihu.com/?target=https://developers.google.com/speed/public-dns">https://developers.google.com/speed/public-dns</a></p>
<h2 id="Cloudflare-DNS"><a href="#Cloudflare-DNS" class="headerlink" title="Cloudflare DNS"></a><strong>Cloudflare DNS</strong></h2><p>cloudflare 是一家国外的 CDN 加速服务商。2018 年的 4 月 1 日愚人节，Cloudflare 宣布推出 1.1.1.1 公共 DNS 服务。如今两年过去了，其已经成为了仅次于 Google 的全球第二大公共 DNS 解析器。cloudflare DNS目标互联网上速度最快且高度关注隐私保护的消费级 DNS 服务</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">IPv4 DNS 地址：1.1.1.1 和 1.0.0.1</span><br><span class="line">IPv6 DNS 地址：2606:4700:4700::1111 和 2606:4700:4700::1001</span><br></pre></td></tr></table></figure>

<p>服务地址：<a href="https://link.zhihu.com/?target=https://developers.google.com/speed/public-dns">https://developers.google.com/speed/public-dns</a></p>
<h2 id="OpenDNS"><a href="#OpenDNS" class="headerlink" title="OpenDNS"></a><strong>OpenDNS</strong></h2><p>OpenDNS 是一个免费的域名解析服务提供商（DNS），并具备反钓鱼、内容控制软件等功能。2015年6月30日，思科系统公司宣布收购OpenDNS。OpenDNS为个人和商业提供DNS方案，用户可以自行选择使用OpenDNS的服务或者使用当地ISP提供的DNS服务。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">IPv4 DNS 地址：208.67.222.222 / 208.67.220.220</span><br><span class="line">IPv4 DNS 地址：208.67.222.220 / 208.67.220.222</span><br><span class="line">IPv6 DNS 地址：2620:119:35::35 / 2620:119:53::53</span><br></pre></td></tr></table></figure>

<p>服务地址：<a href="https://link.zhihu.com/?target=https://www.opendns.com/">https://www.opendns.com/</a></p>
<p>总结：对于国内用户微观君推荐大家使用腾讯云 阿里云的公共 DNS，作为云服务器大厂，公共DNS算是基础服务，势必有不错的保证。国外用户选Cloudflare的公共DNS服务，在速度和隐私方面都做的很好。</p>
]]></content>
      <categories>
        <category>PC</category>
      </categories>
      <tags>
        <tag>windows11</tag>
        <tag>win11</tag>
      </tags>
  </entry>
  <entry>
    <title>UltraUXThemePatcher破解主题不成功</title>
    <url>/2022/01/15/2022-01-15-blog3/</url>
    <content><![CDATA[<p><img data-src="https://s2.loli.net/2022/01/15/y4XoUTxJkCPj9mG.jpg"></p>
<span id="more"></span> 
<p>01，为免造成系统错误，使用前必须 <a href="https://zhutix.com/10tutorials/huanyuan/">创建系统还原点</a>；造成严重后果，本站概不负责！</p>
<p>02，Win10在进行系统重大更新前(比如1803升级1809)必须将主题切换到默认主题，然后卸载本补丁再进行系统升级操作！</p>
<p>03，UltraUxThemePatcher会更改系统dll文件，故部分杀软会报毒，请放心使用！安装前请务必退出各种安全软件！</p>
<p>04，本补丁兼容WinXP/7/8/8.1/10/11，不兼容Win10 1511（10586）（<a href="https://zhutix.com/moe/study/winver-banben/">查看版本号</a>）及预览版系统</p>
<p>05，Win10系统如果安装本补丁后重启出现闪屏，请查阅 <a href="https://zhutix.com/study/win10-heiping-jj/">Win10系统开机闪屏解决方法</a></p>
<p>06，请右键 – 以管理员身份运行本补丁</p>
<h3 id="提示not-supported"><a href="#提示not-supported" class="headerlink" title="提示not supported"></a>提示not supported</h3><p>如果提示not supported，也许是因为你用的预览版Win10，补丁暂未支持，静等作者更新；如果你用的老版本Win10，请尝试安装老版本补丁：</p>
<p><a href="https://pan.baidu.com/s/1B3HJGwnPmJvel9JpqqQzdw">https://pan.baidu.com/s/1B3HJGwnPmJvel9JpqqQzdw</a> 提取码：qftm</p>
<hr>
<h3 id="验证是否破解成功"><a href="#验证是否破解成功" class="headerlink" title="验证是否破解成功"></a>验证是否破解成功</h3><p>如果安装本补丁后应用主题无效，请再次打开安装程序，停留在破解详情界面（如下图），看下面红色框内的项是否显示的是 <strong>patched</strong></p>
<p>如果是，则说明你破解成功，如果有任意一项显示 <strong>NOT patched</strong> 则不成功！</p>
<p>Win10 1709/1803/1809/1903/1909，第一个框会提示<strong>no need to patch</strong>，意思不需要破解，不用理会！</p>
<p><img data-src="https://dl.zhutix.net/2018/11/UltraUxThemePatcher351.jpg"></p>
<p><strong>如果破解不成功，请继续往下看</strong></p>
<p><strong>右键以管理员身份再次运行此软件，安装！</strong>如果仍显示NOT patched，请采用下面的方法：</p>
<p>下载 <a href="https://dl.zhutix.net/2018/12/guanliyuan.zip">此文件</a>，运行里面的“添加管理员取得所有权到右键菜单.reg”</p>
<p>打开C:\Windows\System32，搜素Themeui，在搜索结果内的Themeui.dll上右键-管理员取得所有权</p>
<p>返回C:\Windows\System32，搜素Uxinit，在搜索结果内的Uxinit.dll上右键-管理员取得所有权</p>
<p>Win7和Win8还需要搜索Uxtheme.dll，以同样的方法获取管理员权限</p>
<p><strong>然后右键以管理员身份重新安装破解补丁，重启电脑即可！</strong></p>
<p><strong>破解成功，但仍无法使用主题？往下看</strong></p>
<p>部分主题需要更改 <a href="https://zhutix.com/study/xm100/">项目显示大小为100%</a> 才能正常使用，特别是一些动漫主题、钢铁侠主题、仿制主题等，简约主题一般不需要！</p>
<p><strong>破解成功、项目大小也是100%，仍无法使用主题？往下看</strong></p>
<p>一般情况下是优化软件把主题服务给优化掉了，我们需要开启它！首先打开计算机管理：</p>
<p>在此电脑上右键-管理；或者在开始按钮处右键 – 计算机管理；或者在键盘上按“WIN+R”快捷键，打开运行界面，输入“services.msc”指令（图1）；打开服务项，找到Themes服务，在Themes上右键-属性（图2）；查看服务状态是否是已停止，如果是，点击下面的启动，然后在启动类型里面选择“自动”，确定！（图3）；再次应用主题就OK了！</p>
<p><a href="https://dl.zhutix.net/2018/12/themeswufu.jpg"><img data-src="https://dl.zhutix.net/2018/12/themeswufu.jpg"></a></p>
<p><strong>如果以上方法用后仍无法使用主题</strong></p>
<p>那真无奈了，你这种情况我们也是前所未见，请重装系统，安装微软原版系统镜像：</p>
<p><a href="https://zhutix.com/10tutorials/win10-iso/">https://zhutix.com/10tutorials/win10-iso/</a></p>
<hr>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p><img data-src="https://dl.zhutix.net/2019/04/5234.png"></p>
<p>Win10在进行大更新（比如<a href="tel:180-1903">180-1903</a>）前，必须卸载这个补丁，否则电脑会闪屏！</p>
<p>进入C:\Program Files (x86)\UltraUXThemePatcher运行卸载程序，按照默认选项卸载即可，或打开系统设置(或控制面板)卸载。</p>
<p>如果你已经因此闪屏请查阅解决方法：<a href="https://zhutix.com/study/win10-heiping-jj/">https://zhutix.com/study/win10-heiping-jj/</a></p>
<h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>2021年11月20日 支持Win11 Insider版本支持Win10 21H2、takeowner 错误已修复</p>
<p>2020年11月16日 支持下一个主要更新21H1，重大更新后的问题应得到解决（机翻-_-||）</p>
<p>2021年1月8日 支持21H2</p>
<p>2021年1月17日 修复了显示文本中的错误</p>
<p>2021年4月16日 支持下一个主要更新21H2</p>
<p>2021年6月19日 支持下一次重大更新21H2</p>
<p>2021年7月4日 支持 Windows 11 Insider 版本</p>
<p>2021年9月4日 支持 Windows 11 Insider 版本 支持下一个主要的 Windows 10 更新 21H2</p>
]]></content>
      <categories>
        <category>PC</category>
      </categories>
      <tags>
        <tag>windows11</tag>
        <tag>win11</tag>
      </tags>
  </entry>
  <entry>
    <title>各地DNS</title>
    <url>/2022/01/16/2022-01-16-blog/</url>
    <content><![CDATA[<h2 id="DNS转发"><a href="#DNS转发" class="headerlink" title="DNS转发"></a>DNS转发</h2><p>北京DNS地址：<br>202.96.199.133 、202.96.0.133 、202.106.0.20 、202.106.148.1、 202.97.16.195、 202.106.196.115<br>上海DNS地址：<br>202.96.199.132 、202.96.199.133 、202.96.209.5 、202.96.209.6 、202.96.209.133  </p>
<span id="more"></span>
<p>天津DNS地址：<br>202.99.96.68 、10.10.64.68<br>广东DNS地址：<br>202.96.128.143 、202.96.128.68 、202.96.128.110<br>深圳DNS地址：<br>202.96.134.133、 202.96.154.8、 202.96.154.15<br>河南DNS地址：<br>202.102.227.68 、202.102.245.12、 202.102.224.68<br>广西DNS地址：<br>202.96.128.68 202.103.224.68 202.103.225.68<br>福建DNS地址：<br>218.85.157.99 、 202.101.115.55<br>厦门DNS地址：<br>202.101.103.55 、 202.101.103.54<br>湖南DNS地址：<br>202.103.0.68 、202.103.96.68 、202.103.96.112<br>江苏DNS地址：<br>202.102.15.162 、202.102.29.3 、202.102.3.141 、202.102.24.35<br>陕西DNS地址：<br>202.100.13.11 、202.100.4.16<br>西安DNS地址：<br>202.100.4.15 、202.100.0.68<br>湖北DNS地址：<br>202.103.0.68 、202.103.0.117 、202.103.24.68<br>山东DNS地址：<br>202.102.154.3 、202.102.152.3 、202.102.128.68 、202.102.134.68<br>浙江DNS地址：<br>202.96.102.3 、202.96.96.68 、202.96.104.18<br>辽宁DNS地址：<br>202.98.0.68 、202.96.75.68 、202.96.75.64 、202.96.69.38 、202.96.86.18 、202.96.86.24<br>安徽DNS地址：<br>202.102.192.68<br>重庆DNS地址：<br>61.128.128.68 、61.128.192.4<br>黑龙江DNS地址：<br>202.97.229.133 、202.97.224.68<br>河北DNS地址：<br>202.99.160.68 、202.99.166.4<br>吉林DNS地址：<br>202.98.5.68 、202.98.14.18 、202.98.14.19<br>江西DNS地址：<br>202.101.224.68 、10.117.32.40 、202.109.129.2 、202.101.240.36<br>山西DNS地址：<br>202.99.192.68 、202.99.198.6<br>新疆DNS地址：<br>61.128.99.133 、61.128.99.134<br>贵州DNS地址：<br>202.98.192.68 、10.157.2.15<br>云南DNS地址：<br>202.98.96.68 、202.98.160.68<br>四川DNS地址：<br>202.98.96.68 、61.139.2.69<br>重庆DNS地址：<br>61.128.128.68 、 61.128.192.4<br>成都DNS地址：<br>202.98.96.68 、202.98.96.69<br>内蒙古DNS地址：<br>202.99.224.68 、10.29.0.2<br>青海DNS地址：<br>202.100.128.68 、10.184.0.1<br>海南DNS地址：<br>202.100.192.68 、202.100.199.8<br>宁夏DNS地址：<br>202.100.0.68 、202.100.96.68<br>甘肃DNS地址：<br>202.100.72.13 、10.179.64.1<br>香港DNS地址：<br>205.252.144.228 、208.151.69.65<br>澳门DNS地址：<br>202.175.3.8 、202.175.3.3<br> <br>教育网DNS地址列表：</p>
<p>202.114.64.2     武大DNS1 (一区)<br>202.114.96.1     武大DNS2 (二区)<br>202.114.96.2     武大DNS3 (二区)<br>202.114.112.13   武大DNS4 (三区)<br>202.114.0.242    (server20.hust.edu.cn)    华工DNS<br>202.112.0.35     (dns.hust.edu.cn)         华工DNS2<br>202.112.20.131   (dns.whnet.edu.cn)        华中地区网络中心DNS<br>166.111.8.28     (dns-a.tsinghua.edu.cn)   清华DNS1<br>166.111.8.29     (dns-b.tsinghua.edu.cn)   清华DNS2<br>166.111.8.30     (dns.tsinghua.edu.cn)     清华DNS<br>202.117.0.20     (dec3000.xjtu.edu.cn)     西交DNS1<br>202.117.0.21     (ns2.xjtu.edu.cn)         西交DNS2<br>202.112.26.34    (上交)<br>202.112.112.100  (人大)<br>162.105.129.27   (北大)<br>202.203.128.33   (cernet云南中心主dns)<br>202.115.64.33    (西南交大)<br>210.33.116.112   (浙江电大)<br>202.116.160.33   (华南农业)<br>202.112.0.33     (华北网)</p>
]]></content>
      <categories>
        <category>PC</category>
        <category>小米路由器</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>snell</title>
    <url>/2022/01/18/2022-01-18-blog/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="945c85cfc32531bbc3a5c45e9cef0381d8467c9d3ed0e5d8b06735d1e7a1df55">372103fd74acef0a78b65f679c501eee21ed20637a16b4dbc4837da0bc6d4dfce47c78eab0c8af5dbb79b36fa99f5bcc7232b18de801839a404a17e59aa214f5404e4f38b8d5499668844aaac6efb456a3b2aebc1bbfde53f6d60500570b833f4feeb93f440404ff78c62a1de9217ceaa3b37248b2d943ccdefeb97a578dc2fe58d01367a6e649a89696c504cf79faa7401485173c47ca7b5b400ec101be2b8cfec8f6e793b0c432c18388e33cc7a5d22be916346e60cddb3b5bea5a3d69b86a2960f646247a9926ef94e6db6ffa5bdb6bdb599daab9ed5c6db9674d1d3b68f0dd9b3c15cd2eedb81aa8d325718804afe0ac1b56bc7266ebd32c8d0860038a371247b15102574fd5144b7090bff77bd3a0df9c93d15c175fe1961447b67498b39ed47f09811a2c1659752c7e2c76a1c33b3104cc21ffbe9356b7bdd047e6dce541452c1ce8b07bf7c3192435abffa4c57c18950c86401c92e1824f0958ad6745a5252eb7abcb89e77d7ec0fff7b7121d5f1deebfa0c8e76409d58c8dc60ac604bebcfe31834d14b2bab67fcaad5592436174094dd16d3944e66ef293bac43c1692668772baca341cdd679977d4da1d400c663c23830060b6738c8acd60cdd685bee58263f238257112689885abc8f0f1160e88fd6d5c6ab4c41c4532f7bf7908d532ebb345caebc34b89552e415cbb611df86bb6238d8edac47e37533a3940899b58873371eb30a87073ee6c0e699fa1bc559a2f24ed1ba7f7204d97b873dba7dbf42b9696cea8cb8d991bebccaf94b1f9a64de2da93eadecc1b5320c0a4dfec591e885223acfde830f7a391c38c952fb2072506fd05d31c587bc816c0df0ad9be8909aaba8107050dbbf7fee5064f1557d56f56a9d5f42ce6496c42228693c6259b7b2c77160082300c68bfed41e1dce64227e424b3b94e4b0efb7cb6dcfd9896e0c1c3cbca644c41a8d18ddad3cb2a382f2db0278ecdf74984d3aa39952268ad94c493cfd59b95365f6453042ef9d97349b8083cdb3800e4a1fedba59a774522dcae08aba0d9486abbd0e31860ffe4333c08d2c213019c0914a7be186c1e0317cc6bc7b983738767aeca651fdca7f0310703aa48754564cc31003cde3e7226310534f8ed3c55031e71b174364452b6c9c9466ae623ca380c80b69349d3fc0dc7b3b3cf4c05837f456106dc3bdd577435c5f3d3663b54a0d3be8808aa7e6519465c2ffadbc05f7a40c02f495e598cb482e37e8bbc88b97655a1fd8d71b3b3ac8a24ddc8d32d404edced0f2704cc9b149e05477a3b26e6bb3cff93d698c65bc26fa2d3d03f67628c46c3e6b090aa1b0c76a9a3bf17935899a20cd6814a59dae58be0c514bba79cf4e949e18335e480c5cfe416b8273a0397e00bd051732bd4ee8e448b060abc0a48c8a7402cb43041b04b070f9b86655728f7435a6ce4e24bf33dfaae89b2db2881f09485f026419b92210adda4e5448deb141acda0a863b333943f1279c59dbf809fe8578506d505732aeed7461882524c58e97ac5d30bcb466a411eddb79ba30b32f0de5aac357fdb027c7e454ec8f3c3e157207f3ffbcf75a030f3177f8cf475065585b4b9f7ed5613b43dbbecb4d58034e56e44f93b43fb88436dd0c11ecc72fbf38b5505d20d18832ed9147c887888ba78d8fd6c85eb2c60494831c51ec0eb543fb94c8328b14988aaec84589672182a762be7205e925cd8ad061859f38e00257eb86298c46ec145a7955b9d336a88317baf7d13ffd35eae28cb08233ae32ae54e75f68439ab655a61e99be5c0226532addebd3a0c6e68817f5b187cb89b5b9cc096b00a19cf89d7a5d49a3dd399af0ef35808868efd7b162c5fbeb1757284465660cb5f246d31172152c526c0bdc47e79f782991a7fdbc19e8d182638819ef3314b8d2ba62824d539e19bcef9ebc800733b13e941a3b13a72f0db06e9f0453f71b3416821721c8ee55f73fb128f50cc887194be7897fe76fb9e57cc0848b5ed3940408ffc1c7de48fe61b040e24b3fc14e8d330b15753ae6868eaf5d29b9e576991b3b2e25d425065efdf930b589df120bfa54abaeda760ad68d9bfd4b684ba44de915c37e4ab642048cb76c17973d6b8704f16a0c607ab7614d7061caa1118937d646185bb5b56b220a99c4444a6a9d6bdd387c1501510c2c301437a42cf206136aeaa11e70f548bb8d4ccc536e5a0be6e877144dbdad4d3d6d5819101f43efe53aaed604d7083dfc8b53852328b7b44ec1689f6b3ed55e1003cd6d84ab4f09a309ea2d44db971b7b53bd4d3ea1b304b7586a2085b3da1cb356f4ca714473d43e6eaffef24dc723f3ada455842a601e04d4544ec43832f839fabae1b3c42f8ee0e41a87bd6842cd8d96bf5e989e4341a67c9c14f75def5ca9f6aea2dfd42a992502a96f8f7d15331dd15e076bd532df9fad90e5814bd364cd5acbb512665bf6460da77b3b0ae11cc7f3f497b387ef95cdda03cb6080f2685ec9c4e2e359cfb16e78ac64e1b35455f9baf344b7424ffa4ee65313a0e20281fb286688745e8a8ad368479ab737c0fca83b4c0e2fd09c657086a76b51717f320f510162ce0ff9c2140cba4a1ef5ede51e99e596e3244f52dd8dc2dde66c4fc47649c7078e8fe0b3611e194af3a20a528a269ed81c4485d7ea28b8577c493e01d242dc6bf322fdf4ed74635ad5645fe224c1af8ae4a2775822d2e153a2bd40ae84bef5f9186fd96c3e05196b8efaa7f8c8fb2eafee2d98fcb73a66aa94b9d6fc48ce2ba61f6ea2514625b46da9980140a584168f3efa2cceb9ad3f5bf8c0e258bf15ca0e6dd87ff2f820efdc4a87e0c69d73b7faf4d5cf506d9e983d251c52339fbde04e02304277167d0f0e8e5d53fd4a17908b88abe1d8c256660a565b969f9dbcf61e018615dac91074562fd44f0ad46d84fe896f911f4fd7631444d675b54a743b581b11625f96e73015a2e61ee8b4bb0b4d766df9dfde5817e6faed51beb3569ac63b253b5e5f79913cc345747c9fc3bc12f416409c55801103a8f96c3ffb240572378c59f6d4fa0673596306cd05721d7559b754a54b5e2681e229c003ecc7d6261bc586a80d5a9a65f9f34e19dfde6799f21e68df815ecbefd770d9a83407d90df1de1727708f567c208e89e96635398c167c67a5110f70526ed81038fd5d377009ff6452d5fa6e9f4062a69e11440dfc33e1e72d2cd55a9aace36bcab915e8ef3185285767495286c89308a40e2324845c9415cdd5563e9ee244fdb92489721be02ecdf0cf444031bb24454863c6df2c23549c6a2a15e892dff52a3b85f24acd6de695c6530c3190e44e10cbab8a0fa5b7fdda0d0775ea278299f8ac2301c7794e3469a5116c8b451c9e76f0ac406d158f92db4b4c93c299337a31adc970868e561a192d8d90da8f0ab5aa7e69c9573ef9cce061e406190480519cc1e68d89307d335e528d7ca1ba91e60513ef8c8ccc3fd31425e36ea1774527909bc8fb17ace62900624c866d9c6bbe113cbffd515da2fb77904bb7a66e85cf1a06b2f58616eb59017abd5d83d90e7f6446746ed0aee5afe1157b35130a81cba6591dff3b11c3675a869b0756b6110222bb85b04e208ecdede5b06e4c456e518b91dbd5e85bb6097020c591fa761e137b29bee733ddabd13430b7c7b2f7a72eafa30dfc0cd77c36d0fdffcefce58bcdabe69d02bb8c8fbb1e4f5d4a1d231210cf31125e4097804e46f47899fc6e96d8b95993b0b2a04bda353e24b16f43393e51e57ecd525d50142169a4072d2104eafa281bfd5ec88b61a3e5fe56a01c704f93114001764f88647c285b012781bc74aedfef689527932082f94560019be03f4060564cfb1ac078c14ae850029da00406579d880ca6ee43abfe749b946484864574c4425569dc81e6c6a19883549e60f99a63e56c504f32346d5e1d96554f6309d31066f131f927a1cc393e01b1d3145dbe98664414cafbe12de62b2b92975ba9d97d4fd40a20eb486e9372955cb8bb9583e7973d8963b3efe852b67f09e6a5b2114be1868097e8368c82138dab10a48747f71ba9787bf8784927d8f1c11dc18c396710e2de37d30dfc62bf8766e5ccd29b854ca767a54c08f3112a79b12ac8b85f3347e9485872087725b1791b563aa158eff47e597816c82c44148b5858119b896718bcf77a9b8121e165f2b339a2f0befa085508e388cc620c1b8f5ed006a82dab9400f862aaf17fd305f58e80325956f527f13cd17a3abad7d2fb8a4c409a606754c8a330929e554489b8e8950f3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>iPhone</category>
      </categories>
      <tags>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>自建frp</title>
    <url>/2022/01/18/2022-01-18-blog1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e125161b9de3ed53b261b99e4e4c7237afa4ea1ff2747dc8bc0ef2a2f16ae788">372103fd74acef0a78b65f679c501eee50f8e81e0a5b09e9a458596e3e2da451329b0bfadc98caa22c2f777f00f1f6473a1d86080ac9139d01fcca7df64159ec410d7ea9434f5e3e7389157adbc0db415808567c0e8c78915f5b7b701a05627bff8c3604d1620d60964428f7d5931c1a5d3a30cdb728b62d54dbf7fcd95ab35756854d10bbbdf7e72eb98844edc0a4dab999a3ec133be77f01f076f3719a427c0a6c530de7e19784f4741f1d72539dd5e6d8028bce026e3017303a977c7cd4d84670256134e24b28d694abb4fd60c48675aaacd055a8fdfca38783bbfe0d5904b5c6b88d1a2618fafa7636e01a118da8a393a1481d840a8ed4e339fc67606de2f657af37a1e136337b9fe34dd4cf2438131516969e5c3691d65ceb0408daacae498410fb6e330b97782a806dc7115e2ae8d3c1d03f8b863b75216541c236aa5f360e4255ff263e37324c383db94682c1e843f4e8896ce9e7d698ae5cbffa966943e3b19ab4ccd087facb058324bcd56fa3fb761c36e6c20b51ccaac6922478156be98929432816baed9f4c09bceaf806ece035fb48c60a9c3c717ad1f3834960ebfb1341251a66b613339ffbfc63eea996155cdd8f87fb791f87b0a02d8cb1474cfb8d6fdbdc084b93f0b2ea76bdc4d30ce3a31855c916494d93a8d79e3b1bcfee86f421f214945eb86a62b1556ffa1e9245ca418a99f0b212bb5040798aa64dc180eb475b415b9ad18885cd6f2c83fea0dfbf5dbdda3061b4ca80085f3fd2c17318bc608bba2d0418a57f20289d15240ba2960cff16ca35411e02e56e8901142b6433d0d21ff6a081677a69e9584eb4fd412095259d6276cd2f4fc10304428c652e01294a5ee6a790d2c2f3c771bfcc91384cf78b7ce002a43cfe0d44b1f2648650962ac7b2867d09e9e8543b6578c3c89584afca301eb3ec9655be24db2df7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>小米路由器</category>
      </categories>
      <tags>
        <tag>小米路由器</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS快捷指令自动创建md</title>
    <url>/2022/08/04/2022-08-04-blog/</url>
    <content><![CDATA[<h2 id="yyds-iOS快捷指令"><a href="#yyds-iOS快捷指令" class="headerlink" title="yyds iOS快捷指令"></a>yyds iOS快捷指令</h2><p><img data-src="/assets/16596256627382.png"></p>
<p><br><br><br><br><br><br><br></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><strong><a href="https://www.icloud.com/shortcuts/7cbc92c5f72d489ab957a9c0c1ceb989">快捷指令下载</a></strong></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Github Action 自动构建 Hugo 博客</title>
    <url>/2022/08/05/2022-08-05-xxmd/</url>
    <content><![CDATA[<h2 id="本文主要记录了如何配置-Github-Action-实现-Hugo-博客自动部署。"><a href="#本文主要记录了如何配置-Github-Action-实现-Hugo-博客自动部署。" class="headerlink" title="本文主要记录了如何配置 Github Action 实现 Hugo 博客自动部署。"></a>本文主要记录了如何配置 Github Action 实现 Hugo 博客自动部署。</h2><p><img data-src="https://i.loli.net/2021/03/29/Kwh3819MRgteGn6.jpg"></p>
<p>&lt;!— more —&gt;</p>
<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>Hugo 都是静态博客，即最终生成的是静态页面，而所谓部署就是把这些静态文件放到 web 服务器(比如 Nginx、Caddy) 的对应目录就行了。</p>
<p>因此整个 Github Action 只需要做两件事：</p>
<ul>
<li>编译，生成静态文件</li>
<li>部署，把静态文件移动到合适的位置</li>
<li>比如放到某个云服务器上</li>
<li>或者放到 Github Pages<br>然后我们再通过 git push 来触发 Github Action 就可以了。</li>
</ul>
<h3 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2. 具体实现"></a>2. 具体实现</h3><p>添加 Github Action</p>
<p>需要在仓库根目录下创建 .github/workflow 这个二级目录，然后在 workflow 下以 yml 形式配置 Github Action。</p>
<p>具体可以参考 这个仓库</p>
<p>需要指定 action 触发条件，这里就设置为 push 触发，具体如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push:</span><br><span class="line">  branches:</span><br><span class="line">    - main  # Set a branch to deploy</span><br><span class="line">pull_request:</span><br></pre></td></tr></table></figure>
<p>以上表示在 main分支收到 push 事件时执行该 action。</p>
<p>如果是之前创建的仓库，可能需要改成 master 分支。</p>
<p>另外我们可以直接在 <a href="https://github.com/marketplace?type=actions">marketplace</a> 找别人配置好的 action 来使用，就更加方便了，以下是本教程用到的 action</p>
<ul>
<li><a href="https://github.com/marketplace/actions/checkout">actions/checkout</a></li>
<li><a href="https://github.com/marketplace/actions/hugo-setup">hugo-setup</a></li>
<li><a href="https://github.com/marketplace/actions/github-pages-action">github-pages-action</a></li>
<li><a href="https://github.com/marketplace/actions/rsync-deployments-action">rsync</a><br>我们要做的就是把这些单独的 action 进行组合，以实现自动部署。</li>
</ul>
<p>发布到 Github Pages</p>
<p>静态博客可以直接用 Github Pages，比较简单，缺点就是国内访问会比较慢，甚至于直接打不开。</p>
<p>action 文件如下</p>
<figure class="highlight plaintext"><figcaption><span>GitHub Pages</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main  # Set a branch to deploy</span><br><span class="line">  pull_request:</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  deploy:</span><br><span class="line">    runs-on: ubuntu-20.04</span><br><span class="line">    concurrency:</span><br><span class="line">      group: $&#123;&#123; github.workflow &#125;&#125;-$&#123;&#123; github.ref &#125;&#125;</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v3</span><br><span class="line">        with:</span><br><span class="line">          submodules: true  # Fetch Hugo themes (true OR recursive)</span><br><span class="line">          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod</span><br><span class="line"></span><br><span class="line">      - name: Setup Hugo</span><br><span class="line">        uses: peaceiris/actions-hugo@v2</span><br><span class="line">        with:</span><br><span class="line">          hugo-version: ‘0.100.2’</span><br><span class="line">          # 是否启用 hugo extend</span><br><span class="line">          extended: true</span><br><span class="line"></span><br><span class="line">      - name: Build</span><br><span class="line">        run: hugo —minify</span><br><span class="line"></span><br><span class="line">      - name: Deploy</span><br><span class="line">        uses: peaceiris/actions-gh-pages@v3</span><br><span class="line">        if: $&#123;&#123; github.ref == ‘refs/heads/main’ &#125;&#125;</span><br><span class="line">        with:</span><br><span class="line">          github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br><span class="line">          publish_dir: ./public</span><br></pre></td></tr></table></figure>
<p>整个 Action 一个包含 4 个步骤：</p>
<ol>
<li>拉取代码</li>
<li>准备 hugo 环境</li>
<li>使用 hugo 编译生成静态文件</li>
<li>把生成的静态文件发布到 Github Pages<br>其他都不需要改，唯一需要注意的是 Hugo 的版本以及是否启用 hugo 扩展。</li>
</ol>
<p>建议改成和自己当前使用的版本，否则可能会出现兼容性问题。</p>
<figure class="highlight plaintext"><figcaption><span>name: Setup Hugo</span></figcaption><table><tr><td class="code"><pre><span class="line">uses: peaceiris/actions-hugo@v2</span><br><span class="line">with:</span><br><span class="line">  hugo-version: ‘0.100.2’</span><br><span class="line">  extended: true</span><br></pre></td></tr></table></figure>

<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><p>随便修改点内容，执行提交</p>
<figure class="highlight plaintext"><figcaption><span>hello > tmp.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m “test action”</span><br></pre></td></tr></table></figure>
<p>然后打开 github action 页面查看，可以看到已经在执行了</p>
<p>点开可以查看执行日志</p>
<p>到此，整个配置就完成了，具体细节可以参考 这个仓库</p>
<p>原文作者：意琦行<br>原文链接：<a href="https://www.lixueduan.com/post/blog/01-github-action-deploy-hugo/">https://www.lixueduan.com/post/blog/01-github-action-deploy-hugo/</a></p>
]]></content>
      <categories>
        <category>hugo</category>
      </categories>
      <tags>
        <tag>hugo</tag>
      </tags>
  </entry>
  <entry>
    <title>NanoPi-R2S刷系统</title>
    <url>/2022/08/16/2022-08-16-blog/</url>
    <content><![CDATA[<p><img data-src="https://github.com/cyr580/blog-comment/blob/main/IMG_1681.JPG?raw=true" alt="r2s"></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>win32diskimager</li>
<li>SD卡</li>
</ul>
<hr>
<h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><ul>
<li>准备一张8G或以上容量的TF卡</li>
<li>下载并解压镜像文件 xxx.img.gz 和工具 win32diskimager</li>
<li>在Windows下以管理员身份运行 win32diskimager</li>
<li>在界面上选择你的SD卡盘符</li>
<li>选择解压后的固件文件</li>
<li>点击 Write 按钮烧写到SD卡</li>
<li>或者在 Linux下使用 dd 命令将 xxx.img 写入 SD卡</li>
<li>将SD卡从电脑端弹出，插入NanoPi-R2S的microSD卡槽</li>
<li>连接NanoPi-R2S的电源，系统会从TF卡启动</li>
</ul>
<hr>
<h2 id="固件下载地址和wiki"><a href="#固件下载地址和wiki" class="headerlink" title="固件下载地址和wiki"></a>固件下载地址和wiki</h2><ul>
<li><a href="https://github.com/DHDAXCW/NanoPi-R2S-rk3328/releases/download/2022.08.12-Lean1/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz">https://github.com/DHDAXCW/NanoPi-R2S-rk3328/releases/download/2022.08.12-Lean1/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz</a></li>
<li><a href="https://github.com/DHDAXCW/NanoPi-R2S-rk3328/releases">https://github.com/DHDAXCW/NanoPi-R2S-rk3328/releases</a></li>
<li><a href="https://wiki.friendlyelec.com/wiki/index.php/NanoPi_R2S/zh">https://wiki.friendlyelec.com/wiki/index.php/NanoPi_R2S/zh</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Reader web</title>
    <url>/2022/08/19/2022-08-19-blog/</url>
    <content><![CDATA[<p><img data-src="https://github.com/cyr580/blog-comment/blob/main/IMG_1681.JPG?raw=true" alt="图片"></p>
<h2 id="本地书仓"><a href="#本地书仓" class="headerlink" title="本地书仓"></a>本地书仓</h2><p>在 <code>storage/localStore</code> 中可以集中存放管理本地书籍，开启访问权限的用户可以在 <code>页面-浏览书仓</code> 中选择批量导入到自己的书架进行阅读。</p>
<h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><p>页面还会加载应用目录下的 <code>reader-assets/reader.css</code> 这个CSS样式文件，在这个文件中可以自定义页面样式。</p>
<blockquote>
<p>自定义样式可能需要配合 <code>!important</code> 来设定属性</p>
</blockquote>
<h2 id="接口服务配置"><a href="#接口服务配置" class="headerlink" title="接口服务配置"></a>接口服务配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reader    :</span><br><span class="line">  app    :</span><br><span class="line">    storagePath    :     storage       #     数据存储目录    </span><br><span class="line">    showUI    :     false              #     是否显示UI    </span><br><span class="line">    debug    :     false               #     是否调试模式    </span><br><span class="line">    packaged    :     false            #     是否打包为客户端    </span><br><span class="line">    secure    :     false              #     是否需要登录鉴权，开启后将支持多用户模式    </span><br><span class="line">    inviteCode    :     ”    “                 #     注册邀请码，为空时则开放注册，否则注册时需要输入邀请码    </span><br><span class="line">    secureKey    :     ”    “                  #     管理密码，开启鉴权时，前端管理用户空间的管理密码    </span><br><span class="line">    proxy    :     false               #     是否使用代理    </span><br><span class="line">    proxyType    :     ”    HTTP    “              #     代理类型    </span><br><span class="line">    proxyHost    :     ”    “                  #     代理 Host    </span><br><span class="line">    proxyPort    :     ”    “                  #     代理 port    </span><br><span class="line">    proxyUsername    :     ”    “              #     代理鉴权 用户名    </span><br><span class="line">    proxyPassword    :     ”    “              #     代理鉴权 密码    </span><br><span class="line">    cacheChapterContent    :     false     #     是否缓存章节内容    </span><br><span class="line">    userLimit    :     50                  #     用户上限，最大 50    </span><br><span class="line">    userBookLimit    :     200             #     用户书籍上限，默认最大 200    </span><br><span class="line"></span><br><span class="line">  server    :</span><br><span class="line">    port    :     8080                     #     监听端口    </span><br><span class="line">    webUrl    :     http://localhost:$&#123;reader.server.port&#125;        #     web链接    </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="WebDAV同步配置"><a href="#WebDAV同步配置" class="headerlink" title="WebDAV同步配置"></a>WebDAV同步配置</h2><ol>
<li>首先需要在阅读App里面配置 <code>WebDAV备份</code>服务器地址： <code>http://IP:端口/reader3/webdav/</code>如果开启了 <code>reader.app.secure</code> 选项，那么使用网页注册的用户名和密码登录，否则使用用户名 <code>default</code> 和 密码 <code>123456</code> 登录</li>
<li>然后在阅读App里面点击备份</li>
<li>在网页里面查看WebDAV文件，确认是否备份成功</li>
<li>备份成功之后<ul>
<li>服务器会自动同步书籍阅读进度(暂不支持章节内阅读位置，也不会自动同步书架信息变更)</li>
<li>可以直接选择阅读App的备份文件进行恢复，这样会直接覆盖书源和书架信息</li>
<li>可以备份当前书源和书架信息到WebDAV，但是必须要先备份成功</li>
<li>需要通过恢复备份文件来同步书籍和书源信息</li>
</ul>
</li>
<li>PS: 本地书源的书籍同步后无法打开，除非换源</li>
</ol>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="Windows-MacOS-Linux"><a href="#Windows-MacOS-Linux" class="headerlink" title="Windows / MacOS / Linux"></a>Windows / MacOS / Linux</h3><p>从 <a href="https://github.com/hectorqin/reader/releases">releases</a> 下载对应平台安装包安装即可，需要安装java10以上环境</p>
<p>MacOS 版 <code>storage</code> 默认是 <code>用户目录/.reader/storage</code>，其它版本 <code>storage</code> 默认是 <code>程序目录/storage</code></p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><code>storage/windowConfig.json</code></p>
<p>包含图形界面和接口服务的相关配置，JSON格式，修改后，程序重启才会生效</p>
<blockquote>
<p>请仔细检查配置内容，不支持注释，此处注释只是为了方便理解</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">”showUI“    :     true    ,                    // 是否显示UI界面，默认为显示    </span><br><span class="line">”debug“    :     false    ,                    // 是否调试模式，默认为否    </span><br><span class="line">”positionX“    :     0.0    ,                  // 窗口位置 横坐标    </span><br><span class="line">”positionY“    :     0.0    ,                  // 窗口位置 纵坐标    </span><br><span class="line">”width“    :     1280.0    ,                   // 窗口大小 宽度    </span><br><span class="line">”height“    :     800.0    ,                   // 窗口大小 高度    </span><br><span class="line">”rememberSize“    :     true    ,              // 改变窗口大小时，是否记住窗口大小，默认记住    </span><br><span class="line">”rememberPosition“    :     false    ,         // 移动窗口时，是否记住窗口位置，默认不记住    </span><br><span class="line">”setWindowPosition“    :     false    ,        // 启动时是否设置窗口位置，默认不设置，窗口默认居中    </span><br><span class="line">”setWindowSize“    :     true    ,             // 启动时是否设置窗口大小，默认按照配置文件进行设置    </span><br><span class="line">”serverConfig“    : &#123;                    // 接口服务配置，此处配置会被 `serverPort|showUI|debug` 等覆盖    </span><br><span class="line">    ”reader.app.secure“    :     false    ,      // 是否需要登录鉴权，开启后将支持多用户模式    </span><br><span class="line">    ”reader.app.inviteCode“    :     ”    “    ,      // 注册邀请码，为空时则开放注册，否则注册时需要输入邀请码。仅多用户模式下有效    </span><br><span class="line">    ”reader.app.secureKey“    :     ”    “    ,      // 管理密码，开启鉴权时，前端管理用户空间的管理密码。仅多用户模式下有效    </span><br></pre></td></tr></table></figure>
<h3 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h3><p>使用docker版本或者服务器版本，访问web页面</p>
<p>可以添加为桌面应用</p>
<h3 id="服务器版"><a href="#服务器版" class="headerlink" title="服务器版"></a>服务器版</h3><p>从 <a href="https://github.com/hectorqin/reader/releases">releases</a> 下载 <code>reader-$version.jar</code> 运行即可，需要安装java10以上环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    #     创建目录    </span><br><span class="line">mkdir reader3</span><br><span class="line">    cd     reader3</span><br><span class="line"></span><br><span class="line">    #     下载 jar    </span><br><span class="line">wget     ”    xxxx    “    </span><br><span class="line"></span><br><span class="line">    #     安装jdk10以上环境...    </span><br><span class="line"></span><br><span class="line">    #     运行    </span><br><span class="line"></span><br><span class="line">    #     自用版    </span><br><span class="line">java -jar reader-    $version    .jar</span><br><span class="line"></span><br><span class="line">    #     多用户版    </span><br><span class="line">java -jar reader-    $version    .jar --reader.app.secure=true --reader.app.secureKey=管理密码 --reader.app.inviteCode=注册邀请码</span><br><span class="line"></span><br><span class="line">    #     web端 http://localhost:8080/    </span><br><span class="line">    #     接口地址 http://localhost:8080/reader3/</span><br></pre></td></tr></table></figure>

<h3 id="Docker版"><a href="#Docker版" class="headerlink" title="Docker版"></a>Docker版</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    #     自行编译    </span><br><span class="line">    #     docker build -t reader:latest .    </span><br><span class="line"></span><br><span class="line">    #     使用环境变量覆盖服务配置，环境变量采用大写字母，不允许使用.-符号，采用下划线“_”取代点“.”  减号“-”直接删除    </span><br><span class="line"></span><br><span class="line">    #     docker run -d --restart=always --name=reader -e ”SPRING_PROFILES_ACTIVE=prod“ -v $(pwd)/logs:/logs -v $(pwd)/storage:/storage -p 8080:8080 reader:latest    </span><br><span class="line"></span><br><span class="line">    #     跨平台镜像    </span><br><span class="line"></span><br><span class="line">    #     新建构建器    </span><br><span class="line">    #     docker buildx create --use --name mybuilder    </span><br><span class="line">    #     启动构建器    </span><br><span class="line">    #     docker buildx inspect mybuilder --bootstrap    </span><br><span class="line">    #     查看构建器及其所支持的cpu架构    </span><br><span class="line">    #     docker buildx ls    </span><br><span class="line">    #     构建跨平台镜像    </span><br><span class="line">    #     docker buildx build -t reader:latest --platform=linux/arm,linux/arm64,linux/amd64 . --push    </span><br><span class="line"></span><br><span class="line">    #     使用预编译的镜像    </span><br><span class="line"></span><br><span class="line">    #     自用版(建议修改映射端口)    </span><br><span class="line">docker run -d --restart=always --name=reader -e     ”    SPRING_PROFILES_ACTIVE=prod    “     -v     $(    pwd    )    /logs:/logs -v     $(    pwd    )    /storage:/storage -p 8080:8080 hectorqin/reader</span><br><span class="line"></span><br><span class="line">    #     多用户版(建议修改映射端口)    </span><br><span class="line">docker run -d --restart=always --name=reader -v     $(    pwd    )    /logs:/logs -v     $(    pwd    )    /storage:/storage -p 8080:8080 hectorqin/reader java -jar /app/bin/reader.jar --spring.profiles.active=prod --reader.app.secure=true --reader.app.secureKey=管理密码 --reader.app.inviteCode=注册邀请码</span><br><span class="line"></span><br><span class="line">    #     多用户版 使用环境变量(建议修改映射端口)    </span><br><span class="line">docker run -d --restart=always --name=reader -e     ”    SPRING_PROFILES_ACTIVE=prod    “     -e     ”    READER_APP_SECURE=true    “     -e     ”    READER_APP_SECUREKEY=管理密码    “     -e     ”    READER_APP_INVITECODE=注册邀请码    “     -v     $(    pwd    )    /logs:/logs -v     $(    pwd    )    /storage:/storage -p 8080:8080 hectorqin/reader</span><br><span class="line"></span><br><span class="line">    #     更新docker镜像    </span><br><span class="line">    #     docker pull hectorqin/reader    </span><br><span class="line"></span><br><span class="line">    #    :后面的端口修改为映射端口    </span><br><span class="line">    #     web端 http://localhost:8080/    </span><br><span class="line">    #     接口地址 http://localhost:8080/reader3/    </span><br><span class="line"></span><br><span class="line">    #     通过watchtower手动更新    </span><br><span class="line">docker run --rm -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --run-once reader</span><br></pre></td></tr></table></figure>

<h3 id="Docker-Compose版-推荐"><a href="#Docker-Compose版-推荐" class="headerlink" title="Docker-Compose版(推荐)"></a>Docker-Compose版(推荐)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    #    安装docker-compose    </span><br><span class="line">    #    Debian/Ubuntu    </span><br><span class="line">apt install docker-compose -y</span><br><span class="line">    #    CentOS    </span><br><span class="line">curl -L     ”    https://github.com/docker/compose/releases/download/1.29.2/docker-compose-    $(    uname -s    )    -    $(    uname -m    )    “     -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br><span class="line"></span><br><span class="line">    #     下载项目里的 docker-compose.yaml    </span><br><span class="line">wget https://raw.githubusercontent.com/hectorqin/reader/master/docker-compose.yaml</span><br><span class="line">    #     根据 docker-compose.yaml 里面的注释编辑所需配置    </span><br><span class="line">    #     启动 docker-compose    </span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line">    #     停止 docker-compose    </span><br><span class="line">docker-compose stop</span><br><span class="line"></span><br><span class="line">    #     查看实时日志    </span><br><span class="line">docker logs -f reader</span><br><span class="line"></span><br><span class="line">    #     手动更新    </span><br><span class="line">docker-compose pull     &amp;&amp;     docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    # 此文件放入 conf.d目录下,一般可用 touch /etc/nginx/conf.d/reader.conf 创建    </span><br><span class="line">    server     &#123;</span><br><span class="line">        listen         80    ;</span><br><span class="line">        server_name     域名;</span><br><span class="line">        #开启ssl解除注释    </span><br><span class="line">        #不使用宝塔获取证书脚本  https://github.com/Misaka-blog/acme-1key    </span><br><span class="line">        #listen 443 ssl;    </span><br><span class="line">        #ssl_certificate 证书.cer;    </span><br><span class="line">        #ssl_certificate_key 证书.key;    </span><br><span class="line">        #ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;    </span><br><span class="line">        #ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;    </span><br><span class="line">        #ssl_prefer_server_ciphers on;    </span><br><span class="line">        #ssl_session_cache shared:SSL:10m;    </span><br><span class="line">        #ssl_session_timeout 10m;    </span><br><span class="line">        #if ($server_port !~ 443)&#123;    </span><br><span class="line">        #    rewrite ^(/.*)$ https://$host$1 permanent;    </span><br><span class="line">        #&#125;    </span><br><span class="line">        #error_page 497  https://$host$request_uri;    </span><br><span class="line"></span><br><span class="line">        gzip     on    ;     #开启gzip压缩    </span><br><span class="line">        gzip_min_length         1k    ;     #设置对数据启用压缩的最少字节数    </span><br><span class="line">        gzip_buffers         4         16k    ;</span><br><span class="line">        gzip_http_version         1.0    ;</span><br><span class="line">        gzip_comp_level         6    ;     #设置数据的压缩等级,等级为1-9，压缩比从小到大    </span><br><span class="line">        gzip_types     text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;     #设置需要压缩的数据格式    </span><br><span class="line">        gzip_vary     on    ;</span><br><span class="line"></span><br><span class="line">        client_max_body_size           50m    ;     #允许上传50MB文件,上传本地书籍需要修改此项大小.如nginx主配置文件已添加,删除此行并修改主配置即可    </span><br><span class="line"></span><br><span class="line">        location         /     &#123;</span><br><span class="line">            proxy_pass      http://127.0.0.1:4396;     #端口自行修改为映射端口    </span><br><span class="line">            proxy_http_version         1.1    ;</span><br><span class="line">            proxy_cache_bypass         $http_upgrade    ;</span><br><span class="line">            proxy_set_header     Upgrade               $http_upgrade    ;</span><br><span class="line">            proxy_set_header     Connection            ”upgrade“    ;</span><br><span class="line">            proxy_set_header     Host                  $host    ;</span><br><span class="line">            proxy_set_header     X-Real-IP             $remote_addr    ;</span><br><span class="line">            proxy_set_header     X-Forwarded-For       $proxy_add_x_forwarded_for    ;</span><br><span class="line">            proxy_set_header     X-Forwarded-Proto     $scheme    ;</span><br><span class="line">            proxy_set_header     X-Forwarded-Host      $host    ;</span><br><span class="line">            proxy_set_header     X-Forwarded-Port      $server_port    ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>美区礼品卡最简单购买方式-支付宝，人人都会，剔出中间商差价</title>
    <url>/2022/12/12/2022-12-12-blog/</url>
    <content><![CDATA[<p><img data-src="/assets/9photo.jpeg" alt="图片"></p>
<p>&lt;!— more —&gt;</p>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ol>
<li>打开支付宝的首页找到这个位置点击进</li>
<li>选择美国国家</li>
<li>选择城市，记得免税城市（可以百度）</li>
<li>点击出境</li>
<li>折扣礼卡</li>
<li>下滑到最后找到更多大牌折扣礼卡</li>
<li>找到Apple商店的礼品卡点击进去</li>
<li>填写名字邮箱，名字无所谓了，邮箱要正确</li>
<li>填写你要的金额，立即购买</li>
<li>付款，结束，礼品卡兑换</li>
</ol>
]]></content>
      <categories>
        <category>blog  iOS</category>
      </categories>
      <tags>
        <tag>blog iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>mp3转pcm</title>
    <url>/2022/12/12/2022-12-12-blog2/</url>
    <content><![CDATA[<p><img data-src="/assets/02.jpeg" alt="图片"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ffmpeg -i E:\ss\10m-bwl.mp3 -acodec pcm_s16le -f s16le -ac 1 -ar 16000 E:\ss\10m-bwl.pcm</span><br><span class="line">ffmpeg -i E:\ss\20m-bwl.mp3 -acodec pcm_s16le -f s16le -ac 1 -ar 16000 E:\ss\20m-bwl.pcm</span><br><span class="line">ffmpeg -i E:\ss\21m-ll.mp3 -acodec pcm_s16le -f s16le -ac 1 -ar 16000 E:\ss\21m-ll.pcm</span><br><span class="line">ffmpeg -i E:\ss\25m-wl.mp3 -acodec pcm_s16le -f s16le -ac 1 -ar 16000 E:\ss\25m-wl.pcm</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>A-shell直接下载mp4自动转pcm</title>
    <url>/2023/12/17/2023-12-27-blog/</url>
    <content><![CDATA[<h1 id="a-shell：一款支持多窗口的iOS终端，彻底改变了用户与设备互动的方式。"><a href="#a-shell：一款支持多窗口的iOS终端，彻底改变了用户与设备互动的方式。" class="headerlink" title="a-shell：一款支持多窗口的iOS终端，彻底改变了用户与设备互动的方式。"></a>a-shell：一款支持多窗口的iOS终端，彻底改变了用户与设备互动的方式。</h1><h2 id="软件详情"><a href="#软件详情" class="headerlink" title="软件详情"></a>软件详情</h2><p>其直观的设计和强大的功能使其成为实现无缝多任务处理和高效命令执行的首选工具。无论你是开发人员、系统管理员还是休闲用户，a-shell都提供了一个适应你需求的强大环境。通过不断的更新和庞大的社区支持，a-shell成为移动生产力不断发展的典范。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>安装a-shell（yt-dlp ffmpeg）</li>
<li>安装Textastic</li>
</ol>
<h2 id="使用ChatGPT创建脚本"><a href="#使用ChatGPT创建脚本" class="headerlink" title="使用ChatGPT创建脚本"></a>使用ChatGPT创建脚本</h2><p>输入提示：作为Python专家，利用yt-dlp和ffmpeg帮我创建一个脚本，能够自动下载视频并使用shell命令将其转换为PCM格式。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建保存视频的目录（如果不存在）</span></span><br><span class="line"><span class="built_in">mkdir</span> -p mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取要下载的视频链接</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入要下载的视频链接 (如果不想下载，直接回车跳过): &quot;</span> video_link</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果提供了下载链接，则使用yt-dlp下载视频到mp4目录中</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$video_link</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    yt-dlp --format <span class="string">&#x27;bestvideo+bestaudio/best&#x27;</span> --merge-output-format mp4 -o <span class="string">&quot;mp4/%(title)s.%(ext)s&quot;</span> <span class="string">&quot;<span class="variable">$video_link</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;下载完成！&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建保存音频的目录（如果不存在）</span></span><br><span class="line"><span class="built_in">mkdir</span> -p pcm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历mp4文件夹中的所有mp4文件</span></span><br><span class="line"><span class="keyword">for</span> mp4_file <span class="keyword">in</span> mp4/*.mp4; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 使用参数展开获取文件名和扩展名</span></span><br><span class="line">    filename=<span class="string">&quot;<span class="variable">$&#123;mp4_file##*/&#125;</span>&quot;</span></span><br><span class="line">    filename_no_ext=<span class="string">&quot;<span class="variable">$&#123;filename%.*&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用ffmpeg将mp4文件转换为pcm</span></span><br><span class="line">    ffmpeg -i <span class="string">&quot;<span class="variable">$mp4_file</span>&quot;</span> -vn -acodec pcm_s8 -ar 22050 -ac 2 -f s8 <span class="string">&quot;pcm/<span class="variable">$&#123;filename_no_ext&#125;</span>.pcm&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;转换完成！&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="打开a-shell"><a href="#打开a-shell" class="headerlink" title="打开a-shell"></a>打开a-shell</h2><p>输入命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh ./mp4topcm.sh</span><br></pre></td></tr></table></figure>

<h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><p>下载的mp4文件在sh同目录下的mp4文件夹，转换好的pcm在同目录下的pcm文件夹。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>A-shell直接下载mp4</title>
    <url>/2023/12/30/2023-12-30-blog/</url>
    <content><![CDATA[<h1 id="使用-iOS-a-shell-App-下载和转换视频教程"><a href="#使用-iOS-a-shell-App-下载和转换视频教程" class="headerlink" title="使用 iOS a-shell App 下载和转换视频教程"></a>使用 iOS a-shell App 下载和转换视频教程</h1><p>在本教程中，我们将介绍如何使用 iOS a-shell App 来下载和转换视频。a-shell 是一个内置了 Python 的终端模拟器，可以让我们在 iOS 设备上运行 Python 脚本。</p>
<h2 id="步骤-1：安装-a-shell-应用"><a href="#步骤-1：安装-a-shell-应用" class="headerlink" title="步骤 1：安装 a-shell 应用"></a>步骤 1：安装 a-shell 应用</h2><p>首先，在您的 iOS 设备上打开 App Store，并搜索 “a-shell” 应用。下载并安装该应用。</p>
<h2 id="步骤-2：编写-Python-脚本"><a href="#步骤-2：编写-Python-脚本" class="headerlink" title="步骤 2：编写 Python 脚本"></a>步骤 2：编写 Python 脚本</h2><p>将以下代码复制到一个名为 <code>yt.py</code> 的 Python 文件中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> yt_dlp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_video</span>(<span class="params">url, output_folder</span>):</span><br><span class="line">    ydl_opts = &#123;</span><br><span class="line">        <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;outtmpl&#x27;</span>: os.path.join(output_folder, <span class="string">&#x27;%(title)s.%(ext)s&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> yt_dlp.YoutubeDL(ydl_opts) <span class="keyword">as</span> ydl:</span><br><span class="line">        ydl.download([url])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_to_mp4</span>(<span class="params">input_file, output_folder</span>):</span><br><span class="line">    output_file = os.path.join(output_folder, os.path.splitext(os.path.basename(input_file))[<span class="number">0</span>] + <span class="string">&#x27;.mp4&#x27;</span>)</span><br><span class="line">    subprocess.run([<span class="string">&#x27;ffmpeg&#x27;</span>, <span class="string">&#x27;-i&#x27;</span>, input_file, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, output_file])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    video_urls = <span class="built_in">input</span>(<span class="string">&quot;请输入视频链接（多个链接用逗号分隔）: &quot;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    output_folder = <span class="string">&#x27;mp4&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_folder):</span><br><span class="line">        os.makedirs(output_folder)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> video_urls:</span><br><span class="line">        url = url.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;正在下载视频：<span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line">            download_video(url, output_folder)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;下载视频时发生错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换非 mp4 格式文件为 mp4</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(output_folder):</span><br><span class="line">        <span class="keyword">if</span> filename.lower().endswith((<span class="string">&#x27;.mkv&#x27;</span>, <span class="string">&#x27;.flv&#x27;</span>, <span class="string">&#x27;.webm&#x27;</span>, <span class="string">&#x27;.avi&#x27;</span>, <span class="string">&#x27;.mov&#x27;</span>, <span class="string">&#x27;.wmv&#x27;</span>, <span class="string">&#x27;.3gp&#x27;</span>)):</span><br><span class="line">            input_file = os.path.join(output_folder, filename)</span><br><span class="line">            convert_to_mp4(input_file, output_folder)</span><br><span class="line">            os.remove(input_file)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;所有视频下载和转换完成，输出目录：&quot;</span>, os.path.abspath(output_folder))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="步骤-3：使用-a-shell-运行-Python-脚本"><a href="#步骤-3：使用-a-shell-运行-Python-脚本" class="headerlink" title="步骤 3：使用 a-shell 运行 Python 脚本"></a>步骤 3：使用 a-shell 运行 Python 脚本</h2><ol>
<li><p>打开 a-shell 应用，并点击右上角的 “+” 按钮，创建一个新的脚本。</p>
</li>
<li><p>将 <code>yt.py</code> 文件上传到 a-shell 应用中，可以使用 iTunes 文件共享或其他途径将文件拖放到 a-shell App 中。</p>
</li>
<li><p>在 a-shell 终端中输入以下命令来运行脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python yt.py</span><br></pre></td></tr></table></figure></li>
<li><p>您将被提示输入视频链接，多个链接请用逗号分隔。输入完毕后，脚本将开始下载和转换视频。</p>
</li>
<li><p>所有下载和转换完成后，输出的视频将保存在当前目录下的 “mp4” 文件夹中。</p>
</li>
</ol>
<p>恭喜！您已成功地在 iOS 设备上使用 a-shell App 下载和转换视频。</p>
<p>请注意：</p>
<ul>
<li>请确保您的设备已安装并配置了 yt-dlp 和 ffmpeg。</li>
<li>本教程假定您已具备基本的 Python 编程知识。</li>
<li>请遵守法律法规和视频平台的使用规定，在下载和使用视频时要遵守相关规定。</li>
</ul>
<p>希望本教程能帮助到您！如有任何问题，请随时提出。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>GPG + Password Store 密码管理器使用指南</title>
    <url>/2024/01/14/2024-01-14-blog/</url>
    <content><![CDATA[<h1 id="GPG-Password-Store-密码管理器使用指南"><a href="#GPG-Password-Store-密码管理器使用指南" class="headerlink" title="GPG + Password Store 密码管理器使用指南"></a>GPG + Password Store 密码管理器使用指南</h1><p>在本文中，我们将介绍如何安装和配置 GPG 密钥，以及如何使用 Password Store 密码管理器来管理您的密码。我们还会涵盖如何在 iOS、macOS 和 Windows 系统上使用密码</p>
<h1 id="为什么开源软件闭源会引起问题？"><a href="#为什么开源软件闭源会引起问题？" class="headerlink" title="为什么开源软件闭源会引起问题？"></a>为什么开源软件闭源会引起问题？</h1><p>最近在Hacker News上看到jsiepkes爆料GitHub要求下架EdgeFS开源项目分支的消息，理由是上游项目闭源了。这不是第一次发生这样的事情，国内也曾发生类似事件，但这篇文章不详细叙述历史问题，感兴趣的可以自行搜索。</p>
<h2 id="开源社区风气问题"><a href="#开源社区风气问题" class="headerlink" title="开源社区风气问题"></a>开源社区风气问题</h2><p>文章指出国内大多数软件从业人员对开源社区的风气了解不够。虽然许多顶级开发者推崇开源，但很少提到或介绍自由软件。作者认为国内开源社区过于浮躁，利益至上，违背了开源运动初衷，更符合实用主义的利益至上价值观。</p>
<h2 id="开源许可协议和闭源问题"><a href="#开源许可协议和闭源问题" class="headerlink" title="开源许可协议和闭源问题"></a>开源许可协议和闭源问题</h2><p>为什么开源软件闭源后会有问题呢？文章解释了主要的开源许可协议，如GPL/LGPL、BSD、Apache、Mozilla、MIT。许可协议要求在使用、修改、分发代码时遵循一定条件，而某些协议如BSD对商业集成较为友好。</p>
<h2 id="自由软件和GPLV3"><a href="#自由软件和GPLV3" class="headerlink" title="自由软件和GPLV3"></a>自由软件和GPLV3</h2><p>文章简要介绍了自由软件，强调GPL作为对抗版权的理想主义选择。对于GPLV3有一些人批评其激进性，但作者支持其合作共赢的方式。国内的商业公司也积极参与自由软件和开源软件，改善了过去的不良影响。</p>
<h2 id="自由软件不等于免费"><a href="#自由软件不等于免费" class="headerlink" title="自由软件不等于免费"></a>自由软件不等于免费</h2><p>作者澄清自由软件并非免费软件，强调在日常生活中自由软件的广泛应用，例如Android系统和访问的互联网网页。文章认为自由软件的出现加速了整个软件和互联网行业的进程。</p>
<h2 id="自由软件与开源软件的选择"><a href="#自由软件与开源软件的选择" class="headerlink" title="自由软件与开源软件的选择"></a>自由软件与开源软件的选择</h2><p>文章强调选择使用自由软件或开源软件的重要性，认为这些软件具有国际化、成熟、稳定的特点，对小型公司及团队创业有利。在选择软件时，作者建议关注项目作者的道德问题。</p>
<h2 id="结语和声明"><a href="#结语和声明" class="headerlink" title="结语和声明"></a>结语和声明</h2><p>作者承认文章无法在短时间内全面讲述自由软件和开源软件的知识，鼓励读者自行阅读相关资料。文章以感谢国内自由软件支持者和前辈为结尾，感谢导师的耐心指导。最后，作者声明文章使用emacs-orgmode编写，感谢自由软件与开源软件世界的贡献。</p>
<p><a href="https://news.ycombinator.com/item?id=23113226">原文链接</a> | <a href="https://www.gnu.org/philosophy/free-sw.zh-cn.html">GNU自由软件哲学</a> | <a href="https://book.douban.com/subject/25881855/">Eric S. Raymond的《大教堂与集市》</a></p>
<h1 id="使用自由软件和开源软件打造网络账号密码管理系统"><a href="#使用自由软件和开源软件打造网络账号密码管理系统" class="headerlink" title="使用自由软件和开源软件打造网络账号密码管理系统"></a>使用自由软件和开源软件打造网络账号密码管理系统</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于涉及到相关自由软件和开源软件工具，前几章节将介绍这些工具的使用。本文面向会电脑操作、对账号密码、隐私有要求的人。如果您熟悉相应工具，建议直接跳过，只阅读不了解的部分。</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol>
<li>密码存储安全加密唯一性（只能由加密的人才可解密）。</li>
<li>密码随机生成，任意长度、指定包含数字、特殊字符、字符大小写等。</li>
<li>密码易用性、可维护性、可通用性（跨平台设备）。</li>
</ol>
<p>根据以上需求，采用非对称加密是最合适的选择。</p>
<h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>非对称加密是密码学的一种算法，需要两个密钥：一个是公开密钥，另一个是私有密钥。公钥用于加密，私钥用于解密。使用公钥加密的数据只能用相应的私钥解密。GPG是非对称加密运用较广泛的实现。</p>
<h2 id="GPG（GNU-Privacy-Guard）"><a href="#GPG（GNU-Privacy-Guard）" class="headerlink" title="GPG（GNU Privacy Guard）"></a>GPG（GNU Privacy Guard）</h2><p>GPG是非对称加密的实现，几乎在Linux系统上随处可见。在其他系统上也很容易使用。</p>
<h3 id="安装和生成密钥"><a href="#安装和生成密钥" class="headerlink" title="安装和生成密钥"></a>安装和生成密钥</h3><ol>
<li><p>安装GPG，运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --help</span><br></pre></td></tr></table></figure>

<p>确认显示GPG的帮助信息，表示安装成功。</p>
</li>
<li><p>生成密钥，运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --full-generate-key</span><br></pre></td></tr></table></figure>

<p>根据提示选择加密算法、密钥长度、有效期等，最后提供个人信息和设置私钥密码。</p>
</li>
</ol>
<h3 id="密钥管理"><a href="#密钥管理" class="headerlink" title="密钥管理"></a>密钥管理</h3><ul>
<li><p>列出已有密钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --list-keys</span><br></pre></td></tr></table></figure></li>
<li><p>删除密钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --delete-key [用户ID]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="导入和导出密钥"><a href="#导入和导出密钥" class="headerlink" title="导入和导出密钥"></a>导入和导出密钥</h3><ul>
<li><p>导出公钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --armor --output public-key.txt --export [用户ID]</span><br></pre></td></tr></table></figure></li>
<li><p>导出私钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --armor --output private-key.txt --export-secret-keys</span><br></pre></td></tr></table></figure></li>
<li><p>导入密钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --import [公私密钥文件]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="加密和解密"><a href="#加密和解密" class="headerlink" title="加密和解密"></a>加密和解密</h3><ul>
<li><p>加密文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --recipient [用户ID] --output demo.sig --encrypt demo.txt</span><br></pre></td></tr></table></figure></li>
<li><p>解密文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --decrypt demo.sig --output demo.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><ul>
<li><p>签名文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg -u [用户id] --sign demo.txt</span><br></pre></td></tr></table></figure></li>
<li><p>验证签名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --verify demo.txt.asc demo.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这些工具可以帮助您建立一个安全、加密、唯一的网络账号密码管理系统。希望本文对您有帮助，如果觉得不错，请帮忙转发关注，感谢支持！未完待续！</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 如何使用自由软件和开源软件打造自己的网络账号密码管理</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 说明</span></span><br><span class="line">由于使用到了相关自由软件和开源软件工具，所以前几章节都是工具使用介绍。文章面向的受众是会电脑操作，对账号密码、隐私有要求的人；相对专业人士来讲，可能比较啰嗦。所以，如果你熟悉对应的工具，建议直接跳过去，看不了解的部分。</span><br><span class="line"></span><br><span class="line"><span class="section">## 需求</span></span><br><span class="line"><span class="bullet">1.</span> 密码存储安全加密唯一性（只能由加密的人才可解密）。</span><br><span class="line"><span class="bullet">2.</span> 密码随机生成，任意长度、指定包含数字、特殊字符、字符大小写等。</span><br><span class="line"><span class="bullet">3.</span> 密码管理易用性、可维护性、可通用性（跨平台设备）。</span><br><span class="line"></span><br><span class="line">根据以上需求，密码存储加密唯一性，采用非对称加密最合适。</span><br><span class="line"></span><br><span class="line"><span class="section">### 非对称加密</span></span><br><span class="line">非对称加密是密码学的一种算法，它需要两个密钥，一个是公开密钥，另一个是私有密钥；公钥用作加密，私钥则用作解密。使用公钥把明文加密后所得的密文，只能用相对应的私钥才能解密并得到原本的明文。由于加密和解密需要两个不同的密钥，故被称为非对称加密；不同于加密和解密都使用同一个密钥的对称加密。公钥可以公开，可任意向外发布；私钥不可以公开，必须由用户自行严格秘密保管，绝不透过任何途径向任何人提供。</span><br><span class="line"></span><br><span class="line"><span class="section">### GPG</span></span><br><span class="line">GPG是非对称加密运用比较广泛的实现，几乎在Linux系统上能随处可见。在其他系统上使用也非常简单容易。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 安装GPG，可以到官方网站根据所使用的操作系统下载对应的可执行程序。</span><br><span class="line"><span class="bullet">2.</span> 安装完成后，使用<span class="code">`gpg --help`</span>命令检查是否安装成功。</span><br><span class="line"><span class="bullet">3.</span> 生成密钥：<span class="code">`gpg --full-generate-key`</span>，根据提示选择密钥种类、长度、有效期等。</span><br><span class="line"><span class="bullet">4.</span> 列出系统中已有的密钥：<span class="code">`gpg --list-keys`</span>。</span><br><span class="line"><span class="bullet">5.</span> 导出公钥：<span class="code">`gpg --armor --output public-key.txt --export [用户ID]`</span>。</span><br><span class="line"><span class="bullet">6.</span> 导出私钥：<span class="code">`gpg --armor --output private-key.txt --export-secret-keys`</span>。</span><br><span class="line"><span class="bullet">7.</span> 导入密钥：<span class="code">`gpg --import [公私密钥文件]`</span>。</span><br><span class="line"></span><br><span class="line"><span class="section">### 密码随机性</span></span><br><span class="line">在密码学中，对一个序列的随机性是指：“看起来是随机的，即能通过我们所能找到的所有正确的随机性检验。” 这个序列是不可预测的，即使给出产生序列的算法或者硬件设计和以前产生序列的所有知识，也不可能通过计算来预测下一个比特是什么或者计算代价很大几乎不可实现。</span><br><span class="line"></span><br><span class="line">随机数生成器有真随机和伪随机之分。这里通过洗牌算法来打乱字符和特殊符号，再通过定长密码位数来随机获取打乱的字符和符号组成新的字符串。</span><br><span class="line"></span><br><span class="line"><span class="code">```python</span></span><br><span class="line"><span class="code">import random</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">def shuffle_char() -&gt; list:</span></span><br><span class="line"><span class="code">    &quot;&quot;&quot;生成乱序的字符串&quot;&quot;&quot;</span></span><br><span class="line"><span class="code">    lst = [...]  # 省略字符列表</span></span><br><span class="line"><span class="code">    random.shuffle(lst)</span></span><br><span class="line"><span class="code">    return lst</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">def shuffle_symbol() -&gt; list:</span></span><br><span class="line"><span class="code">    &quot;&quot;&quot;生成乱序的符号&quot;&quot;&quot;</span></span><br><span class="line"><span class="code">    lst = [...]  # 省略符号列表</span></span><br><span class="line"><span class="code">    random.shuffle(lst)</span></span><br><span class="line"><span class="code">    return lst</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">def mod(size: int) -&gt; int:</span></span><br><span class="line"><span class="code">    r = size % 6</span></span><br><span class="line"><span class="code">    if size % 6 &gt; 6:</span></span><br><span class="line"><span class="code">        return mod(r)</span></span><br><span class="line"><span class="code">    else:</span></span><br><span class="line"><span class="code">        return r</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">def generate_password(size: int = 6, include_symbol: bool = True) -&gt; str:</span></span><br><span class="line"><span class="code">    data = shuffle_char()</span></span><br><span class="line"><span class="code">    symbols = shuffle_symbol()</span></span><br><span class="line"><span class="code">    result = []</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    symbol_size = 0</span></span><br><span class="line"><span class="code">    if size &lt; 6:</span></span><br><span class="line"><span class="code">        return &quot;&quot;</span></span><br><span class="line"><span class="code">    if include_symbol:</span></span><br><span class="line"><span class="code">        symbol_size = mod(len(symbols) + len(data))</span></span><br><span class="line"><span class="code">        if symbol_size == 0:</span></span><br><span class="line"><span class="code">            symbol_size = 3</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    for index in range(0, size - symbol_size):</span></span><br><span class="line"><span class="code">        i = random.randint(0, len(data) - 1)</span></span><br><span class="line"><span class="code">        result.append(data[i])</span></span><br><span class="line"><span class="code">        if symbol_size &gt; 0:</span></span><br><span class="line"><span class="code">            i = random.randint(0, len(symbols) - 1)</span></span><br><span class="line"><span class="code">            result.append(symbols[i])</span></span><br><span class="line"><span class="code">            symbol_size -= 1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    random.shuffle(result)</span></span><br><span class="line"><span class="code">    return &quot;&quot;.join(result)</span></span><br></pre></td></tr></table></figure>

<h3 id="使用password-store"><a href="#使用password-store" class="headerlink" title="使用password-store"></a>使用password-store</h3><p>password-store是一个PC端使用的自由软件，支持跨平台设备，加密采用GPG加密。以下是安装和基本使用步骤：</p>
<ol>
<li><p>安装：</p>
<ul>
<li>Mac上使用brew：<code>brew install pass</code></li>
<li>Linux发行版使用包管理器安装，如Fedora: <code>dnf install pass</code>，RHEL/CentOS: <code>yum install pass</code>，Debian/Ubuntu: <code>apt-get install pass</code>，Arch Linux: <code>pacman -S pass</code></li>
</ul>
</li>
<li><p>初始化密码仓库：</p>
<ul>
<li><code>pass init</code></li>
</ul>
</li>
<li><p>生成密码：</p>
<ul>
<li><code>pass generate mysite 20</code></li>
</ul>
</li>
<li><p>查看密码树状结构：</p>
<ul>
<li><code>pass</code></li>
</ul>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## 获取密码</span></span><br><span class="line"></span><br><span class="line">有两种方法可以获取密码：</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 第一种会显示密码到终端上，方法是运行：</span><br><span class="line"></span><br><span class="line"><span class="code">    ```bash</span></span><br><span class="line"><span class="code">    pass mysite</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>更好的方法是使用 <code>-c</code> 选项让 <code>pass</code> 将密码直接拷贝到剪切板上：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pass -c mysite</span><br></pre></td></tr></table></figure>

<p>两种方法都会要求你输入 GPG 密码。</p>
</li>
</ol>
<p>如果你需要重命名某个站点的名字可以使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pass <span class="built_in">mv</span> mysite demo</span><br></pre></td></tr></table></figure>

<p>同时也可以用相同的密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pass <span class="built_in">cp</span> demo demo2</span><br></pre></td></tr></table></figure>

<p>使用 <code>rm</code> 删除账号密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pass <span class="built_in">rm</span> demo2</span><br></pre></td></tr></table></figure>

<p>这几个操作都会对文件进行改变，特别是修改和删除需要谨慎，不过有了接下来的远程仓库，就不担心历史文件被删除了。</p>
<h3 id="使用-Git-仓库存储密码"><a href="#使用-Git-仓库存储密码" class="headerlink" title="使用 Git 仓库存储密码"></a>使用 Git 仓库存储密码</h3><p><code>pass</code> 可以将密码存放的目录当成 Git 仓库来用，通过版本管理系统能让我们管理密码更方便。</p>
<p>虽然这个功能很方便，但是切记，远程仓库最好设置为私有，避免别人访问，虽然密码文件已经加密，要是万一私钥泄漏，就会全军覆没。Git 的使用请关注下一章节。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pass git init</span><br></pre></td></tr></table></figure>

<p>这会创建 Git 仓库，并自动提交所有已存在的文件。下一步就是指定远程仓库了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pass git remote add &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>

<p>我们可以把这个密码仓库当成私有代码仓库。唯一的不同点在于每次我们新增或修改一个密码，<code>pass</code> 都会自动将该文件加入本地仓库。</p>
<p>更新远程仓库的密码，可以使用 Git 的子命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pass git pull</span><br></pre></td></tr></table></figure>

<p>将本地仓库推送至远程仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pass git push</span><br></pre></td></tr></table></figure>

<p>如果你不习惯使用命令行，可以选择其他图形化客户端来使用它，也是可以的，推荐 <code>qtpass</code> 这个实现，它是跨平台的。如果是移动端，那么下载对应平台的 APP 即可。</p>
<p>如果你正在使用 1Password 等软件，<code>pass</code> 官方还提供迁移工具。</p>
<p>参考 <a href="https://www.passwordstore.org/">https://www.passwordstore.org/</a></p>
<p>这章节先到此。未完待续！！</p>
<pre><code>
需求
密码存储安全加密唯一性（只能由加密的人才可解密）。
密码随机生成，任意长度、指定包含数字、特殊字符、字符大小写等。
密码管理易用性、可维护性、可通用性（跨平台设备）。

根据前面介绍，了解了加密工具、密码生成工具、这章节将介绍安全存储。

数据存储不外乎，采用数据库、文本文件等方式。由于，我们有加密工具可对文件进行加解密，所以，我们将选择一种文本格式存储文件即可，对当前文件进行版本管理，这里就要介绍git的使用了。

Git是什么
Git是目前世界上最先进的分布式版本控制系统。与CVS、Subversion一类的集中式版本控制工具不同，它采用了分布式版本库的做法，不需要服务器端软件，就可以运作版本控制，使得源代码的发布和交流极其方便。git的速度很快，这对于诸如Linux内核这样的大项目来说自然很重要。git最为出色的是它的合并追踪（merge tracing）能力。


初级篇

Git 命令专用名词的译名
-   Workspace：工作区
-   Index / Stage：暂存区
-   Repository：仓库区（或本地仓库）
-   Remote：远程仓库
新建仓库

在自己系统中打开终端（或者使用git图形化工具也可以），这里我们采用命令行，新创建一个文件夹来当作一个仓库，并使用Git初始化这个仓库。
mkdir demo
git init
或者
git init [文件夹名称]

如果是在github、gitlab这种托管服务器上，那么可以使用clone子命令克隆远程仓库到本地。
git clone [url]
配置

Git的设置文件为.gitconfig，它可以放在系统用户主目录下（全局配置），也可以在仓库目录下（只配置当前仓库）。
# 显示当前的Git配置
$ git config --list
# 编辑Git全局配置文件
$ git config -e [--global]
# 直接配置提交时显示的名字和邮件地址
$ git config --global user.name &quot;[name]&quot;
$ git config --global user.email &quot;[email address]&quot;
增加/删除/修改文件
add子命令用于添加文件到暂存区，同时可以指定多个文件。如果想将当前目录下的所有文件提交至暂存区，在该子命令后输入. 即可，-p 可将多处变化分开提交。
rm子命令用于删除已提交的文件，同样可以指定多个文件。mv表示修改该文件，用于修改名称，路径。
# 添加指定文件到暂存区
$ git add [file1] [file2] ...
# 添加指定目录到暂存区，包括子目录
$ git add [dir]
# 添加当前目录的所有文件到暂存区
$ git add .
# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p
# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...
# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]
# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
    
代码提交

提交文件到本地仓库， -m指定提交说明消息来说明这次提交的是什么。同时可以将暂存区指定的文件提交到本地仓库。-a 表示对上一次提交进行追加。-v提交时要求显示所有不同的地方。--amend表示修改上一次提交。
# 提交暂存区到仓库区
$ git commit -m [message]
# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]
# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a
# 提交时显示所有diff信息
$ git commit -v
# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]
# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
远程同步
fetch子命令获取远程仓库的所有变动，pull 子命令取回远程仓库的变动并合并本地仓库，push上传本地仓库至远程仓库。
# 下载远程仓库的所有变动
$ git fetch [remote]
# 显示所有远程仓库
$ git remote -v
# 显示某个远程仓库的信息
$ git remote show [remote]
# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]
# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]
# 上传本地指定分支到远程仓库
$ git push [remote] [branch]
# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force
# 推送所有分支到远程仓库
$ git push [remote] --all
git clone
远程操作第一步，用于克隆一个远程仓库代码。例如：
# 克隆一份 Emacs 配置
$ git clone git@gitlab.org/7ym0n/dotfairy.git
该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。
$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;
git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。
$ git clone http[s]://example.com/path/to/repo.git/
$ git clone ssh://example.com/path/to/repo.git/
$ git clone git://example.com/path/to/repo.git/
$ git clone /opt/git/project.git
$ git clone file:///opt/git/project.git
$ git clone ftp[s]://example.com/path/to/repo.git/
$ git clone rsync://example.com/path/to/repo.git/
git remote
为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。
不带选项的时候，git remote命令列出所有远程主机。
$ git remote 
origin
使用-v选项，可以参看远程主机的网址。
$ git remote -v
origin    git@gitlab.com:7ym0n/dotfairy.git (fetch)
origin    git@gitlab.com:7ym0n/dotfairy.git (push)
上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。
克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。
$ git clone -o my-dotfairy https://gitlab.org/7ym0n/dotfairy.git
$ git remote
my-dotfairy #表示，克隆的时候，指定远程主机叫做my-dotfairy
git remote show命令加上主机名，可以查看该主机的详细信息。
$ git remote show origin
* remote origin
  Fetch URL: git@gitlab.com:7ym0n/dotfairy.git
  Push  URL: git@gitlab.com:7ym0n/dotfairy.git
  HEAD branch: master
  Remote branch:
    master tracked
  Local branch configured for &#39;git pull&#39;:
    master merges with remote master
  Local ref configured for &#39;git push&#39;:
    master pushes to master (up to date)
git remote add命令用于添加远程主机。
$ git remote add &lt;主机名&gt; &lt;仓库地址&gt;
git remote rm命令用于删除远程主机。
$ git remote rm &lt;主机名&gt;
git remote rename命令用于远程主机的改名。
$ git remote rename &lt;原主机名&gt; &lt;新主机名&gt;
git fetch
一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。
$ git fetch &lt;远程主机名&gt;
git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。
默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。
$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;
比如，取回origin主机的master分支。
$ git fetch origin master
所取回的更新，在本地主机上要用&quot;远程主机名/分支名&quot;的形式读取。比如origin主机的master，就要用origin/master读取。
git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。
$ git branch -r
origin/master

$ git branch -a
* master
  remotes/origin/master
取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。
$ git checkout -b newBrach origin/master #表示，在origin/master的基础上，创建一个新分支
此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。
# 表示在当前分支上，合并origin/master
$ git merge origin/master
# 或者
$ git rebase origin/master
git pull
git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。
$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;
比如，取回origin主机的develop分支，与本地的master分支合并，需要写成下面这样。
$ git pull origin develop:master
如果远程分支是与当前分支合并，则冒号后面的部分可以省略。
$ git pull origin develop
# 实质上，这等同于先做git fetch，再做git merge
$ git fetch origin
$ git merge origin/develop
在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动&quot;追踪&quot;origin/master分支。
Git也允许手动建立追踪关系。
$ git branch --set-upstream master origin/develop
如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。
$ git pull origin
如果当前分支只有一个追踪分支，连远程主机名都可以省略。
$ git pull #当前分支自动与唯一一个追踪分支进行合并。
如果合并需要采用rebase模式，可以使用–rebase选项。
$ git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;
如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。
但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。
$ git pull -p
# 等同于下面的命令
$ git fetch --prune origin
$ git fetch -p
git push
git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。
$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;
注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。
如果省略远程分支名，则表示将本地分支推送与之存在&quot;追踪关系&quot;的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。
$ git push origin master 
# 将本地的master分支推送到origin主机的master分支。
# 如果后者不存在，则会被新建。
# 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。
$ git push origin :master
# 等同于
$ git push origin --delete master
如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。
$ git push origin
如果当前分支只有一个追踪分支，那么主机名都可以省略。
$ git push
如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。
$ git push -u origin master
上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。
不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。
$ git config --global push.default matching
# 或者
$ git config --global push.default simple
还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。
$ git push --all origin
如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。
$ git push --force origin #使用--force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用--force选项
最后，git push不会推送标签（tag），除非使用–tags选项。
$ git push origin --tags

注意：如果你是普通用户，比如只是用来管理密码文件什么的，到这里基本够用了，接下来的长篇将是详细介绍命令清单，以及专业用户遇到问题时可能有用的命令介绍。



高级篇


分支
# 列出所有本地分支
$ git branch
# 列出所有远程分支
$ git branch -r
# 列出所有本地分支和远程分支
$ git branch -a
# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]
# 新建一个分支，并切换到该分支
$ git checkout -b [branch]
# 在git 2.23版本过后分支管理使用git switch
# 新建一个分支 并且换到该分支
$ git switch -c [branch]
# 新建一个分支，并切换到该分支，如果该分支存在将强制覆盖旧分支
$ git switch -C [branch]
# 新建一个分支，指向指定commit
$ git branch [branch] [commit]
# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]
# 切换到指定分支，并更新工作区
$ git checkout [branch-name]
# 切换到上一个分支
$ git checkout -
# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]
# 合并指定分支到当前分支
$ git merge [branch]
# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]
# 删除分支
$ git branch -d [branch-name]
# 强制删除分支
$ git branch -D [branch-name]
# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
标签
# 列出所有tag
$ git tag
# 新建一个tag在当前commit
$ git tag [tag]
# 新建一个tag在指定commit
$ git tag [tag] [commit]
# 删除本地tag
$ git tag -d [tag]
# 删除远程tag
$ git push origin :refs/tags/[tagName]
# 查看tag信息
$ git show [tag]
# 提交指定tag
$ git push [remote] [tag]
# 提交所有tag
$ git push [remote] --tags
# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
查看信息
# 显示有变更的文件
$ git status
# 显示当前分支的版本历史
$ git log
# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat
# 搜索提交历史，根据关键词
$ git log -S [keyword]
# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s
# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature
# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]
# 显示指定文件相关的每一次diff
$ git log -p [file]
# 显示过去5次提交
$ git log -5 --pretty --oneline
# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn
# 显示指定文件是什么人在什么时间修改过
$ git blame [file]
# 显示暂存区和工作区的差异
$ git diff
# 显示暂存区和上一个commit的差异
$ git diff --cached [file]
# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD
# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]
# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;
# 显示某次提交的元数据和内容变化
$ git show [commit]
# 显示某次提交发生变化的文件
$ git show --name-only [commit]
# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]
# 显示当前分支的最近几次提交
$ git reflog
撤销
# 恢复暂存区的指定文件到工作区
$ git checkout [file]
# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]
# 恢复暂存区的所有文件到工作区
$ git checkout .
# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]
# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard
# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]
# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]
# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]
# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]
# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
其他
# 生成一个可供发布的压缩包
$ git archive
仓库管理


git bisect
git bisect是一个很有用的命令，用来查找哪一次代码提交引入了错误。它的原理很简单，就是将代码提交的历史，按照两分法不断缩小定位。所谓&quot;两分法&quot;，就是将代码历史一分为二，确定问题出在前半部分，还是后半部分，不断执行这个过程，直到范围缩小到某一次代码提交。git bisect start命令启动查错，它的格式如下。
$ git bisect start [终点] [起点]
例如：选择全部的代码历史。起点是第一次提交186356c，终点是最近一次的HEAD。当然，指定其他范围也可以。
$ git bisect start HEAD 186356c
确定正常工作。使用git bisect good命令，标识本次提交（第N次）没有问题。
$ git bisect good
确定不能正常工作。使用git bisect bad命令，标识本次提交（第N次）有问题。
$ git bisect bad
接下来，不断重复这个过程，直到成功找到出问题的那一次提交为止。这时，Git 会给出如下的提示。
is the first bad commit
然后，使用git bisect reset命令，退出查错，回到最近一次的代码提交。
$ git bisect reset
git cherry-pick
对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。这时分两种情况。一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（git merge）。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。git cherry-pick命令的作用，就是将指定的提交（commit）应用于其他分支。
$ git cherry-pick &lt;commitHash&gt; 
# 将指定的提交commitHash，应用于当前分支。这会在当前分支产生一个新的提交，
# 当然它们的哈希值会不一样。
git cherry-pick命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。
$ git cherry-pick feature
Cherry pick 支持一次转移多个提交。
$ git cherry-pick &lt;HashA&gt; &lt;HashB&gt; # 将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。
# 如果想要转移一系列的连续提交，可以使用下面的简便语法。
$ git cherry-pick A..B # 它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。
注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用下面的语法。
$ git cherry-pick A^..B
git cherry-pick命令的常用配置项如下。
（1）-e，–edit
打开外部编辑器，编辑提交信息。
（2）-n，–no-commit
只更新工作区和暂存区，不产生新的提交。
（3）-x
在提交信息的末尾追加一行(cherry picked from commit …)，方便以后查到这个提交是如何产生的。
（4）-s，–signoff
在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。
（5）-m parent-number，–mainline parent-number
如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。
-m配置项告诉 Git，应该采用哪个分支的变动。它的参数parent-number是一个从1开始的整数，代表原始提交的父分支编号。
$ git cherry-pick -m 1 &lt;commitHash&gt; 
# Cherry pick 采用提交commitHash来自编号1的父分支的变动。
# 一般来说，1号父分支是接受变动的分支（the branch being merged into），
# 2号父分支是作为变动来源的分支（the branch being merged from）。
如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作。
（1）–continue
用户解决代码冲突后，第一步将修改的文件重新加入暂存区（git add .），第二步使用下面的命令，让 Cherry pick 过程继续执行。
$ git cherry-pick --continue
（2）–abort
发生代码冲突后，放弃合并，回到操作前的样子。
（3）–quit
发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子。
Cherry pick 也支持转移另一个代码库的提交，方法是先将该库加为远程仓库。
$ git remote add target git://gitUrl
$ git fetch target # 将远程代码仓库抓取到本地。
$ git log target/master # 检查一下要从远程仓库转移的提交，获取它的哈希值。
$ git cherry-pick &lt;commitHash&gt; # 使用git cherry-pick命令转移提交。
撤销操作
一种常见的场景是，提交代码以后，你突然意识到这个提交有问题，应该撤销掉，这时执行下面的命令就可以了。
$ git revert HEAD
命令的原理是，在当前提交后面，新增一次提交，抵消掉上一次提交导致的所有变化。它不会改变过去的历史，所以是首选方式，没有任何丢失代码的风险。git revert 命令只能抵消上一个提交，如果想抵消多个提交，必须在命令行依次指定这些提交。比如，抵消前两个提交，要像下面这样写。
$ git revert [倒数第一个提交] [倒数第二个提交]
git revert命令还有两个参数。–no-edit：执行时不打开默认编辑器，直接使用 Git 自动生成的提交信息。–no-commit：只抵消暂存区和工作区的文件变化，不产生新的提交。


丢弃提交
如果希望以前的提交在历史中彻底消失，而不是被抵消掉，可以使用git reset命令，丢弃掉某个提交之后的所有提交。
$ git reset [last SHA]
git reset的原理是，让最新提交的指针回到以前某个时点，该时点之后的提交都从历史中消失。
默认情况下，git reset不改变工作区的文件（但会改变暂存区），–hard参数可以让工作区里面的文件也回到以前的状态。
$ git reset --hard [last good SHA]
执行git reset命令之后，如果想找回那些丢弃掉的提交，可以使用git reflog命令。不过，这种做法有时效性，时间长了可能找不回来。


替换上一次提交
提交以后，发现提交信息写错了，这时可以使用git commit命令的–amend参数，可以修改上一次的提交信息。
$ git commit --amend -m &quot;Fixes bug #42&quot;
它的原理是产生一个新的提交对象，替换掉上一次提交产生的提交对象。
这时如果暂存区有发生变化的文件，会一起提交到仓库。所以，–amend不仅可以修改提交信息，还可以整个把上一次提交替换掉。


撤销工作区的文件修改
如果工作区的某个文件被改乱了，但还没有提交，可以用git checkout命令找回本次修改之前的文件。
$ git checkout -- [filename]
它的原理是先找暂存区，如果该文件有暂存的版本，则恢复该版本，否则恢复上一次提交的版本。
注意，工作区的文件变化一旦被撤销，就无法找回了。

从暂存区撤销文件
如果不小心把一个文件添加到暂存区，可以用下面的命令撤销。
$ git rm --cached [filename] # 不影响已经提交的内容。
# 最新版本的git推荐使用restore，撤销部分变更
$ git restore --staged [file]
# 撤销所有变更
$ git restore --staged .
# 撤销所有变更
$ git reset -- .
# 撤销暂存区部分变更
$ git reset -- [file1] [file2]
代码回滚
你在当前分支上做了几次提交，突然发现引入大量bug，导致代码稳定性，可以执行以下操作。
# 代码回滚，不影响历史
$ git revert [commit-id]

# 撤销丢弃，影响历史提交记录
$ git reset --hard [当前分支此前的最后一次提交] # 远程分支的该操作一定要团队达成共识，否则很容易导致版本混乱冲突，代码丢失
江湖救急
在某些场景下，执行提交代码后，忘记提交至远程仓库后，执行了git reset指令，导致代码当前分支下的所有工作被重置。可以使用以下命令拯救愚蠢的操作。
# 查看历史操作记录,该记录存在本地，如果本地仓库被彻底破坏，神仙也救不了了。
$ git reflog
# 使用git reset --hard 恢复
$ git reset --hard [command-id]
# 也可以使用git cherry-pick恢复
$ git cherry-pick [command-id]
丢弃工作区所有不受版本控制的文件和目录
$ git clean -fdx
核弹级操作
例如，在某些人不经思考把一些二进制文件或包含认证密码信息的文件提交至仓库，可以使用以下命令进行清理。
# 删除所有分支中的特殊文件
$ git filter-branch --tree-filter &#39;rm -f [file]&#39; HEAD
# --tree-filter 该参数会在每次检出时先执行命令然后重新提交结果
</code></pre>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>pass密码管理本不复杂</title>
    <url>/2024/01/14/2024-01-14-pass-2/</url>
    <content><![CDATA[<h1 id="Password-Store-使用指南"><a href="#Password-Store-使用指南" class="headerlink" title="Password Store 使用指南"></a>Password Store 使用指南</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#password-store-%E7%AE%80%E4%BB%8B">Password Store 简介</a></li>
<li><a href="#%E5%AE%89%E8%A3%85">安装</a><ul>
<li><a href="#gpg-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE">GPG 安装与配置</a></li>
<li><a href="#password-store-%E5%AE%89%E8%A3%85">Password Store 安装</a></li>
</ul>
</li>
<li><a href="#gpg-%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90">GPG 密钥生成</a></li>
<li><a href="#gpg-%E5%AF%86%E9%92%A5%E5%AF%BC%E5%87%BA">GPG 密钥导出</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8">使用</a></li>
<li><a href="#%E5%90%8C%E6%AD%A5">同步</a></li>
<li><a href="#%E6%8F%92%E4%BB%B6">插件</a></li>
<li><a href="#%E7%BB%93%E8%AF%AD">结语</a></li>
</ul>
<h2 id="Password-Store-简介"><a href="#Password-Store-简介" class="headerlink" title="Password Store 简介"></a>Password Store 简介</h2><p>Password Store 是一个简单而强大的密码管理器，它使用 GPG 加密和 Git 同步来存储和管理密码。它具有以下特点：</p>
<ul>
<li>使用标准的 Unix 工具，无复杂依赖</li>
<li>使用简单的文件系统层次结构，方便浏览和搜索</li>
<li>使用 GPG 加密，保证密码安全性</li>
<li>使用 Git 同步，保证密码一致性和可恢复性</li>
<li>支持多个平台，包括 Linux、macOS、Windows、Android、iOS 等</li>
<li>支持多种插件，扩展功能和用户体验</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="GPG-安装与配置"><a href="#GPG-安装与配置" class="headerlink" title="GPG 安装与配置"></a>GPG 安装与配置</h3><p>在使用 Password Store 之前，您需要先安装并配置 GPG。以下是常见平台上的安装方法：</p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>使用包管理器安装 GPG：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install gnupg  # Ubuntu/Debian</span><br><span class="line">pacman -S gnupg    # Arch Linux</span><br></pre></td></tr></table></figure>

<h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><p>使用 Homebrew 安装 GPG：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install gnupg</span><br></pre></td></tr></table></figure>

<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>在 Windows 上，您可以使用 Gpg4win 工具包进行安装和配置。请访问 <a href="https://gpg4win.org/">Gpg4win 官方网站</a> 获取详细指南。</p>
<h3 id="Password-Store-安装"><a href="#Password-Store-安装" class="headerlink" title="Password Store 安装"></a>Password Store 安装</h3><p>可以通过多种方式安装 Password Store。以下是常见平台上的安装方法：</p>
<h4 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h4><p>使用包管理器安装 pass：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install pass  # Ubuntu/Debian</span><br><span class="line">pacman -S pass    # Arch Linux</span><br></pre></td></tr></table></figure>

<h4 id="macOS-1"><a href="#macOS-1" class="headerlink" title="macOS"></a>macOS</h4><p>使用 Homebrew 安装 pass：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install pass</span><br></pre></td></tr></table></figure>

<h4 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h4><p>使用 Chocolatey 安装 pass：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">choco install pass</span><br></pre></td></tr></table></figure>

<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p>从 Google Play 商店安装 Password Store 应用。</p>
<h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p>从 App Store 安装 Pass for iOS 应用。</p>
<p>更多安装方法和详细文档，请访问 <a href="https://www.passwordstore.org/#download">官方网站</a>。</p>
<h2 id="GPG-密钥生成"><a href="#GPG-密钥生成" class="headerlink" title="GPG 密钥生成"></a>GPG 密钥生成</h2><p>在使用 Password Store 之前，您需要生成一个 GPG 密钥对。密钥对由公钥和私钥组成，公钥用于加密密码并分享给他人，私钥用于解密密码和签名。</p>
<p>运行以下命令生成 GPG 密钥对：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg --full-generate-key</span><br></pre></td></tr></table></figure>

<p>按照提示选择密钥类型、密钥长度、密钥过期时间、真实姓名和电子邮件地址等选项。生成密钥后，您可以使用以下命令查看您的公钥和私钥：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg --list-keys</span><br><span class="line">gpg --list-secret-keys</span><br></pre></td></tr></table></figure>

<h2 id="GPG-密钥导出"><a href="#GPG-密钥导出" class="headerlink" title="GPG 密钥导出"></a>GPG 密钥导出</h2><p>如果您希望在其他设备上使用相同的 GPG 密钥对，您需要将密钥导出并导入到目标设备上。</p>
<p>导出公钥，运行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg --export -a &quot;Your Name&quot; &gt; public.key</span><br></pre></td></tr></table></figure>

<p>将公钥保存到名为 <code>public.key</code> 的文件中。</p>
<p>导出私钥，运行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg --export-secret-keys -a &quot;Your Name&quot; &gt; private.key</span><br></pre></td></tr></table></figure>

<p>将私钥保存到名为 <code>private.key</code> 的文件中。</p>
<p>在目标设备上，导入公钥和私钥，运行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg --import public.key</span><br><span class="line">gpg --import private.key</span><br></pre></td></tr></table></figure>

<p>导入后，您可以使用 <code>gpg --list-keys</code> 和 <code>gpg --list-secret-keys</code> 命令确认导入是否成功。</p>
<p>请注意，密钥是非常敏感的信息，请妥善保管您的私钥，并且建议将其加密备份到安全的位置。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>要开始使用 Password Store，您需要先初始化密码存储库。运行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pass init &quot;Your GPG Key ID&quot;</span><br></pre></td></tr></table></figure>

<p>这将创建一个名为 <code>.password-store</code> 的目录，用于存储密码文件。每个文件都是 GPG 加密的文本，包含密码和可选的元数据（如用户名、网址等）。</p>
<p>使用 pass 命令管理密码文件，例如：</p>
<ul>
<li><code>pass ls</code>：列出所有密码文件</li>
<li><code>pass insert foo/bar</code>：插入名为 foo/bar 的密码文件</li>
<li><code>pass show foo/bar</code>：显示 foo/bar 的密码文件内容</li>
<li><code>pass edit foo/bar</code>：编辑 foo/bar 的密码文件内容</li>
<li><code>pass generate foo/bar 16</code>：生成一个 16 位随机密码，并保存到 foo/bar 的密码文件</li>
<li><code>pass rm foo/bar</code>：删除 foo/bar 的密码文件</li>
<li><code>pass mv foo/bar foo/baz</code>：将 foo/bar 重命名为 foo/baz</li>
<li><code>pass cp foo/bar foo/qux</code>：将 foo/bar 复制为 foo/qux</li>
<li><code>pass grep foo</code>：搜索包含 foo 的密码文件</li>
</ul>
<p>更多命令和选项，请使用 <code>pass --help</code> 查看或访问 <a href="https://www.passwordstore.org/#usage">官方网站</a>。</p>
<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>Password Store 使用 Git 来同步密码存储库。您可以使用 <code>pass git</code> 命令执行任何 Git 命令，例如：</p>
<ul>
<li><code>pass git init</code>：初始化 Git 仓库</li>
<li><code>pass git remote add origin https://example.com/repo.git</code>：添加远程仓库</li>
<li><code>pass git push -u origin master</code>：将密码存储库推送到远程仓库</li>
<li><code>pass git pull</code>：从远程仓库拉取更新到密码存储库</li>
<li><code>pass git status</code>：查看密码存储库的状态</li>
<li><code>pass git log</code>：查看密码存储库的历史记录</li>
</ul>
<p>更多 Git 命令和用法，请使用 <code>pass git --help</code> 查看或访问 <a href="https://git-scm.com/doc">Git 官方网站</a>。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>Password Store 支持多种插件，扩展功能和用户体验。以下是一些常用插件的示例：</p>
<ul>
<li><a href="https://github.com/tadfisher/pass-otp">pass-otp</a>：支持一次性密码（OTP）的生成和验证</li>
<li><a href="https://github.com/roddhjav/pass-tomb">pass-tomb</a>：支持使用 Tomb 创建隐藏的密码存储库</li>
<li><a href="https://github.com/j6k4m8/pass-audit">pass-audit</a>：支持对密码存储库进行安全性和复杂性的检查</li>
<li><a href="https://github.com/roddhjav/pass-update">pass-update</a>：支持批量更新密码存储库中的密码</li>
<li><a href="https://github.com/roddhjav/pass-import">pass-import</a>：支持从其他密码管理器导入密码到密码存储库</li>
</ul>
<p>更多插件和列表，请访问<a href="https://www.passwordstore.org/#extensions">官方网站</a>。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Password Store 是一个简单而强大的密码管理器，它使用 GPG 加密和 Git 同步来存储和管理密码。它的优点是简单、安全、一致、多平台和可扩展。如果您正在寻找一个方便且安全的密码管理器，不妨尝试使用 Password Store。😊</p>
<p>了解更多信息，请访问<a href="https://www.passwordstore.org/">官方网站</a>。</p>
<p>参考资料：</p>
<ul>
<li><a href="https://www.passwordstore.org/">Password Store 官方网站</a></li>
<li><a href="https://gnupg.org/">GPG 官方网站</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>GPG + Password Store 密码管理器总结</title>
    <url>/2024/01/14/2024-01-14-pass/</url>
    <content><![CDATA[<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 如何使用自由软件和开源软件打造自己的网络账号密码管理</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 04</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 说明</span></span><br><span class="line"></span><br><span class="line">由于使用到了相关自由软件和开源软件工具，所以前几章节都是工具使用介绍。文章面向的受众是会电脑操作，对账号密码、隐私有要求的人；相对专业人士来讲，可能比较啰嗦。所以，如果你熟悉对应的工具，建议直接跳过去，看不了解的部分。</span><br><span class="line"></span><br><span class="line"><span class="section">### 需求</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 密码存储安全加密唯一性（只能由加密的人才可解密）。</span><br><span class="line"><span class="bullet">2.</span> 密码随机生成，任意长度、指定包含数字、特殊字符、字符大小写等。</span><br><span class="line"><span class="bullet">3.</span> 密码管理易用性、可维护性、可通用性（跨平台设备）。</span><br><span class="line"></span><br><span class="line"><span class="section">### 根据前面介绍</span></span><br><span class="line"></span><br><span class="line">了解了加密工具、密码生成工具、安全存储工具；本章将结合前面的工具做一个总结。</span><br><span class="line"></span><br><span class="line"><span class="section">## 使用演示</span></span><br><span class="line"></span><br><span class="line">经过前三篇文章 GPG 加密、密码生成与管理、Git 使用基本上已经完成了密码管理的工作了，本章将串联前三篇文章介绍的工具进行各个平台设备的使用演示。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 使用 GPG 程序生成公私钥。gpg 名字叫做hacktribe，后面使用的时候 gpg-id 都指定它即可。</span><br><span class="line"></span><br><span class="line"><span class="code">    ```bash</span></span><br><span class="line"><span class="code">    $ gpg --full-generate-key</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>确定 pass 命令已经安装好。使用上一步生成公私钥时的名字初始化密码目录，使用默认的目录即可。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pass init hacktribe</span><br></pre></td></tr></table></figure></li>
<li><p>配置好远程私有仓库。用于存放加密后的密码文件。选择创建一个私有的 Git 仓库，如 GitLab，并配置仓库的远程地址。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pass git remote add main git@gitlab.com:hacktribe/password-store.git</span><br><span class="line">$ pass git pull main</span><br><span class="line">$ pass git push main</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="图形化工具使用"><a href="#图形化工具使用" class="headerlink" title="图形化工具使用"></a>图形化工具使用</h2><p>一般用户，不会使用命令行？没关系，还可以使用图形管理工具 qtpass 来管理。安装完成后，首次打开，会让配置相关配置。</p>
<p>如果需要自动提交到远程仓库，需要在 settings 中把 Use git，相关的 git push 和 git pull 都选上。</p>
<p>这样就完成了密码备份。</p>
<h2 id="结束了吗？"><a href="#结束了吗？" class="headerlink" title="结束了吗？"></a>结束了吗？</h2><p>NO!!! 虽然现在完成了基本的使用，但是，现在还有移动设备等其他平台，或者换一台机器后怎么办？</p>
<p>备份 GPG 密钥，采用 U 盘或者打印纸张藏起来。需要使用 <code>--export-ownertrust</code> 导出信任的数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpg --export-ownertrust &gt; file.txt</span><br></pre></td></tr></table></figure>

<p>如果导出备份，没有使用该参数，会导致迁移其他平台时，状态是未知不可信的，生成密码等会提示是否知晓自己当前的操作的确认，在某些客户端下可能会导致使用有问题。</p>
<p>It is NOT certain that the key belongs to the person named in the user ID. If you <em>really</em> know what you are doing, you may answer the next question with yes.</p>
<p>Use this key anyway? (y/N)</p>
<p>如果不希望提示，可以手动修改为信任：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gpg --edit-key user@useremail.com</span><br><span class="line">gpg&gt; trust</span><br><span class="line">Please decide how far you trust this user...</span><br><span class="line">Your decision? 5</span><br><span class="line">gpg&gt; save</span><br></pre></td></tr></table></figure>

<h2 id="编辑器集成"><a href="#编辑器集成" class="headerlink" title="编辑器集成"></a>编辑器集成</h2><p>小编经常需要用文本编辑器开发程序、写文章什么的，所以，PC端的客户端，只需要安装 password-store 程序，然后通过文本编辑器来管理密码或者一些敏感信息的。</p>
<h2 id="移动端使用"><a href="#移动端使用" class="headerlink" title="移动端使用"></a>移动端使用</h2><p>这里以 iPhone 为例，到应用商店搜索 “password store” 找到 “pass - password store” 下载即可，或者到 <a href="https://mssun.github.io/passforios/">GitHub</a> 上下载。</p>
<p>接下来只需要配置好远程仓库即可。可以使用 SSH-key 或者用户名密码进行管理（账号密码就是 GitLab 的登录账号）。</p>
<p><img data-src="insert_image_url_here" alt="Configuration"></p>
<p>配置完成，就可以使用了。</p>
<p><img data-src="insert_image_url_here" alt="App Screenshots"></p>
<p>密码管理系列文章，到这里就结束了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用下来，绝对不比商业软件差，就是配置稍微比较麻烦而已。好处在于，可以根据自己的需求改变，例如，你可以把 GitLab 部署在家庭网络里，这样所有数据都由自己保管。不依托第三方服务，不用担心一次性泄漏干干净净，底裤被人扒了。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 pass 命令管理 Linux 密码</title>
    <url>/2024/01/15/2024-01-15-pass-3/</url>
    <content><![CDATA[<h1 id="使用-pass-命令管理-Linux-密码"><a href="#使用-pass-命令管理-Linux-密码" class="headerlink" title="使用 pass 命令管理 Linux 密码"></a>使用 pass 命令管理 Linux 密码</h1><p><strong>作者：Thomas Tuffin（Sudoer，Red Hat）</strong></p>
<p>密码管理是近十年来的热门话题。通过快速的谷歌搜索，你会发现各种选择密码管理工具的选项，以保护解锁个人信息的字符串。一些应用程序仅在计算机上运行，并以加密格式离线存储密码。另一些功能更丰富，提供与多个设备的在线同步、密码共享、双因素身份验证（2FA）等。然而，这些服务中的一些，由于在线库的便利性，使密码管理的简单性在提供的功能海洋中失落，同时也失去了对数据的一些控制，因为您的凭据与您无法控制的服务器同步。</p>
<p>有一种替代方案可以提供简单性并让您完全掌控您的凭据。它可以提供许多与付费服务相同的功能，同时保持其简单性。它是开源的，并由创建 Wireguard 的同一作者编写，该项目在进入 Linux 内核之前受到了 Linus Torvalds 的高度赞扬。这个替代方案被称为 pass，也被称为 password-store。</p>
<p><strong>为什么使用 password-store?</strong></p>
<ul>
<li>它是开源的</li>
<li>使用简单</li>
<li>文档完善</li>
<li>基于命令行，但有可用的图形界面扩展</li>
<li>使用 GnuPG 加密，加密级别由您选择</li>
<li>完全在您的掌控之下。密码不同步到第三方服务器</li>
<li>您的密码存储可以仅保留在您的系统上，或者您可以将其与您选择的私有 Git 存储库同步（强烈建议）</li>
</ul>
<p><strong>安装</strong></p>
<ol>
<li><p>安装 pass：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo dnf install pass</span><br></pre></td></tr></table></figure></li>
<li><p>如果您还没有 GPG 密钥对，需要创建一个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gpg2 --full-generate-key</span><br></pre></td></tr></table></figure>
<p>选择选项 1（RSA 和 RSA）作为密钥类型。选择您想要的密钥大小，例如选择 4096。然后选择密钥有效期，在这个示例中选择两年。</p>
</li>
<li><p>现在，列出您的密钥并记下密钥 ID：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gpg2 --list-secret-keys --keyid-format LONG</span><br></pre></td></tr></table></figure></li>
<li><p>使用您的 GPG 密钥 ID 初始化 pass 数据存储：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pass init &#x27;AAAA2222CCCC4444&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>现在您可以从 RSA4096 加密的密码存储中生成和获取密码。例如，生成一个新密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pass generate -c Internet/github.com 21</span><br></pre></td></tr></table></figure>
<p>获取存储中的密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pass show Internet/github.com</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>附加步骤</strong><br>一个 pass 的默认安装为您提供了一个安全的本地数据存储。但为了提高可用性，我认为有几个其他功能是重要的。</p>
<p><strong>同步到 Git 存储库</strong></p>
<p>为了实现冗余性和在多个设备之间共享凭据，强烈建议将 pass 存储与 Git 存储库同步。pass 已经内置了 Git 功能，您只需在 pass 存储中创建远程存储库并初始化即可。以下是使用 Github 的示例，但请记住，您可以使用任何版本控制托管提供商或设置自己的托管服务。</p>
<ol>
<li><p>在远程 Git 服务器上设置私有存储库后，需要在本地使用以下命令初始化 pass 存储并添加远程 origin：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pass git init</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Initialized empty Git repository in /home/myhome/.password-store/.git/</span><br><span class="line">[master (root-commit) 998c8fd] Added current contents of password store. 1 file changed, 1 insertion(+)</span><br><span class="line">create mode 100644 .gpg-id</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pass git remote add origin git@github.com:johndoe/pass-store.git</span><br></pre></td></tr></table></figure></li>
<li><p>只要您对存储库的身份验证正确配置，就可以使用内置的 pass git push 命令将 pass 存储推送到远程存储库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pass git push -u --all</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enumerating objects: 14, done.</span><br><span class="line">Counting objects: 100% (14/14), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (12/12), done.</span><br><span class="line">Writing objects: 100% (12/12), 2.68 KiB | 913.00 KiB/s, done.</span><br><span class="line">Total 12 (delta 6), reused 0 (delta 0), pack-reused 0</span><br><span class="line">To git@github.com:johndoe/pass-store.git</span><br><span class="line">  212af8c..d1c11c5  master -&gt; master</span><br></pre></td></tr></table></figure></li>
</ol>
<p>完成后，您的 pass 存储将与远程存储库同步。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>一生只记一个密码： 1Password 简明教程</title>
    <url>/2024/01/27/2024-01-27-1password/</url>
    <content><![CDATA[<h1 id="转载：一生只记一个密码：-1Password-简明教程"><a href="#转载：一生只记一个密码：-1Password-简明教程" class="headerlink" title="转载：一生只记一个密码： 1Password 简明教程"></a>转载：<a href="https://yishi.io/1password-complete-tutorial/">一生只记一个密码： 1Password 简明教程</a></h1><p>By [王一石](<a href="https://yishi.io/author/">https://yishi.io/author/</a></p>
<blockquote>
<p><em><strong>本文将严格按照初次接触 1Password 的普通用户视角，带大家过一遍 1Password 使用的最佳实践。如果你以前用过或熟悉<br>1Password，可以略过入门部分，直接挑选对你有用的内容查阅；</strong></em></p>
<p> <em>文中截图使用的是 1Passwrod for Mac 桌面端，操作环境是 macOS Catalina。如果你平时使用 Windows<br>的话也无需担心，两者操作界面几乎一致，使用逻辑也没有区别，这份教程对你同样适用。1Password 支持包括<br>macOS、iOS、Windows、Android、Linux、Chrome OS、命令行等全平台；</em></p>
<p> <em>示例账户遵循 1Password 官方推荐的使用方式，选择的是「订阅制」，并使用云服务器同步账户信息。除了介绍主流的 1Password<br>使用方式，本文中我还会详细讲解「 <strong>创建和同步独立保险库」、「数据导入及导出」、「加密及关联文件」</strong> 等衍生功能。 <strong>掌握这些方法，你可以做到对<br>1Password 运用自如，进而提升自己对账户安全的掌控力。</strong></em></p>
</blockquote>
<h3 id="什么是-1Password"><a href="#什么是-1Password" class="headerlink" title="什么是 1Password"></a>什么是 1Password</h3><p>1Password 是由加拿大开发商 <a href="https://1password.com/company/">AgileBits</a><br>开发的一款密码管理软件。除了用来存放账号密码，你还可以存放包括信用卡、身份证件之类的敏感信息。根据官方的[发行公告](<a href="https://app-/">https://app-</a><br>updates.agilebits.com/product_history/OPM2#2352)（Release Notes），第一个正式版的<br>1Password 1.0.0 客户端发行于2006年，距今14年。</p>
<p><strong>我们储存在 1Password 中的信息都是被加密的，任何数据在被传输前，1Password 都会使用 AES 256-bit<br>算法加密3次，即便是开发商 AgileBits 也无法获取。客户端和 1Password 服务器的认证和通信通过零知识证明协议加密。</strong></p>
<p>2014年 OpenSSL<br>暴露的<a href="https://heartbleed.com/">心脏滴血漏洞</a>（Heartbleed）漏洞对整个互联网造成了难以估量的影响，所有依赖<br>SSL/TLS 协议的网站或客户端，都可能因此受到攻击。 <strong>当时很多使用 OpenSSL 服务的科技巨头（e.g. Google, Facebook,<br>Amazon 以及国内各梯队的互联网公司等…）的用户敏感数据被大量 Dump，其中有不少公司甚至明文保存用户密码。</strong> 如果你愿意了解更多细节，可以搜下<br>“Akamai secure heap “，Alex Clemmer 专门写了[文章](<a href="https://blog.nullspace.io/akamai-">https://blog.nullspace.io/akamai-</a><br>ssl-patch.html)来分析这件事，过程很是曲折。</p>
<p>所幸 1Password 并不建立在 SSL/TLS 之上，因此[并未受到波及](<a href="https://blog.1password.com/imagine-">https://blog.1password.com/imagine-</a><br>no-ssl-encryption-its-scary-if-you-<br>try/)，官方不久后还推出<a href="https://support.1password.com/watchtower/">暸望塔</a>（Watchtower）功能，用来检查你使用过的哪些网站遭到数据泄露，这个功能不久后就集成到客户端中。</p>
<p><strong>1Password 的盈利模式完全来自用户付费，因此他们没有任何第三方广告业务，也不使用、分享或出售用户数据。</strong> 1Password<br>严格遵守欧盟数据保护通用条例<br>GDPR，他们在官网隐私介绍页面详细说明了<a href="https://support.1password.com/1password-privacy/">隐私策略</a>。</p>
<p>苹果在2018年为全球超过123,000员工[部署企业版1Password](<a href="https://bgr.com/2018/07/10/apple-1password-">https://bgr.com/2018/07/10/apple-1password-</a><br>acquisition-deal/)。</p>
<h3 id="为什么要用-1Password"><a href="#为什么要用-1Password" class="headerlink" title="为什么要用 1Password"></a>为什么要用 1Password</h3><p>这个问题可以拆成两部分：</p>
<p>**1）为什么要使用「密码管理器」；<br>2）为什么要在众多密码管理器中选择  1Password？ **</p>
<p>对问题1，很多人习惯在所有网站都使用相同密码，而且通常包含生日年月这样非常容易被外人获得的信息。<br><strong>一旦其中某个网站发生数据泄露，你所有的账户都会受到牵连。</strong> 即便能做到不同账号不同密码，我们为了方便记忆，设定的密码也往往强度不足。</p>
<p>通常，高强度的好密码要满足：</p>
<ul>
<li>长度8位及以上； </li>
<li>同时包含大写字母和小写字母； </li>
<li>包含1及以上的特殊符号（e.g. *^%$=…）； </li>
<li>自己能记住。 </li>
</ul>
<p>在使用密码管理器之前，我曾一直用「基本密码」+「特征码」来设置密码，并为此感到洋洋得意。以 Gmail 账户举例，我以基本密码 “Yishi123+-/“<br>+ 特征码 “GL”（网站域名的首尾大写字母）作为密码  “Yishi123+-/GL”；如果账户涉及财产，就换个更长的基本密码。</p>
<p>乍一看符合好密码的要求，自己也能记住，看起来比所有网站同用一个密码要强多了不是么。 <strong>但这样做最多在黑客批量撞库时躲过一劫，实则没什么作用</strong> 。</p>
<p>因为只要黑客通过社工手段定位到你个人，不管你以什么方式组合特征码、特征码有多复杂，只要规则一致的，那么其中一个账号被盗，其他的就都能顺藤摸瓜推理出来。</p>
<p><strong>因此，所谓基本密码+特征码，在安全性上形同虚设。</strong></p>
<p>有人说，那我每个网站都使用毫无规律的随机长密码。拿小本子把账号密码都记下来，按字母 a-z<br>给网站排序，每次登录时查下不就行了。除非本子遗失或黑客到家里盗走，我的密码都是万无一失的，也不怕撞库。</p>
<p>这个办法安全系数确实最高。某种程度上，小本子就是你自制的密码管理器，但是用起来麻烦。</p>
<p>小本子丢了或损坏怎么办，人在公开场所怎么办，每天登N个网站就要手动敲N遍毫无规律的密码，诸如此类的缺点很多，余不一一…</p>
<p>而一个专业的密码管理器，就是用来解决这个问题的。</p>
<p>它本质上做了两件事：</p>
<ol>
<li><strong>帮你生成足够强的随机密码；</strong></li>
<li> <strong>帮你管理好这些账户，要用时出现，不用时消失。</strong></li>
</ol>
<p>对问题2，我亲身使用过的密码管理器有 1Password、LastPass,、KeePass，除此之外还有一大票优秀产品如 DashLane,<br>RoboForm … 等，虽然没用过，但它们都有各自粉丝拥簇。</p>
<p>**如果你喜欢彻底开源、轻量、免费，那么我强烈推荐<a href="https://keepass.info/">KeePass</a>，它的开发社区很活跃，光是在 macOS<br>上，开发者们就贡献了 KyPass，MacPass，KeePassX 等多个客户端的实现，并且功能十分强大。 **</p>
<p><strong>但如果你和我一样，除了安全性，同样在意使用体验、灵活性和便利性，本着「能力范围内选择综合素质最好的」原则，那么我推荐 1Password。</strong></p>
<p>1Password 并非开源，但它遵循公开规范（[安全模型的白皮书](<a href="https://1password.com/files/1Password-">https://1password.com/files/1Password-</a><br>White-Paper.pdf)），任何开发者都可以对其进行黑箱测试。</p>
<p>David Schuetz 在他的<a href="https://darthnull.org/security/2018/11/09/1pass-misc/">博客</a>对<br>1Password 的工作机制进行了极为详尽的探索，下图便是他总结的核心：</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-6.png"></p>
<p>我们只需明白，1Password 最关键的安全要素，便是我在图中红框标出的 2SKD（two-secret key derivation）。<br><strong>而这两个所谓的 “Secret key “，分别是主密码（Master password）和 私钥（Secret<br>key）。</strong>你不用看懂这套复杂的流程，只要抓住核心点，即，如何确保「我的密码只有我知道，即便1Password<br>也无法查看我的敏感信息」即可。关于这点，我会在下文设置主密码的步骤中，详细跟你解释。</p>
<p>开源是个很大的话题，它也并非一切事物的银弹。受制于篇幅，本文我们主要讲解 1Password 的使用，如果你对开源感兴趣，以后可以单独写一篇文章。</p>
<p><strong>准备就绪，接下来就开始我们的 1Password 之旅。</strong></p>
<h3 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h3><p><strong>登陆 1Password<br>官方网站：[点击访问](<a href="https://www.tkqlhce.com/click-9258661-13433658?url=https://1password.com/zh-">https://www.tkqlhce.com/click-9258661-13433658?url=https%3A%2F%2F1password.com%2Fzh-</a><br>cn%2F)</strong></p>
<p>点击「免费试用」，1Password 支持30天免费试用， <strong>只需要一个邮箱，不需要绑定信用卡。</strong></p>
<p>![](<a href="https://yishi.io/wp-">https://yishi.io/wp-</a><br>content/uploads/2020/02/截屏2020-02-26下午7.37.04-1024x921.png)</p>
<p>选择「个人&amp;家庭」，点击「免费试用30天」。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-35-1024x921.png"></p>
<p><strong>1Password 有两种付费方案，一种是买断制，一种是订阅制。</strong></p>
<p><strong>对于买断制（Standalone），每个平台客户端单独购买，终身使用，但遇到大版本更新可能需要付费升级，不升级依然可以继续使用。</strong> 1Password<br>过去的 4、5、6 大版本都是直接免费升级，非常良心，但或许是迫于营收压力，从 6 升级到 7，需要支付49美金。  </p>
<p><strong>对于订阅制（Subscription），可以按月或按年付费，不限平台及设备数量，实时更新最新版本。</strong> 这是 1Password<br>目前主推的付费方式，每月2.99美金；如果是家庭一起用，价格就更美丽，人均每月不到1美金。</p>
<p>未来 1Password 应该不会再推出买断制的版本，现有的付费升级也是给老用户一个可选项。如果你想使用支持买断制的老版本<br>1Password，可以去官网下载，macOS 系统下最新版本是 [1Password 6.8.9](<a href="https://app-/">https://app-</a><br>updates.agilebits.com/download/OPM4)，Windows 系统下最新版本是 <a href="https://c.1password.com/dist/1P/win4/1Password-4.6.2.626.exe">1Password<br>4.6.2</a>。</p>
<p><strong>关于购买的建议：</strong></p>
<ul>
<li><strong>不要贪图便宜去某宝买，基本是黑卡，一旦被查明，无理由封号；</strong></li>
<li> <strong>不要和外人共用家庭账户，密码是敏感信息，家庭账户管理员可以恢复成员被删的内容，有安全隐患；</strong></li>
<li> **不要使用任何来源的所谓破解版，因为你根本不知道里面是否有后门或木马，如果你不想为正版付费，那么我推荐使用  <a href="https://keepass.info/">KeePass</a>，开源、免费。 **</li>
</ul>
<p>继续注册，输入你的昵称，以及邮箱地址。 为了避免邮件推送对用户的干扰，1Password 默认取消邮件订阅的选项，我们保持原状就好。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-37-1024x781.png"></p>
<p>输入 1Password 发送到你邮箱的6位数字确认码。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-39-1024x781.png"></p>
<p>点击底部的「稍后添加卡片」，我们暂时只想试用。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-38-1024x781.png"></p>
<p><strong>设置主密码，这是最核心的密码，它应该不同于你在其他任何平台使用过的密码。万一遗忘，1Password 也无法帮你找回，因此务必慎重。</strong><br>主密码在设置后随时可更改，不限次数，但前提是你记得原主密码。</p>
<p>设置主密码有几个<a href="https://support.1password.com/strong-master-password/">原则</a>：</p>
<ul>
<li>你的主密码是独一无二的； </li>
<li>你的主密码是没有明显规律的； </li>
<li>你的主密码是自己能记住的。 </li>
</ul>
<p><strong>你应该对自己的主密码负责，确保它牢牢存在你的脑子里。</strong></p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-36-1024x781.png"></p>
<p>成功登陆 1Password，将 Secret key 下载到本地，先不用管它，我稍后会解释这个要如何使用。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-31-1024x781.png"></p>
<p>点击「获取应用」，选择你目前使用的操作系统，安装 1Password。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-24-1024x781.png"></p>
<h3 id="开启-1Password"><a href="#开启-1Password" class="headerlink" title="开启 1Password"></a>开启 1Password</h3><p>恭喜，你已经完成了所有准备工作。打开刚刚安装好的 1Password，你会发现有一些信息已经被预先填好，有一些则需要你主动填写。 <strong>还记得我们提到过的<br>2SKD（two-secret key derivation）、Secret key 等一系列名词吗？是时候跟你解释了。</strong></p>
<p>下图中示例账户信息从上往下分别是：</p>
<ol>
<li>Web 版 1Password 登陆地址：my.1paasword.com </li>
<li>你的登陆账户名：<a href="mailto:&#x79;&#105;&#x73;&#x68;&#x69;&#48;&#49;&#46;&#119;&#x61;&#x6e;&#x67;&#x40;&#111;&#117;&#116;&#x6c;&#111;&#x6f;&#x6b;&#46;&#x63;&#111;&#109;">&#x79;&#105;&#x73;&#x68;&#x69;&#48;&#49;&#46;&#119;&#x61;&#x6e;&#x67;&#x40;&#111;&#117;&#116;&#x6c;&#111;&#x6f;&#x6b;&#46;&#x63;&#111;&#109;</a> </li>
<li>你的私钥 Secret key：A3-WXH7FN-MQNQGZ-…. </li>
<li>你的主密码：********* </li>
</ol>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/%E6%88%AA%E5%B1%8F2020-02-26%E4%B8%8B%E5%8D%889.50.22.png"></p>
<p>所谓 2SKD（two-secret key derivation）机制，指的是1Password 同时使用你自己设定的主密码（Master<br>password）和私钥（Secret key）来加密你的信息，以及在与服务器通信的过程中验证你的身份。</p>
<p><strong>主密码（Master password）不会被 1Password 存储，它只有在被运行的时候短暂存在于机器的内存中。</strong></p>
<p><strong>Secret key（即图中的 Account key）在且仅在本地生成，不会上传到服务器。</strong></p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-1.png"></p>
<p>因此，如果有一天你忘记了主密码或私钥中的任何一个，那么你将再也无法恢复你存储的所有账户信息，所以务必要保管好。</p>
<p>还记得刚才登录 1Password 网页后，下载到本地的一份 PDF 吗？这就是 1Password 急救包（Emergency kit），你有两种选择：</p>
<ol>
<li>将它打印出来，然后放到安全的地方。以防有天突然忘记主密码，你可以在图中框出的地方，将你的主密码写上作为备份。 </li>
<li>将它存放在 U 盘里，然后放到安全的地方。 </li>
</ol>
<p>总之，不要将它发到网上，也不要拍照传到云相册。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-33-829x1024.png"></p>
<p>终于来到主界面了，欢迎页面的这几个快捷选项，你以后随时可以设置，现在我们直接进入。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/%E6%88%AA%E5%B1%8F2020-02-26%E4%B8%8B%E5%8D%889.51.34.png"></p>
<h3 id="创建登陆信息"><a href="#创建登陆信息" class="headerlink" title="创建登陆信息"></a>创建登陆信息</h3><p>不出意外的话，你看到的界面应该和下图没有差别。1Password 客户端从左至右依次是：侧边栏、账号列表、账号详情，<br><strong>它们从逻辑上是依次递进的，你在侧边栏过滤，在账号列表选择，在详情页面查看、编辑或分享。</strong></p>
<p><strong>从现在起，我说的账号指的都是在 1Password 中保管着的，你其他网站或 App 的账号，而不是你的 1Password 账号。你的<br>1Password 账户，就是我们在本文一开始注册 1Password 使用的邮箱，不要搞混。</strong></p>
<p>![](<a href="https://yishi.io/wp-">https://yishi.io/wp-</a><br>content/uploads/2020/03/截屏2020-02-26下午10.19.35-1024x728.png)</p>
<p>1Password<br>预设了非常多的信息类型，最常用的有「登录信息」、「安全备注」、「身份标识」等，这些类型实际上都是模板，由不同的表单组成，你可以随意组合或添加新的字段、组别等等，等我们走完最基础的使用流程，我会教你如何玩出「新花样」。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image.png"></p>
<p>现在跟我创建第一条账号信息吧，比如我希望在 1Password 保存我的 Outlook 邮箱账号：</p>
<ol>
<li>点击「创建新条目」按钮 </li>
<li>将「登录信息」标题改为 yishi@outlook </li>
<li>填入用户名：<a href="mailto:&#x79;&#105;&#115;&#104;&#x69;&#x30;&#x31;&#46;&#119;&#97;&#110;&#103;&#x40;&#111;&#117;&#116;&#108;&#x6f;&#x6f;&#x6b;&#46;&#99;&#111;&#x6d;">&#x79;&#105;&#115;&#104;&#x69;&#x30;&#x31;&#46;&#119;&#97;&#110;&#103;&#x40;&#111;&#117;&#116;&#108;&#x6f;&#x6f;&#x6b;&#46;&#99;&#111;&#x6d;</a> </li>
<li>填入密码 </li>
<li>填入网站地址：outlook.com </li>
</ol>
<p>点击保存，就这么简单。</p>
<p>每次给账号起标题时，我都是以「账号名@网站」的形式命名，例如我有两个 Outlook 邮箱，用户名分别是 yishi01.wang 和<br>bar01.wang，那么我会以 “yishi@outlook”，”bar@outlook” 分别命名。 <strong>这样每次要找账号时，只要在 1Password<br>全局搜索框输入几个字母就可以迅速定位，节约大量时间。</strong></p>
<p>眼尖的你可能已经在疑惑，下图中的「重新生成密码」和右侧蓝色的小齿轮是做什么用的。其实这是 1Password<br>自带的密码生成器，每次你创建新账号或编辑老账号时，只要点击小齿轮，密码生成器就会弹出。</p>
<p>上面3个拖拽条可以分别控制生成密码的：</p>
<ul>
<li><strong>长度，即位数；</strong></li>
<li> <strong>密码中包含的数字个数；</strong></li>
<li> <strong>密码中包含的符号个数。</strong></li>
</ul>
<p>这个功能最好的地方就在于， <strong>不同的网站往往有不同的密码要求</strong><br>。有的要求密码必须大于8位，有的要求必须带有数字或符号等等。你可以根据需求生成想要的密码，而不用像以前一样绞尽脑汁，好不容易想到合适的密码，却在填完后转头就忘。1Password<br>还提供免费的[网页版密码生成器](<a href="https://1password.com/zh-cn/password-">https://1password.com/zh-cn/password-</a><br>generator/)，如果读到这里你还没在本地安装 1Password 软件的话，不妨在网页上玩玩看。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-18-1024x728.png"></p>
<h3 id="掌握-1Password-正确的使用方式"><a href="#掌握-1Password-正确的使用方式" class="headerlink" title="掌握 1Password 正确的使用方式"></a>掌握 1Password 正确的使用方式</h3><p>刚才我们已经成功创建了第一个账号，很简单吧。</p>
<p>但是你可能会冒出新问题，自己以前的那么多网站账号该怎么办，难道要手动一个个敲进去吗；另外，平时注册网站时都是在网页上操作，以后每次要在网页上输一遍，然后打开<br>1Password 再输一遍吗？</p>
<p>当然不是。</p>
<p>要快速导入已有的账号，可以通过 1Password 官方导入工具，目前支持<br>1Password、LastPass、Dashlane、RoboForm、Chrome，点击对应的数据源，按照网站提示一步步操作即可。</p>
<p>![](<a href="https://yishi.io/wp-">https://yishi.io/wp-</a><br>content/uploads/2020/03/截屏2020-02-2919.51.52-1024x949.png)</p>
<p>如果上面的数据源都不符合，你还可以自行制作 CSV 文件来批量导入（Excel 可以导出 CSV 格式），<br><strong>只需要确保<a href="https://support.1password.com/create-csv-files/">内容格式</a>跟 1Password<br>所要求的匹配</strong>。不过我不打算在这里展开，因为大部分人使用的密码数量都很有限，与其慢慢重新整理再导入，不如在 1Password 里直接创建更直观。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-22-1024x949.png"></p>
<p><strong>针对原先已存在的各种网站账号，我建议在你登录这个网站时把账号信息直接同步到 1Password，登录即保存，省去在软件重新输入的烦恼。</strong><br>既然要跟网站打交道，是时候请出 1Password 的得力助手了。</p>
<h3 id="1Password-官方浏览器插件"><a href="#1Password-官方浏览器插件" class="headerlink" title="1Password 官方浏览器插件"></a>1Password 官方浏览器插件</h3><p>如果你使用 macOS 系统，那么在你安装完 1Password 软件后，Safari 浏览器就已经内置了插件，你只需要打开它即可。</p>
<p>点击桌面左上角，选择 1Password 的「偏好设置」。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-30.png"></p>
<p>点击顶部的「浏览器」标签页，确保你勾选了「始终保持 1Password 扩展助手运行」这个选项。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-4.png"></p>
<p>接下来，打开你的 Safari 浏览器，点击桌面菜单栏左上角 Safari 的「偏好设置」，快捷键是 Command + 英文逗号 “⌘ ,”<br>。确保你勾选了 1Password 扩展，允许它访问你的登录信息等。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-12.png"></p>
<p>现在你已经可以在 Safari 中使用 1Password 插件了，注意观察，在你的浏览器地址栏旁边出现了 1Password<br>的标志。你可以随时点击它唤起 1Password，帮你在网页中填入账号信息等等。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-11.png"></p>
<p>如果你使用的是 Windows 系统，或者使用 macOS 系统但并不常用 Safari，你可以安装其他浏览器插件。以下是 1Password<br>官方支持的<a href="https://1password.com/zh-cn/downloads/mac/#browsers">全部浏览器</a>：</p>
<ul>
<li>Google Chrome</li>
<li>Firefox</li>
<li>Brave</li>
<li>Microsof Edge</li>
</ul>
<p>接下来我将以 Chrome 浏览器的 1Password X 插件为例，继续我们的探索。<br>要事先说明的是，1Password 的浏览器插件有两种类型，分别是独立型的 1Password X 和依赖本地软件的插件。</p>
<p><strong>所谓独立型，就是不需要在本地额外安装 1Password，在浏览器上就可以完成 1Password 几乎所有功能；</strong></p>
<p><strong>而依赖型插件，则要求本地安装 1Password，它通过接口和你本地的 1Password 交换数据，是你在浏览器中使用 1Password<br>的延伸，刚才我们在 Safari 打开的插件，就是这种类型。</strong></p>
<p>相比依赖型插件，独立型的 1Password X 更为强大和智能，也是目前官方推荐的在浏览器中使用 1Password 的方式。</p>
<p>因为数据都是实时同步，你可以同时使用本地 1Password 客户端 和 1Password X，我自己也是这样做的，怎么方便怎么来。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-32-1024x781.png"></p>
<p>现在进行安装。因为众所周知的原因，某些地区不能访问 Chrome 应用商店，因此你需要自备道具。 我假设你已经成功使用道具完成翻跃，现在看到的就是<br>[1Password X<br>插件的详情页面](<a href="https://chrome.google.com/webstore/detail/1password-x-%E2%80%93-password-">https://chrome.google.com/webstore/detail/1password-x-%E2%80%93-password-</a><br>ma/aeblfdkhhhdcdjpifhhbdiojplfjncoa?utm_source=chrome-ntp-icon)。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-34-1024x947.png"></p>
<p>插件成功安装后，点击「登录」按钮。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-21-1024x947.png"></p>
<p>还是熟悉的味道，回忆一下，我们之前已经在本地桌面端的 1Password 中输入过这些信息了，这里的登录和上一次没有任何区别。1Password<br>已经贴心的帮你填好一些内容，因为这些数据本就缓存在你本地。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-23-1024x947.png"></p>
<p>搞定了，是不是比想象的要容易。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-2.png"></p>
<p>现在让我们看看插件有什么魔力。 <strong>只要你在 1Password 保存了相应网站的账号，每次登录时，登录界面上都会出现 1Password<br>的标志。点击后，1Password 就在对应位置弹出所有相关账号，选择你要登录的账号，嗖，完成。</strong></p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/ezgif.com-optimize.gif"></p>
<p>已经在 1Password 储存的账号，快速登录是没问题了；没在 1Password 储存的老账号，还有新注册账号又要如何同步？</p>
<p>一点也不难，不管你是登录原有账号，或是注册新号， <strong>只要在界面的输入框旁点击 1Password 图标，再点击「在 1Password<br>中保存」，1Password 就会自动把这个网站的账号、密码、网址、标题同步到你数据库。</strong></p>
<p>![](<a href="https://yishi.io/wp-">https://yishi.io/wp-</a><br>content/uploads/2020/03/截屏2020-02-26下午10.59.02-1024x1010.png)</p>
<p>在弹出的提示框中，你可以设定这个账号的标题，以及它要保存在哪个「保险库」中，关于保险库的概念，下文会解释，我们现在点「保存」，完成。</p>
<p>![](<a href="https://yishi.io/wp-">https://yishi.io/wp-</a><br>content/uploads/2020/03/截屏2020-02-26下午10.59.08-1024x1010.png)</p>
<p>回顾下我们现在学会的：</p>
<ul>
<li><strong>了解 1Password 的基本工作原理</strong></li>
<li> <strong>注册 1Password 账号</strong></li>
<li> <strong>下载并安装 1Password 客户端</strong></li>
<li> <strong>清楚主密码（Master password）和私钥（Secret key）的含义，妥善设置和保管</strong></li>
<li> <strong>批量导入其他数据源的账号密码</strong></li>
<li> <strong>开启1Password Safari 浏览器扩展 / 安装 Chrome 浏览器扩展</strong></li>
<li> <strong>使用 1Password 自动登录网站</strong></li>
<li> <strong>在 1Password 自动同步老账号或新注册网站的账号</strong></li>
</ul>
<p>每次登录网站时，让 1Password<br>帮我们填写账号，省去每天重复敲打键盘，解放双手，新旧网站的账号也可以实时同步保存，使用随机生成的强密码，安全性也能得到保障。</p>
<p><strong>看到这里，你已经掌握了 1Password 主流使用方式，无需担心账号如何同步，资料如何备份，因为这一切 1Password<br>已经帮你打理的服帖，至于剩下的细枝末节，今后可以慢慢摸索。</strong></p>
<p>我们现在可以尽情享受 1Password 带来的好处了。 但对于想要深入挖掘 1Password 的人来说，这会远远不够。接下来，我们要拓宽视野范围，探明<br>1Password 还有哪些实用的特性，有些可能稍微复杂，如果你感兴趣，就跟我来。</p>
<h3 id="使用-1Password-双重验证"><a href="#使用-1Password-双重验证" class="headerlink" title="使用 1Password 双重验证"></a>使用 1Password 双重验证</h3><p>你肯定听过或使用过「双要素验证（Two-factor authentication）」，也称 2FA 或二次验证。它是基于时间、Token<br>等自然变量结合一定加密算法组合出一组动态密码，通常每60秒刷新一次，很难获取或破解。 <strong>我们在一些网站的安全设置看到的二次验证，基本都是 TOTP<br>动态密码（Time-based one-time password）验证。</strong></p>
<p>以下图中示例的微软账户二次验证为例， <strong>点击浏览器右上角的 1Password 图标，在弹窗中点击「二维码图标」，1Password 会自动识别当前网页的<br>TOTP 配对二维码，完成识别后会自动保存并提醒你。</strong></p>
<p>你在图中看到的1Password 插件显示的「一次性密码」，即为 TOTP 动态密码。只要设置完成，以后再登录对应网站，1Password<br>不仅帮你自动填写登录信息，连动态密码也不用你烦心。</p>
<p>当然，如果你不喜欢 1Password 自动填写动态密码，可以选择 Authy 或其他动态密码管理软件，这里不再赘述。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-5-1024x828.png"></p>
<h3 id="创建本地独立保险库"><a href="#创建本地独立保险库" class="headerlink" title="创建本地独立保险库"></a>创建本地独立保险库</h3><p>尽管我们已知 1Password 的数据通过 AES-256<br>算法端到端加密，也看到了官方公布的[安全模型](<a href="https://support.1password.com/1password-">https://support.1password.com/1password-</a><br>security/)。但你不能否认，人的安全感最终来自对事物的完全掌控，如果我就是不信任 1Password<br>服务器，有没有办法既让数据全部留在本地，又不妨碍但我们继续使用它这些好用的功能和浏览器插件？</p>
<p><strong>有的，创建一个只属于你自己的保险库。</strong></p>
<p>保险库是 1Password 重要的一个概念，它跟现实世界中的「保险库」含义是相似的。它是 1Password 创造的一种特殊文件，内部使用 JSON<br>作为信息格式，使用 PBKDF2 作为密钥派生（Key derivation）的方式。<br><strong>你的各类账号信息都存储在保险库里，保险库经过加密后其他人无法开启。</strong></p>
<p>我们在一开始创建登录信息时，默认保存账号的保险库就已经在 1Password 服务器上托管。 <strong>现在我们要做的，是在本地创建不与外界联网的独立保险库。</strong><br>理论上，你可以在 1Password 有无数个保险库，但我觉得那样做无必要，大部分人只需要一个保险库。</p>
<p>我们开始吧，进入 1Password 的偏好设置，找到「高级」选项，确保你勾选了「允许在 1Password  账户之外创建保险库」。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-25.png"></p>
<p>一旦你勾选了这个选项，在你的 1Password 中会即刻出现一个新的保险库。 <strong>现在你有了两个保险库，一个是存储在 1Password<br>官方服务器的保险库，一个是只存储在你本地的保险库。</strong> 这个新的保险库使用的是同样的主密码，但不会以任何方式跟外部同步数据（除非你自行设置）。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-26-1024x691.png"></p>
<p>如果你想要一个可以设置独立主密码的保险库，可以在桌面左上方点击 1Password 的文件按钮，选择新建独立保险库。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-27.png"></p>
<p>这时就可以为这个新保险库设置完全不同的主密码，相应的， <strong>要想打开这个保险库，每次都需要输入对应的主密码。</strong></p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-16-1024x691.png"></p>
<h3 id="同步独立保险库"><a href="#同步独立保险库" class="headerlink" title="同步独立保险库"></a>同步独立保险库</h3><p>本地创建的独立保险库，要如何在其他设备使用呢。比如我想在手机使用存储在家中电脑 1Password 保管的账号，就必须想办法将保险库同步过来。</p>
<p>1Password 支持多种保险库同步方式：</p>
<ul>
<li>iCloud 同步（限 Apple 设备） </li>
<li>Dropbox 同步 </li>
<li>文件夹同步 </li>
</ul>
<p>其实三者大同小异，依据个人偏好选择就可以。以「文件夹同步」为例，1Password 要求你指定一个存放保险库副本的位置，我<br><strong>建议你放在一个不容易误删的路径</strong> ，这里我为了方便演示，随手选择了桌面。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/%E6%88%AA%E5%B1%8F2020-02-26%E4%B8%8B%E5%8D%8811.25.05.png"></p>
<p>创建完成后，你可以看到对应的文件夹中多了一个后缀为 .opvault 的文件，这个就是所谓的保险库。</p>
<p>而 OPVault，正是 AgileBits 为 1Password 开发的保险库文件制式，其前身是 <a href="https://support.1password.com/cs/agile-keychain-design/">Agile<br>Keychain</a>，作为目前<br>1Password 默认的保险库格式，它的性能和安全性相比之前得到了很大提升，<br><strong>其中一些关键特性并不止足当前，而是作为前瞻性的设计防范未来可能出现的风险</strong> 。</p>
<p>你可以用任何第三方工具同步这个文件夹，甚至用 U 盘拷贝粘贴都没问题， <strong>所有以上提及的同步方式，都不经过 1Password 服务器。</strong></p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-13.png"></p>
<p>除此之外，1Password 还支持局域网同步。你可以将本机设定为 WLAN 服务器，打开后，只要在你手机 1Password 的设置项中选择「与 WLAN<br>服务器同步」，选中本机的设备名称，输入窗口中显示的密钥即可完成同步。这种方式对安卓手机同样适用。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/%E6%88%AA%E5%B1%8F2020-02-26%E4%B8%8B%E5%8D%8811.26.30.png"></p>
<h3 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h3><p>在 1Password 左侧边栏选中一个保险库，点击菜单栏的「文件」-「导出」-「所有项目」，输入主密码验证，1Password<br>就会将所有账号信息打包成明文文件，供你使用。目前支持3种格式：</p>
<ul>
<li>1Password 专用文件格式：.1pif </li>
<li>逗号分隔的文本：.csv </li>
<li>制表符分隔的文本：.txt </li>
</ul>
<p>需要格外注意，导出的文件是未加密的明文，任何人拿到这个文件就等于获得里面包含的全部信息，所以务必小心。除非你非常清楚自己在做什么，否则不要轻易导出数据。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-3.png"></p>
<h3 id="加密文件"><a href="#加密文件" class="headerlink" title="加密文件"></a>加密文件</h3><p>在[安全上网指南](<a href="https://yishi.io/safe-internet-surfing-and-protect-your-">https://yishi.io/safe-internet-surfing-and-protect-your-</a><br>privacy/)这篇文章中，我曾说不要在手机相册中保存敏感照片，如护照信息页、身份证正反面、信用卡等。这是因为我们很容易把手机相册的访问权限授权给第三方应用，而我们不能确保这些应用恪守规范，不随意上传我们的照片。1Password<br>恰好支持加密文件，这无疑给了这些敏感照片一个容身之地。</p>
<p>在 1Password 点击”+”号，选择「加密文档」，就可以把你想要加密的文件丢进去了。 <strong>1Password 支持 1GB<br>的文档存储空间，几乎不限制格式，图片、PDF、视频 … 任何你能想到的格式都可以。</strong></p>
<p>把敏感照片存在随身设备里的好处显而易见。有时候你出国在外，需要用护照信息，但出于安全考虑最好不要随身携带原件以免丢失。<br><strong>这时候电子版的护照信息页就能派上用场，上面的护照编号、起止有效期、签证信息等，都可以随手掏出使用，且不用担心这些敏感信息被黑客窃取。</strong><br>身份证、驾照等也是同理。</p>
<p>1Password 还支持文件关联功能。假设有3份文件 A、B、C<br>都是关于同一事件，但出于某种原因你不能将它们合成一份文件，因此只能分别加密。再加上如果平时的命名习惯不好、加密文件过多，文件找起来就非常不方便。</p>
<p>这时文件关联功能就派上用场了，你可以在创建或编辑加密文档时，选择「链接现有文档」或者直接以关联方式添加新的加密文件，<br><strong>这样当你查看详情时，1Password 会贴心的将所有与之关联的文件都显示在页面中，供你查阅</strong> 。</p>
<h3 id="一些需要注意的设置项"><a href="#一些需要注意的设置项" class="headerlink" title="一些需要注意的设置项"></a>一些需要注意的设置项</h3><p>在「偏好设置」- 「安全」中，你会发现 1Password 会定时清除剪贴板的内容，这是因为每次你复制粘贴时，一些敏感信息会留在系统剪贴板上，<br><strong>如果不慎被第三方软件（如某狗，某度等厂商的输入法）上传，有可能造成损失</strong> 。你可以调整清除剪贴板的间隔时间，默认是90秒。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-7.png"></p>
<p>在「偏好设置」-「暸望塔」中，1Password 默认会追踪已保存的网站中是否存在安全漏洞，如果有，1Password<br>会提醒你尽快修改对应网站的密码。下方还有「检查易受攻击的密码」选项，这其实是调用<br><a href="https://haveibeenpwned.com/">haveibeenpwned</a> 的服务，看你的账号密码是不是在已经在社工库中了，<br><strong>如果有，你应该立刻停用这个密码，并修改将所有曾使用过这个密码的账号</strong> 。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-14.png"></p>
<p>在「偏好设置」-「账户」中，你可以给自己的 1Password 也设置一个双重验证，使用 Authy，Google<br>Authenticator，甚至硬件形式的 Yubikey 都可以。一旦设置完成， <strong>新设备如果要登录你的 1Password<br>账号，除了需要用户名、主密码、Secret key之外，还需要你在旧设备上进行额外的确认，多了一重保障</strong> 。</p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-9.png"></p>
<p>如果你有朋友也使用 1Password，那么分享账号就变得异常容易。在账号的详情页点击「分享」，就可以邮件、信息、打印、Airdrop（限 Apple<br>设备）形式把账号发送给朋友。示例便是以 iMessage 形式将账号分享出去，你可以清楚的看到这一长串链接的开头是<br>“onepassword://“，其他用户只要安装了 1Password，就可以通过链接自动保存其中的账号信息。  </p>
<p><img data-src="https://yishi.io/wp-content/uploads/2020/03/image-10.png"></p>
<p><strong>以上就是 1Password 简明教程的全部内容，[祝你1Password<br>使用愉快。](<a href="https://www.tkqlhce.com/click-9258661-13433658?url=https://1password.com/zh-">https://www.tkqlhce.com/click-9258661-13433658?url=https%3A%2F%2F1password.com%2Fzh-</a><br>cn%2F)</strong></p>
<p>参考：  </p>
<p>BGR - Exclusive: Apple to deploy 1Password to all 123,000 employees,<br>acquisition talks underway<br>1Password - Security and privacy<br>1Password - Heartbleed: Imagine no SSL encryption, it’s scary if you try<br>1Password - Use Watchtower to find passwords you need to change OpenSSL - The<br>Heartbleed Bug<br>Darthnull - 1Password Wrapping up with a few quick topics</p>
<p>4.7 6 votes</p>
<p>文章评分</p>
<p><a href="https://yishi.io/tag/1password/">1Password</a><a href="https://yishi.io/tag/%e4%bf%9d%e6%8a%a4%e8%b4%a6%e5%8f%b7/">保护账号</a><a href="https://yishi.io/tag/%e5%8a%a0%e5%af%86/">加密</a></p>
]]></content>
      <categories>
        <category>1password</category>
      </categories>
      <tags>
        <tag>1password</tag>
      </tags>
  </entry>
  <entry>
    <title>转载：小雅全家桶来啦，小白用户群晖部署 Emby 简明教程</title>
    <url>/2024/02/15/2024-02-15-xiaoya-emby/</url>
    <content><![CDATA[<h1 id="转载：小雅全家桶来啦，小白用户群晖部署-Emby-简明教程"><a href="#转载：小雅全家桶来啦，小白用户群晖部署-Emby-简明教程" class="headerlink" title="转载：小雅全家桶来啦，小白用户群晖部署 Emby 简明教程"></a>转载：小雅全家桶来啦，小白用户群晖部署 Emby 简明教程</h1><p><strong>前言：</strong></p>
<p>为什么要出这个教程？</p>
<p>在我写上一篇教程的时候，小雅已经更新了全家桶。经网友提醒，本次及时补上教程。鉴于网上有许多大神已经出了教程，本教程注重实操，对于像我这样的小白用户来说，简单无脑操作、能快速部署才是关键。</p>
<p><strong>安装全家桶有什么作用？</strong></p>
<p>因为小雅网盘挂载到本地但是 Emby 无法搜刮，本次全家桶将网盘上百T的影视资源进行整理搜刮部署到本地，实现 Emby 海报墙，优雅地看电影。</p>
<p><strong>使用环境：</strong></p>
<p>PVE、Unraid、ESXi、物理群晖、N1盒子都可以部署，安装需要160G以上硬盘空间也可以使用外接硬盘（U盘），本人使用PVE安装的群晖7.2。</p>
<p><em>本教程适用于群晖下部署</em></p>
<p><strong>正篇：</strong></p>
<p>为了确保安全顺利，请大家提前将群晖已安装的 Emby、小雅网盘容器先删除并清空群晖 Docker文件夹，跟着教程一步一步部署。不想删除原有 Emby 可以将8096端口改为8097。</p>
<p><strong>一、本地部署小雅网盘</strong></p>
<p>可以参考该教程：<a href="https://post.smzdm.com/p/a0qnlpqw/">https://post.smzdm.com/p/a0qnlpqw/</a></p>
<ol>
<li>在群晖下新建文件夹xiaoya（添加everyone读写权限）</li>
</ol>
<p><code>/volume1/docker/xiaoya</code></p>
<ol start="2">
<li><p>获取阿里云<code>mytoken.txt</code>、<code>myopentoken.txt</code>、<code>temp_transfer_folder_id.txt</code></p>
<ul>
<li><p><code>mytoken.txt</code>（推荐使用手机端）</p>
<p>  安卓：<a href="https://luoflower.com/128/">https://luoflower.com/128/</a></p>
<p>  苹果：<a href="https://aliyuntoken.vercel.app/">https://aliyuntoken.vercel.app/</a></p>
<p>  电脑：<a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive.html">https://alist.nn.ci/zh/guide/drivers/aliyundrive.html</a></p>
</li>
<li><p><code>myopentoken.txt</code></p>
<p>  <a href="https://alist.nn.ci/tool/aliyundrive/request">https://alist.nn.ci/tool/aliyundrive/request</a></p>
</li>
<li><p><code>temp_transfer_folder_id.txt</code> </p>
<p>  登陆阿里云盘<a href="https://www.aliyundrive.com/drive">https://www.aliyundrive.com/drive</a>，在资源盘下新建文件夹（xiaoya），点击进入后复制阿里云盘转存目录 folder id 填入 <code>temp_transfer_folder_id.txt</code></p>
</li>
</ul>
</li>
<li><p>将以上获取的密钥分别填入新建文本 <code>mytoken.txt</code>、<code>myopentoken.txt</code>、<code>temp_transfer_folder_id.txt</code>，上传至群晖 <code>docker/xiaoya</code> 文件夹中。</p>
</li>
<li><p>使用ssh登陆群晖 <code>sudo -i</code> 登陆root账号使用以下命令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always --name=<span class="string">&quot;xiaoya&quot;</span> -p 5678:80 -p 2345:2345 -p 2346:2346 -v /volume1/docker/xiaoya:/data xiaoyaliu/alist:latest</span><br></pre></td></tr></table></figure></li>
<li><p>在群晖 Docker下启动 <code>xiaoya</code> 容器，浏览器打开 <code>http://群晖ip地址:5678/</code>，需等5分钟左右刷新浏览器验证是否挂载成功。</p>
</li>
<li><p>实时清理自己阿里盘缓存命令安装 <code>xiaoyaleep</code></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl -s https://xiaoyahelper.zngle.cf/aliyun_clear.sh | tail -n +2)</span>&quot;</span> -s 3 -tg</span><br></pre></td></tr></table></figure>

<p> 每24h自动清除缓存在自己阿里云下小雅缓存。上面这个命令后缀 <code>-tg</code> 可以删除，这个是电报机器人接收通知。</p>
</li>
</ol>
<p><strong>二、挂载 Emby 全家桶</strong></p>
<p><strong>准备工作：</strong></p>
<ol>
<li><p>在 <code>/volume1/docker/xiaoya</code> 下新建两个文本文档</p>
<ul>
<li><code>docker_address.txt</code>，填写 <code>http://群晖ip地址:5678</code>（注意内容格式，没有/，本人就是因为格式问题导致部署失败浪费了大量时间）</li>
<li><code>emby_server.txt</code>，填写 <code>http://群晖ip地址:8096</code></li>
</ul>
</li>
<li><p>在 <code>/volume1/docker/xiaoya</code> 下新建文件夹 <code>media</code>（添加everyone读写权限）</p>
</li>
<li><p>登陆本地小雅网盘，<code>http://群晖ip地址:5678</code>，任意打开一个mp4视频，验证是否正常播放。出现“Failed to refresh token: Too Many Requests”说明刷新令牌次数过多需要关闭 <code>xiaoya</code> 容器等待1小时。</p>
</li>
</ol>
<p><strong>部署命令：</strong></p>
<p>使用ssh登陆群晖 <code>sudo -i</code> 登陆root账号使用以下命令</p>
<p><em>二选一</em></p>
<ul>
<li><p>使用 Emby 官方容器命令（无法调用核显硬解）</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl http://docker.xiaoya.pro/emby_plus.sh)</span>&quot;</span> -s /volume1/docker/xiaoya/media   /volume1/docker/xiaoya</span><br></pre></td></tr></table></figure></li>
<li><p>（推荐）使用第三方 Emby 容器命令，（可以调用核显硬解）</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl http://docker.xiaoya.pro/emby_plus.sh | sed &#x27;s#emby/embyserver#amilys/embyserver#&#x27;)</span>&quot;</span> -s /volume1/docker/xiaoya/media   /volume1/docker/xiaoya</span><br></pre></td></tr></table></figure></li>
</ul>
<p>调用核显需要高级权限，在群晖 Container Manager 找到 Emby 容器，停用后打开“使用高级权限”选项。</p>
<p>下载缓存时间较长，需要1~2小时甚至更长，根据网络和NAS性能，完成后会有提示请耐心等待，完成后重启 <code>xiaoya</code> 容器，使用官方 Emby 推荐使用2345端口号登陆 Emby“<code>http://群晖:2345</code>，用客户端进行硬解，使用第三方 Emby 2345、8096端口都可以使用。</p>
<p><strong>结尾：</strong></p>
<p>大家在部署过程中遇到问题，本人小白能力有限，可以去小雅网站查找或者官群里咨询，本教程注重的是实操，小雅美女不辞辛苦为大家谋福利每天修改BUG搜刮海报付出了大量心血，请大家尊重小雅劳动果实，打赏作者为知识付费。小雅还在不断进化请大家保持关注，小雅官网地址：<a href="alist.xiaoya.pro">alist.xiaoya.pro</a>。</p>
<p>作者声明本文无利益相关，欢迎值友理性交流，和谐讨论～<br><a href="/media%20%20%20/volume1/docker/xiaoya%20%20%20%20%20%60%60%60%20%20%E8%B0%83%E7%94%A8%E6%A0%B8%E6%98%BE%E9%9C%80%E8%A6%81%E9%AB%98%E7%BA%A7%E6%9D%83%E9%99%90%EF%BC%8C%E5%9C%A8%E7%BE%A4%E6%99%96%20Container%20Manager%20%E6%89%BE%E5%88%B0%20Emby%20%E5%AE%B9%E5%99%A8%EF%BC%8C%E5%81%9C%E7%94%A8%E5%90%8E%E6%89%93%E5%BC%80%E2%80%9C%E4%BD%BF%E7%94%A8%E9%AB%98%E7%BA%A7%E6%9D%83%E9%99%90%E2%80%9D%E9%80%89%E9%A1%B9%E3%80%82%20%20%E4%B8%8B%E8%BD%BD%E7%BC%93%E5%AD%98%E6%97%B6%E9%97%B4%E8%BE%83%E9%95%BF%EF%BC%8C%E9%9C%80%E8%A6%811~2%E5%B0%8F%E6%97%B6%E7%94%9A%E8%87%B3%E6%9B%B4%E9%95%BF%EF%BC%8C%E6%A0%B9%E6%8D%AE%E7%BD%91%E7%BB%9C%E5%92%8CNAS%E6%80%A7%E8%83%BD%EF%BC%8C%E5%AE%8C%E6%88%90%E5%90%8E%E4%BC%9A%E6%9C%89%E6%8F%90%E7%A4%BA%E8%AF%B7%E8%80%90%E5%BF%83%E7%AD%89%E5%BE%85%EF%BC%8C%E5%AE%8C%E6%88%90%E5%90%8E%E9%87%8D%E5%90%AF%20%60xiaoya%60%20%E5%AE%B9%E5%99%A8%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%AE%98%E6%96%B9%20Emby%20%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A82345%E7%AB%AF%E5%8F%A3%E5%8F%B7%E7%99%BB%E9%99%86%20Emby%E2%80%9C%60http://%E7%BE%A4%E6%99%96:2345%60%EF%BC%8C%E7%94%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9B%E8%A1%8C%E7%A1%AC%E8%A7%A3%EF%BC%8C%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%20Emby%202345%E3%80%818096%E7%AB%AF%E5%8F%A3%E9%83%BD%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E3%80%82%20%20**%E7%BB%93%E5%B0%BE%EF%BC%9A**%20%20%E5%A4%A7%E5%AE%B6%E5%9C%A8%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%EF%BC%8C%E6%9C%AC%E4%BA%BA%E5%B0%8F%E7%99%BD%E8%83%BD%E5%8A%9B%E6%9C%89%E9%99%90%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8E%BB%E5%B0%8F%E9%9B%85%E7%BD%91%E7%AB%99%E6%9F%A5%E6%89%BE%E6%88%96%E8%80%85%E5%AE%98%E7%BE%A4%E9%87%8C%E5%92%A8%E8%AF%A2%EF%BC%8C%E6%9C%AC%E6%95%99%E7%A8%8B%E6%B3%A8%E9%87%8D%E7%9A%84%E6%98%AF%E5%AE%9E%E6%93%8D%EF%BC%8C%E5%B0%8F%E9%9B%85%E7%BE%8E%E5%A5%B3%E4%B8%8D%E8%BE%9E%E8%BE%9B%E8%8B%A6%E4%B8%BA%E5%A4%A7%E5%AE%B6%E8%B0%8B%E7%A6%8F%E5%88%A9%E6%AF%8F%E5%A4%A9%E4%BF%AE%E6%94%B9BUG%E6%90%9C%E5%88%AE%E6%B5%B7%E6%8A%A5%E4%BB%98%E5%87%BA%E4%BA%86%E5%A4%A7%E9%87%8F%E5%BF%83%E8%A1%80%EF%BC%8C%E8%AF%B7%E5%A4%A7%E5%AE%B6%E5%B0%8A%E9%87%8D%E5%B0%8F%E9%9B%85%E5%8A%B3%E5%8A%A8%E6%9E%9C%E5%AE%9E%EF%BC%8C%E6%89%93%E8%B5%8F%E4%BD%9C%E8%80%85%E4%B8%BA%E7%9F%A5%E8%AF%86%E4%BB%98%E8%B4%B9%E3%80%82%E5%B0%8F%E9%9B%85%E8%BF%98%E5%9C%A8%E4%B8%8D%E6%96%AD%E8%BF%9B%E5%8C%96%E8%AF%B7%E5%A4%A7%E5%AE%B6%E4%BF%9D%E6%8C%81%E5%85%B3%E6%B3%A8%EF%BC%8C%E5%B0%8F%E9%9B%85%E5%AE%98%E7%BD%91%E5%9C%B0%E5%9D%80%EF%BC%9A%5Balist.xiaoya.pro%5D(alist.xiaoya.pro)%E3%80%82%20%20%E4%BD%9C%E8%80%85%E5%A3%B0%E6%98%8E%E6%9C%AC%E6%96%87%E6%97%A0%E5%88%A9%E7%9B%8A%E7%9B%B8%E5%85%B3%EF%BC%8C%E6%AC%A2%E8%BF%8E%E5%80%BC%E5%8F%8B%E7%90%86%E6%80%A7%E4%BA%A4%E6%B5%81%EF%BC%8C%E5%92%8C%E8%B0%90%E8%AE%A8%E8%AE%BA%EF%BD%9E">原文地址-什么值得买</a></p>
]]></content>
      <categories>
        <category>xiaoya</category>
      </categories>
      <tags>
        <tag>xiaoya</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 Mac Mini 和 Surge 以实现强大软路由</title>
    <url>/2024/03/11/2024-03-11-surge/</url>
    <content><![CDATA[<h1 id="配置-Mac-Mini-和-Surge-以实现强大软路由"><a href="#配置-Mac-Mini-和-Surge-以实现强大软路由" class="headerlink" title="配置 Mac Mini 和 Surge 以实现强大软路由"></a>配置 Mac Mini 和 Surge 以实现强大软路由</h1><ol>
<li><p><strong>准备设备</strong>：</p>
<ul>
<li>确保拥有 Mac Mini M2 基础型号。</li>
<li>准备一条稳定的网络连接，并使用网线直接连接到 Mac Mini。</li>
</ul>
</li>
<li><p><strong>安装 Surge</strong>：</p>
<ul>
<li>在 Mac 上安装 Surge，选择 Surge 4 或 Surge 5 版本均可。</li>
<li>启动 Surge，选择试用版本开始。</li>
</ul>
</li>
<li><p><strong>基础配置</strong>：</p>
<ul>
<li>在首次运行 Surge 时，会出现设置向导。仔细阅读并根据引导进行设置。</li>
<li>需要配置的主要项目包括系统代理、增强模式和网关模式。</li>
<li>准备一份配置文件，其中应包含所需的节点和规则。如果你的服务提供商提供配置文件，可以直接使用；如果没有提供，可以使用订阅转换工具生成配置文件。</li>
</ul>
</li>
<li><p><strong>网络结构配置</strong>：</p>
<ul>
<li>根据需求选择将 Mac Mini 作为次级路由器还是主路由器。</li>
<li><strong>次级路由器</strong>：将 Mac Mini 通过网线连接到家庭现有路由器。在 Surge 中设置设备，使用系统代理和增强模式。</li>
<li><strong>主路由器</strong>：如果需要，可以通过购买 USB 2.5G 网络卡来提升网络速度。将 Mac Mini 通过网线连接到交换机，并设置为拨号上网，承担家庭网络的主路由器角色。</li>
</ul>
</li>
<li><p><strong>DHCP 配置</strong>：</p>
<ul>
<li>在 Surge 中打开 DHCP 功能。如果 Mac Mini 作为主路由器，需要在家庭现有路由器中关闭 DHCP 服务，并让 Surge 接管 DHCP 管理。</li>
<li>配置网络设备选择，选择通过网线连接的网络接口。</li>
<li>根据提示完成 DHCP 服务器设置。默认设置通常适用，但如果你了解相关知识，也可以自定义设置。</li>
</ul>
</li>
<li><p><strong>设备连接</strong>：</p>
<ul>
<li>确保需要通过 Surge 网络访问的设备的网关设置指向 Mac Mini 的 IP 地址。不需要翻墙的设备可以保留原有的网关设置，不会受到影响。</li>
<li>对于每个需要使用 Surge 网络的设备，可能需要手动设置使用 Mac Mini 作为网关。</li>
</ul>
</li>
</ol>
<p>这是一个简化的操作流程概览。具体步骤可能会根据你的网络环境和设备配置有所不同。强烈建议在进行配置之前详细阅读 Surge 的官方文档和指南，以确保正确设置。</p>
<p><a href="https://kb.nssurge.com/surge-knowledge-base/v/zh/faq/common-faqs#zeng-qiang-mo-shi-jian-rong-xing-wen-ti">Surge增强模式</a><br><a href="https://kb.nssurge.com/surge-knowledge-base/v/zh/guidelines/ponte">Surge Ponte</a></p>
]]></content>
      <categories>
        <category>Surge</category>
      </categories>
      <tags>
        <tag>Surge</tag>
      </tags>
  </entry>
  <entry>
    <title>将小爱音箱接入ChatGPT（使用群晖Docker）</title>
    <url>/2024/04/08/2024-04-08-xiaogpt/</url>
    <content><![CDATA[<p>将小爱音箱接入ChatGPT（使用群晖Docker）</p>
<p>以下是整理和概括的步骤，用于将小爱音箱接入ChatGPT，使用群晖Docker和开源项目实现：<a href="https://github.com/yihong0618/xiaogpt">xiaogpt</a></p>
<h3 id="1-获取设备-DID-和-Hardware"><a href="#1-获取设备-DID-和-Hardware" class="headerlink" title="1. 获取设备 DID 和 Hardware"></a>1. 获取设备 DID 和 Hardware</h3><h4 id="使用-Yonsm-MiService-项目："><a href="#使用-Yonsm-MiService-项目：" class="headerlink" title="使用 Yonsm/MiService 项目："></a>使用 Yonsm/MiService 项目：</h4><ul>
<li><strong>环境要求</strong>：Ubuntu 系统，安装 Python 环境。</li>
<li><strong>项目地址</strong>：<a href="https://github.com/Yonsm/MiService">https://github.com/Yonsm/MiService</a></li>
<li><strong>操作步骤</strong>：<ol>
<li>克隆项目：<code>git clone https://github.com/Yonsm/MiService.git</code></li>
<li>安装依赖项：<code>pip install aiohttp</code></li>
<li>运行命令：<code>python3 micli.py mina</code></li>
<li>成功执行后，会返回设备的 “miotDID” 和 “hardware”。</li>
<li>”name“: ”小爱音箱Pro2“,<br>”model“: ”xiaomi.wifispeaker.lx06“,<br>”did“: ”xxxxxxxx“,<br>”token“: ”xxxxxxxxxxxxxx“</li>
</ol>
</li>
</ul>
<h3 id="2-配置文件内容示例"><a href="#2-配置文件内容示例" class="headerlink" title="2. 配置文件内容示例"></a>2. 配置文件内容示例</h3><p>创建配置文件内容如下，包含必要的账户信息、密钥以及设备信息等：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hardware&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LX06&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;account&quot;</span><span class="punctuation">:</span> <span class="string">&quot;输入账号&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;输入密码&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;openai_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sk-Ab2xxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;glm_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bard_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;serpapi_api_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cookie&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mi_did&quot;</span><span class="punctuation">:</span> <span class="string">&quot;输入DID&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;use_command&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mute_xiaoai&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;verbose&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chatgptapi&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mi&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;edge_tts_voice&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh-CN-XiaoxiaoNeural&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请用100字以内回答&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;请&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;change_prompt_keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;更改提示词&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start_conversation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;继续刚才的问题&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;end_conversation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;结束刚才的问题&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;proxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://192.xxx.xx.xx:7890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;api_base&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://192.xxx.xx.xx:8888/v1 or https://abc-def.openai.azure.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gpt_options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-上传配置文件至群晖"><a href="#3-上传配置文件至群晖" class="headerlink" title="3. 上传配置文件至群晖"></a>3. 上传配置文件至群晖</h3><ol>
<li>在 Docker 目录下创建一个 <code>xiaogpt</code> 文件夹。</li>
<li>将配置文件保存为 <code>config.json</code>。</li>
<li>上传到 <code>/docker/xiaogpt/config</code> 目录下。</li>
</ol>
<h3 id="4-启动服务"><a href="#4-启动服务" class="headerlink" title="4. 启动服务"></a>4. 启动服务</h3><p>使用Docker命令启动服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -v /volume1/docker/xiaogpt/config:/config yihong0618/xiaogpt —config=/config/config.json</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：<code>/volume1/docker/xiaogpt/config</code> 路径需替换为你创建的配置文件实际路径。</p>
<h3 id="5-检查服务状态"><a href="#5-检查服务状态" class="headerlink" title="5. 检查服务状态"></a>5. 检查服务状态</h3><ul>
<li>进入群晖容器管理器，确认是否存在名为 类似<code>competent_hertz</code> 的容器。</li>
<li>查看日志，确认小爱音箱与 GPT 的对话是否正常。</li>
</ul>
<p><strong>更新</strong>（20240114）：运行上述命令后，将只启动一个名为类似 <code>competent_hertz</code> 的容器，确认该容器运行正常即可。</p>
<p>通过上述步骤，你可以将小爱音箱与 ChatGPT 连接起来，使其支持更智能的对话功能。</p>
<h3 id="6-踩坑SSL报错"><a href="#6-踩坑SSL报错" class="headerlink" title="6. 踩坑SSL报错"></a>6. 踩坑SSL报错</h3><p>Navigate to<br>cd /Applications/Python\ 3.7/</p>
<p>Click on Install Certificates.command</p>
<p>This should solve it.</p>
]]></content>
      <categories>
        <category>chatgpt</category>
      </categories>
      <tags>
        <tag>chatgpt</tag>
      </tags>
  </entry>
  <entry>
    <title>Cloudflare + Gmail + Resend 十分钟轻松拥有免费的企业邮箱</title>
    <url>/2024/06/30/2024-04-21-CloudflareGmailResend/</url>
    <content><![CDATA[<p>创建一个企业邮箱对于提升你的品牌形象和管理邮件非常重要，尤其是对于独立开发者和初创公司来说。本文介绍了一个完全免费的方法来设置企业邮箱，利用Cloudflare、Gmail和Resend的结合使用。以下是详细步骤：</p>
<h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>确保你已拥有一个域名，并且此域名的DNS管理权在Cloudflare上。</p>
<h1 id="步骤1：设置Cloudflare邮件转发至Gmail"><a href="#步骤1：设置Cloudflare邮件转发至Gmail" class="headerlink" title="步骤1：设置Cloudflare邮件转发至Gmail"></a>步骤1：设置Cloudflare邮件转发至Gmail</h1><ol>
<li>登录Cloudflare，找到「电子邮件路由」选项，进入。</li>
<li>在目标规则标签中启用Catch-All功能，并点击编辑。</li>
<li>设置转发规则，将所有邮件都转发到你的Gmail邮箱。<br> • 利用Gmail的”+“功能，例如<a href="mailto:&#121;&#x6f;&#117;&#114;&#110;&#97;&#x6d;&#101;&#43;&#97;&#x6e;&#121;&#116;&#x61;&#x67;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#111;&#109;">&#121;&#x6f;&#117;&#114;&#110;&#97;&#x6d;&#101;&#43;&#97;&#x6e;&#121;&#116;&#x61;&#x67;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#111;&#109;</a>，可以帮助你更好地管理邮件。</li>
</ol>
<h1 id="步骤2：在Resend获取API-Key"><a href="#步骤2：在Resend获取API-Key" class="headerlink" title="步骤2：在Resend获取API Key"></a>步骤2：在Resend获取API Key</h1><ol>
<li>创建Resend账户并登陆，找到API Keys标签下申请新的API Key。</li>
<li>记下或保存SMTP设置信息，稍后设置Gmail时会用到。</li>
</ol>
<h1 id="步骤3：配置Gmail利用Resend服务发送邮件"><a href="#步骤3：配置Gmail利用Resend服务发送邮件" class="headerlink" title="步骤3：配置Gmail利用Resend服务发送邮件"></a>步骤3：配置Gmail利用Resend服务发送邮件</h1><ol>
<li>在Gmail设置中找到「账户和导入」或「账户」，点击「添加另一个邮件地址」。</li>
<li>输入你在步骤1设置的企业邮箱名称和地址。</li>
<li>输入步骤2中获得的Resend SMTP服务信息，使用获取的API Key作为密码。</li>
<li>完成SMTP设置后，查收Gmail发出的确认邮件并确认。</li>
</ol>
<h1 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h1><p>现在，你就可以使用自己的企业邮箱来发送和接收邮件了，而且这整个流程是完全免费的。适用于独立开发者、小企业或任何预算有限但希望建立专业形象的人士。</p>
<p>查看详细信息和示意图，请访问原始文章：Cloudflare + Gmail + Resend 完全免费企业邮箱设置教程。</p>
<p>这个方法不仅经济实惠，同时提供了强大的灵活性和高度的定制性，让你的通信更加专业，同时也为你的业务或个人品牌增添亮点。</p>
<p>原文链接：<a href="https://cleanclip.cc/zh/developer/cloudflare-worker-gmail-resend-enterprise-email">https://cleanclip.cc/zh/developer/cloudflare-worker-gmail-resend-enterprise-email</a></p>
]]></content>
      <categories>
        <category>Gmail</category>
      </categories>
      <tags>
        <tag>Gmail</tag>
      </tags>
  </entry>
  <entry>
    <title>Bitwarden密码管理器（使用群晖Docker）</title>
    <url>/2024/04/21/2024-04-21-bitwarden/</url>
    <content><![CDATA[<h3 id="Vaultwarden功能完善与数据安全"><a href="#Vaultwarden功能完善与数据安全" class="headerlink" title="Vaultwarden功能完善与数据安全"></a>Vaultwarden功能完善与数据安全</h3><p>Vaultwarden是一款开源的密码管理器，使用Rust编写，是非官方Bitwarden服务器实现。它提供了强大的密码管理功能，并支持多种客户端和浏览器插件。</p>
<h4 id="数据实时同步功能"><a href="#数据实时同步功能" class="headerlink" title="数据实时同步功能"></a>数据实时同步功能</h4><p>作为多客户端密码管理软件，实现密码数据在多客户端上实时更新至关重要。启用WebSocket通知是一个解决方案，它用于将相关事件通知给浏览器、Bitwarden的桌面和浏览器扩展客户端。</p>
<p>在Vaultwarden中，默认情况下WebSocket已经集成到80端口中，对于反向代理用户，需要正确配置以传递WebSocket Upgrade和Connection标头。</p>
<h4 id="启用移动客户端推送通知"><a href="#启用移动客户端推送通知" class="headerlink" title="启用移动客户端推送通知"></a>启用移动客户端推送通知</h4><p>从Vaultwarden 1.29.0版本开始，可以启用移动客户端的推送通知，无需手动同步即可实现个人密码库的自动同步。</p>
<ul>
<li>访问<a href="https://bitwarden.com/host/">Bitwarden官网</a>获取INSTALLATION ID和KEY。</li>
<li>在docker-compose.yaml中添加相应的环境变量。</li>
<li>重启容器后，即可启用推送通知。</li>
</ul>
<h4 id="浏览器插件使用移动设备登录"><a href="#浏览器插件使用移动设备登录" class="headerlink" title="浏览器插件使用移动设备登录"></a>浏览器插件使用移动设备登录</h4><p>通过设置，可以实现使用移动设备登录浏览器插件，而无需每次输入长密码。</p>
<ol>
<li>在手机客户端设置中打开“使用此设备批准来自其他设备的登录请求”选项。</li>
<li>在浏览器插件设置中，将密码库超时动作设置为注销。</li>
<li>重新登录时，选择使用设备登录，确认手机客户端上的登录请求即可。</li>
</ol>
<h4 id="关于数据安全"><a href="#关于数据安全" class="headerlink" title="关于数据安全"></a>关于数据安全</h4><ul>
<li>设置SIGNUPS_ALLOWED=false和INVITATIONS_ALLOWED=false，禁止新用户注册和邀请。</li>
<li>禁用WEB_VAULT_ENABLED，减小暴露面，但不影响客户端使用。</li>
<li>接入cloudflare，并自定义规则，如禁止国外IP访问。</li>
<li>定期备份数据，并进行异地备份。</li>
<li>避免在相同地方备份数据，养成云端备份和密码保存在Vaultwarden的习惯。</li>
</ul>
]]></content>
      <categories>
        <category>Nas</category>
      </categories>
      <tags>
        <tag>Nas</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL证书</title>
    <url>/2024/10/07/2024-10-07-Cloudflare-SSL/</url>
    <content><![CDATA[<h1 id="安装和配置-Certbot-及-Nginx-的完整教程"><a href="#安装和配置-Certbot-及-Nginx-的完整教程" class="headerlink" title="安装和配置 Certbot 及 Nginx 的完整教程"></a>安装和配置 Certbot 及 Nginx 的完整教程</h1><h2 id="1-安装-Certbot"><a href="#1-安装-Certbot" class="headerlink" title="1. 安装 Certbot"></a>1. 安装 Certbot</h2><p>apt update<br>apt install certbot</p>
<h2 id="2-配置-DNS"><a href="#2-配置-DNS" class="headerlink" title="2. 配置 DNS"></a>2. 配置 DNS</h2><p>登录 Cloudflare，选择您的域名，确保 DNS 记录中开启小黄云（代理模式）。</p>
<h2 id="3-确保-SSL-TLS-加密模式"><a href="#3-确保-SSL-TLS-加密模式" class="headerlink" title="3. 确保 SSL/TLS 加密模式"></a>3. 确保 SSL/TLS 加密模式</h2><p>将 SSL/TLS 加密模式设置为 灵活。</p>
<h2 id="4-申请证书"><a href="#4-申请证书" class="headerlink" title="4. 申请证书"></a>4. 申请证书</h2><p>运行以下命令：</p>
<p>certbot certonly —manual —preferred-challenges dns -d *.cyr580.top</p>
<p>按照提示添加 TXT 记录并验证。</p>
<h2 id="5-安装-Nginx"><a href="#5-安装-Nginx" class="headerlink" title="5. 安装 Nginx"></a>5. 安装 Nginx</h2><p>apt install nginx</p>
<h2 id="6-配置-Nginx"><a href="#6-配置-Nginx" class="headerlink" title="6. 配置 Nginx"></a>6. 配置 Nginx</h2><p>编辑 Nginx 配置文件，设置 SSL 证书路径：</p>
<figure class="highlight plaintext"><figcaption><span>&#123;</span></figcaption><table><tr><td class="code"><pre><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name cyr580.top *.cyr580.top;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/cyr580.top/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/cyr580.top/privkey.pem;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:3002;</span><br><span class="line">        # 其他代理设置</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启 Nginx：</p>
<p>systemctl restart nginx</p>
<h2 id="7-自动续签"><a href="#7-自动续签" class="headerlink" title="7. 自动续签"></a>7. 自动续签</h2><p>设置自动续签，编辑 crontab：</p>
<p>crontab -e</p>
<p>添加以下行：</p>
<p>0 0 * * * certbot renew —quiet</p>
<h2 id="8-Cloudflare-原始-HTTPS-规则"><a href="#8-Cloudflare-原始-HTTPS-规则" class="headerlink" title="8. Cloudflare 原始 HTTPS 规则"></a>8. Cloudflare 原始 HTTPS 规则</h2><ol>
<li>配置 DNS：确保 DNS 中开启小黄云。</li>
<li>SSL/TLS 模式：设置为灵活。</li>
<li>创建规则：点击“规则”&gt;“Origin Rules”，创建规则，设置字段为主机名，通配符等于 *.cyr580.top，重定向到服务器的 3002 端口。</li>
</ol>
<h2 id="9-安装宝塔面板"><a href="#9-安装宝塔面板" class="headerlink" title="9. 安装宝塔面板"></a>9. 安装宝塔面板</h2><ol>
<li>下载并运行安装脚本：</li>
</ol>
<p>wget -O install.sh <a href="http://install.sh/">http://install.sh</a><br>bash install.sh</p>
<p>按照提示完成安装。</p>
<h2 id="10-使用-Docker-和-Docker-Compose"><a href="#10-使用-Docker-和-Docker-Compose" class="headerlink" title="10. 使用 Docker 和 Docker Compose"></a>10. 使用 Docker 和 Docker Compose</h2><ol>
<li>安装 Docker：</li>
</ol>
<p>apt install docker.io<br>systemctl enable —now docker</p>
<ol start="2">
<li>安装 Docker Compose：</li>
</ol>
<p>apt install docker-compose</p>
<p>总结</p>
<p>以上步骤完成后，您的域名将能够通过 HTTPS 访问，SSL 证书自动续签，并且在 Cloudflare 上配置了适当的原始 HTTPS 规则。如果您在任何步骤遇到问题，请随时询问！</p>
]]></content>
      <categories>
        <category>Cloudflare</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>释放AI超能力：ChatWise MCP 玩转指南，打造你的智能助理</title>
    <url>/2025/04/13/2025-04-13-mcp/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>你是否觉得AI大模型的能力还不够强大？是否渴望它们能像专家一样，高效地搜索信息、系统地管理知识，甚至智能地操控浏览器？那么，MCP（Model Context Protocol）正是你解锁AI超能力的钥匙。本文将带你深入了解MCP，并以ChatWise客户端为例，手把手教你配置和使用MCP服务，打造真正属于你的智能助理。</p>
<h3 id="什么是MCP？"><a href="#什么是MCP？" class="headerlink" title="什么是MCP？"></a>什么是MCP？</h3><p>MCP（模型上下文协议），全称Model Context Protocol，是由Anthropic公司提出的一个开放标准。它赋予AI模型访问外部工具和服务的能力，从而突破自身能力的限制，实现更广泛的应用场景。通过MCP，我们可以让AI模型：</p>
<ul>
<li>  <strong>无缝连接互联网</strong>：实时进行网页搜索，获取最新资讯和动态。</li>
<li>  <strong>智能操作外部应用</strong>：自动化控制浏览器，高效管理各类文件。</li>
<li>  <strong>安全访问私有数据</strong>：连接本地知识库，对接企业内部系统，实现定制化服务。</li>
</ul>
<p>简而言之，MCP就像一个强大的通用接口，让AI模型能够与现实世界进行深度互动，从而完成更加复杂和个性化的任务。</p>
<h3 id="准备工作：工欲善其事，必先利其器"><a href="#准备工作：工欲善其事，必先利其器" class="headerlink" title="准备工作：工欲善其事，必先利其器"></a>准备工作：工欲善其事，必先利其器</h3><p>在开始配置MCP之前，我们需要安装一些必要的工具。请根据你的操作系统，选择相应的安装方式。</p>
<h4 id="1-安装uvx-Python-MCP服务运行器"><a href="#1-安装uvx-Python-MCP服务运行器" class="headerlink" title="1. 安装uvx (Python MCP服务运行器)"></a>1. 安装uvx (Python MCP服务运行器)</h4><p><code>uvx</code> 是一个轻量级的Python MCP服务运行器，它是<code>uv</code>项目的一部分。<code>uv</code> 是一个现代化的Python包安装器和解析器，旨在显著提升Python项目的依赖管理速度和效率。</p>
<ul>
<li><p><strong>Windows</strong>:</p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell <span class="literal">-ExecutionPolicy</span> ByPass <span class="literal">-c</span> “<span class="built_in">irm</span> https://astral.sh/uv/install.ps1 | <span class="built_in">iex</span>”</span><br></pre></td></tr></table></figure></li>
<li><p><strong>macOS/Linux</strong>:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LsSf https://astral.sh/uv/install.sh | sh</span><br></pre></td></tr></table></figure></li>
</ul>
<p>安装完成后，请务必将 <code>uv</code> 添加到你的系统环境变量中，以便在命令行中能够直接调用 <code>uvx</code> 命令。</p>
<h4 id="2-安装npx-Node-js-MCP服务运行器"><a href="#2-安装npx-Node-js-MCP服务运行器" class="headerlink" title="2. 安装npx (Node.js MCP服务运行器)"></a>2. 安装npx (Node.js MCP服务运行器)</h4><p><code>npx</code> 是Node.js自带的包执行器，用于便捷地运行基于Node.js开发的MCP服务。如果你尚未安装Node.js，请前往<a href="https://nodejs.org/">Node.js官网</a>下载并安装最新版本。安装Node.js时，<code>npm</code> (Node.js包管理器) 也会一并安装。<code>npx</code> 通常随 <code>npm</code> 一起发布，因此安装Node.js后，你就可以直接在命令行中使用 <code>npx</code> 命令了。</p>
<h3 id="获取MCP服务：巧妇难为无米之炊"><a href="#获取MCP服务：巧妇难为无米之炊" class="headerlink" title="获取MCP服务：巧妇难为无米之炊"></a>获取MCP服务：巧妇难为无米之炊</h3><p>拥有了运行MCP服务的工具，接下来我们需要寻找可用的MCP服务。以下是一些常用的MCP服务获取渠道：</p>
<ul>
<li><strong>精选MCP聚合网站</strong>：<ul>
<li>  **<a href="https://mcp.so/zh">mcp.so</a>**：汇集了各种类型的MCP服务，你可以浏览并选择需要的服务，网站会自动生成可导入的JSON配置。</li>
<li>  <strong><a href="https://smithery.ai/">Smithery - Model Context Protocol Registry</a></strong>: 提供了丰富的MCP服务，包括Web搜索、Memory Management、Browser Automation等，可以满足你不同的应用场景。</li>
</ul>
</li>
<li>  <strong>开源社区GitHub</strong>：在GitHub上搜索 “MCP server” 或 “Model Context Protocol”，你可以发现许多由开发者贡献的开源MCP服务，这些服务往往具有高度的灵活性和可定制性。</li>
<li>  <strong>技术社区论坛</strong>：积极参与AI技术社区的讨论，与其他开发者交流经验，获取最新的MCP服务分享和推荐。</li>
</ul>
<h3 id="ChatWise配置：化繁为简，一键导入"><a href="#ChatWise配置：化繁为简，一键导入" class="headerlink" title="ChatWise配置：化繁为简，一键导入"></a>ChatWise配置：化繁为简，一键导入</h3><p>ChatWise 客户端支持直接从JSON新建MCP，极大地简化了配置过程，让你可以快速上手体验MCP的强大功能。</p>
<ol>
<li><p><strong>导入JSON配置</strong>：</p>
<ul>
<li>  在ChatWise客户端中，点击界面左下角的加号按钮，选择“从剪切板导入Json”选项。</li>
<li>  将从MCP网站或GitHub复制的JSON配置粘贴到剪切板，ChatWise会自动解析并导入配置信息。</li>
</ul>
</li>
<li><p><strong>手动添加MCP服务器</strong> (适用于没有提供JSON配置的MCP服务)：</p>
<ul>
<li>  点击ChatWise界面左下角的头像，进入设置页面，找到“工具”选项，点击左下角的加号按钮即可手动添加MCP服务器。</li>
<li>根据MCP服务提供商的说明，填写以下关键信息：<ul>
<li>  <strong>类型</strong>：如果MCP服务提供的是JSON格式的配置信息，选择 “Stdio” 类型。</li>
<li>  <strong>ID</strong>：为你的MCP服务自定义一个易于识别的名称。</li>
<li>  <strong>命令和环境变量</strong>：将从MCP网站获取的Json代码发送给AI模型（例如Claude或Deepseek），让其将Json代码转换为可执行的命令，并将所需的环境变量单独列出。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="实战演练：MCP应用案例"><a href="#实战演练：MCP应用案例" class="headerlink" title="实战演练：MCP应用案例"></a>实战演练：MCP应用案例</h3><h4 id="1-构建本地知识管理系统"><a href="#1-构建本地知识管理系统" class="headerlink" title="1. 构建本地知识管理系统"></a>1. 构建本地知识管理系统</h4><p>通过使用 <code>uvx basic-memory mcp</code> 命令，你可以构建一个本地知识管理系统，用于系统化地整理和存储AI对话中的知识，有效避免信息碎片化的问题。这个MCP服务可以将你的对话历史安全地存储在本地，并允许AI模型随时检索和利用这些信息，从而提升对话的连贯性和智能化程度。</p>
<h4 id="2-实现智能网页内容获取"><a href="#2-实现智能网页内容获取" class="headerlink" title="2. 实现智能网页内容获取"></a>2. 实现智能网页内容获取</h4><p>借助 <code>uvx mcp-server-fetch</code> 命令，你可以轻松实现智能化的网页内容获取功能。结合其他搜索MCP服务，你可以构建一个类似深度搜索的强大工具。例如，你可以先使用搜索MCP服务找到与特定主题相关的网页链接，然后使用 <code>mcp-server-fetch</code> 命令自动抓取网页内容，最后利用AI模型对抓取的内容进行深入分析和总结，提取关键信息。</p>
<h3 id="常见问题及解决方案"><a href="#常见问题及解决方案" class="headerlink" title="常见问题及解决方案"></a>常见问题及解决方案</h3><ul>
<li>  <strong>Windows环境问题</strong>：由于Windows操作系统在环境配置和网络设置方面可能存在一些复杂性，因此在配置过程中可能会遇到一些问题。建议参考相关的Windows环境配置教程或寻求专业人士的帮助。</li>
<li>  <strong>“命令未找到”错误</strong>：当你在命令行中执行命令时，如果系统提示“命令未找到”错误，请尝试使用命令的完整路径来执行，以确保系统能够正确识别该命令。</li>
<li>  <strong>GPT-4o 兼容性</strong>：需要注意的是，GPT-4o 和 GPT-4o-mini 等较新的AI模型可能无法完全兼容所有的MCP服务。在使用过程中，请关注MCP服务的兼容性说明，并及时更新相关组件。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过本文详尽的教程，相信你已经全面掌握了ChatWise MCP的配置和使用方法。现在，就让我们一起开启探索MCP的无限可能，打造真正属于你的智能助理吧！</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>希望本文能够帮助你更好地理解和应用ChatWise MCP技术。如果你在实践过程中遇到任何问题，欢迎在评论区留言，与我们共同探讨，共同进步！</p>
]]></content>
      <categories>
        <category>MCP</category>
      </categories>
      <tags>
        <tag>MCP</tag>
      </tags>
  </entry>
  <entry>
    <title>TBXark/mcp-proxy 构建你的 MCP 代理服务器</title>
    <url>/2025/04/30/2025-04-30-mcpproxy/</url>
    <content><![CDATA[<h2 id="TBXark-mcp-proxy-教程：构建你的-MCP-代理服务器"><a href="#TBXark-mcp-proxy-教程：构建你的-MCP-代理服务器" class="headerlink" title="TBXark/mcp-proxy 教程：构建你的 MCP 代理服务器"></a>TBXark/mcp-proxy 教程：构建你的 MCP 代理服务器</h2><p><strong>项目地址:</strong> <a href="https://github.com/TBXark/mcp-proxy">https://github.com/TBXark/mcp-proxy</a></p>
<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p><code>mcp-proxy</code> 是一个强大的 MCP (Model Context Protocol) 代理服务器，旨在简化和统一对多个 MCP 资源服务器的访问。通过将多个 MCP 服务器聚合到一个单一的 HTTP 入口点，<code>mcp-proxy</code> 极大地简化了客户端配置和管理，尤其是在复杂的 AI 应用场景中。</p>
<h3 id="什么是-MCP？"><a href="#什么是-MCP？" class="headerlink" title="什么是 MCP？"></a>什么是 MCP？</h3><p>MCP (Model Context Protocol) 是一种用于在不同系统或服务之间传递上下文信息的协议。在人工智能领域，MCP 充当桥梁，允许在模型的不同组件之间高效地共享数据、配置和状态信息。这对于构建模块化、可扩展且易于维护的 AI 系统至关重要。</p>
<h3 id="为什么需要-MCP-代理服务器？"><a href="#为什么需要-MCP-代理服务器？" class="headerlink" title="为什么需要 MCP 代理服务器？"></a>为什么需要 MCP 代理服务器？</h3><p>在微服务架构盛行的今天，一个 AI 应用可能依赖于多个独立的 MCP 服务器来提供不同的功能。直接与这些服务器交互会带来以下挑战：</p>
<ul>
<li>  <strong>配置复杂性:</strong> 客户端需要维护多个服务器的地址和认证信息。</li>
<li>  <strong>管理困难:</strong> 难以对多个 MCP 服务器进行统一的管理和监控。</li>
<li>  <strong>安全风险:</strong> 每个客户端都需要单独进行权限控制，增加了安全漏洞的风险。</li>
</ul>
<p><code>mcp-proxy</code> 通过以下方式解决了这些问题：</p>
<ul>
<li>  <strong>统一入口:</strong> 将多个 MCP 服务器聚合到一个地址，客户端只需与代理服务器交互。</li>
<li>  <strong>简化配置:</strong> 客户端只需要配置一个代理服务器地址，无需关心后端多个 MCP 服务器的细节。</li>
<li>  <strong>灵活管理:</strong> 可以对 MCP 服务器进行统一的管理和控制，例如权限控制、流量控制、日志记录等。</li>
<li>  <strong>增强安全性:</strong> 集中进行身份验证和授权，降低安全风险。</li>
</ul>
<h3 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h3><ul>
<li>  <strong>多 MCP 客户端代理:</strong> 连接到多个 MCP 资源服务器，并将它们的功能整合到一个统一的接口中。</li>
<li>  <strong>SSE (Server-Sent Events) 支持:</strong> 提供 SSE 服务器，允许客户端接收来自 MCP 服务器的实时更新。这对于需要实时反馈的应用场景非常有用。</li>
<li>  <strong>灵活的配置选项:</strong> 支持多种客户端类型 (<code>stdio</code>, <code>sse</code> 和 <code>streamable-http</code>)，并提供丰富的配置选项，以满足不同的需求。</li>
<li>  <strong>工具过滤:</strong> 允许你根据需要选择性地启用或禁用特定的工具，从而增强系统的安全性并减少不必要的资源消耗。</li>
<li>  <strong>认证和授权:</strong> 支持基于令牌的身份验证，确保只有授权的客户端才能访问 MCP 服务器。</li>
<li>  <strong>日志记录:</strong> 记录所有请求和响应，方便进行故障排除和性能分析。</li>
<li>  <strong>可扩展性:</strong> 易于扩展，可以添加新的 MCP 服务器和功能。</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>mcp-proxy</code> 提供了多种安装方式，你可以根据自己的需求选择最适合的方式。</p>
<h4 id="1-从源码构建"><a href="#1-从源码构建" class="headerlink" title="1. 从源码构建"></a>1. 从源码构建</h4><p>这是最灵活的安装方式，允许你自定义构建过程。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/TBXark/mcp-proxy.git</span><br><span class="line">cd mcp-proxy</span><br><span class="line">make build</span><br><span class="line">./build/mcp-proxy --config path/to/config.json</span><br></pre></td></tr></table></figure>

<p>详细步骤：</p>
<ol>
<li> <strong>克隆代码仓库:</strong> 使用 <code>git clone</code> 命令将 <code>mcp-proxy</code> 的代码仓库克隆到你的本地机器上。</li>
<li> <strong>进入项目目录:</strong> 使用 <code>cd</code> 命令进入 <code>mcp-proxy</code> 目录。</li>
<li> <strong>构建项目:</strong> 使用 <code>make build</code> 命令编译项目。这将会生成一个可执行文件 <code>mcp-proxy</code> 在 <code>build</code> 目录下。</li>
<li> <strong>运行代理服务器:</strong> 使用 <code>./build/mcp-proxy --config path/to/config.json</code> 命令运行 <code>mcp-proxy</code>，并指定配置文件的路径。</li>
</ol>
<p><strong>依赖:</strong></p>
<ul>
<li>  Go 语言环境 (&gt;= 1.18)</li>
<li>  Make</li>
</ul>
<h4 id="2-使用-Go-安装"><a href="#2-使用-Go-安装" class="headerlink" title="2. 使用 Go 安装"></a>2. 使用 Go 安装</h4><p>如果你已经安装了 Go 语言环境，可以使用 <code>go install</code> 命令快速安装 <code>mcp-proxy</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go install github.com/TBXark/mcp-proxy@latest</span><br></pre></td></tr></table></figure>

<p>这将会将 <code>mcp-proxy</code> 安装到你的 <code>$GOPATH/bin</code> 目录下。确保 <code>$GOPATH/bin</code> 目录已经添加到你的 <code>PATH</code> 环境变量中。</p>
<h4 id="3-使用-Docker"><a href="#3-使用-Docker" class="headerlink" title="3. 使用 Docker"></a>3. 使用 Docker</h4><p>Docker 是一个流行的容器化平台，可以让你轻松地部署和管理 <code>mcp-proxy</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9090:9090 -v /path/to/config.json:/config/config.json ghcr.io/tbxark/mcp-proxy:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">docker run -d -p 9090:9090 ghcr.io/tbxark/mcp-proxy:latest --config https://example.com/path/to/config.json</span><br></pre></td></tr></table></figure>

<p>详细说明：</p>
<ul>
<li>  <code>-d</code>: 在后台运行容器。</li>
<li>  <code>-p 9090:9090</code>: 将主机的 9090 端口映射到容器的 9090 端口。你可以根据需要修改端口号。</li>
<li>  <code>-v /path/to/config.json:/config/config.json</code>: 将主机上的配置文件挂载到容器中。你需要将 <code>/path/to/config.json</code> 替换为你实际的配置文件路径。</li>
<li>  <code>ghcr.io/tbxark/mcp-proxy:latest</code>: <code>mcp-proxy</code> 的 Docker 镜像。</li>
<li>  <code>--config https://example.com/path/to/config.json</code>:  你也可以使用一个 URL 作为配置文件。</li>
</ul>
<p><strong>注意:</strong></p>
<ul>
<li>  你需要将 <code>/path/to/config.json</code> 替换为你实际的配置文件路径。</li>
<li>  确保 Docker 已经正确安装并运行。</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>mcp-proxy</code> 使用 JSON 格式的配置文件。以下是一个示例配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpProxy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseURL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.example.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;addr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;:9090&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MCP Proxy&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;panicIfInvalid&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;logEnabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;authTokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;DefaultTokens&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;github&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-y&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;@modelcontextprotocol/server-github&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;YOUR_TOKEN&gt;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;toolFilter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;block&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;create_or_update_file&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fetch&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uvx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;mcp-server-fetch&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;panicIfInvalid&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;logEnabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;authTokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;SpecificTokens&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;amap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.amap.com/sse?key=&lt;YOUR_TOKEN&gt;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h4><p>配置文件主要分为两个部分：</p>
<ul>
<li>  <code>mcpProxy</code>: 配置代理服务器自身的属性。</li>
<li>  <code>mcpServers</code>: 配置需要代理的 MCP 服务器。</li>
</ul>
<h4 id="mcpProxy-配置项"><a href="#mcpProxy-配置项" class="headerlink" title="mcpProxy 配置项"></a><code>mcpProxy</code> 配置项</h4><ul>
<li>  <code>baseURL</code>:  公共可访问的服务器 URL。用于生成客户端的 URL。例如: <code>&quot;https://your-mcp-proxy.com&quot;</code></li>
<li>  <code>addr</code>: 服务器监听的地址。例如: <code>&quot;:9090&quot;</code> (监听所有接口的 9090 端口)</li>
<li>  <code>name</code>: 服务器的名称。例如: <code>&quot;My MCP Proxy&quot;</code></li>
<li>  <code>version</code>: 服务器的版本。例如: <code>&quot;1.0.0&quot;</code></li>
<li>  <code>options</code>:  <code>mcpServers</code> 的默认选项。</li>
</ul>
<h4 id="mcpServers-配置项"><a href="#mcpServers-配置项" class="headerlink" title="mcpServers 配置项"></a><code>mcpServers</code> 配置项</h4><p><code>mcpServers</code> 是一个 JSON 对象，每个 key 代表一个 MCP 服务器的名称，value 是该服务器的配置信息。</p>
<ul>
<li><code>transportType</code>: MCP 客户端的传输类型。支持以下三种类型：<ul>
<li>  <code>stdio</code>:  MCP 客户端是一个命令行工具，在子进程中运行。</li>
<li>  <code>sse</code>: MCP 客户端是一个支持 SSE (Server-Sent Events) 的服务器。</li>
<li>  <code>streamable-http</code>: MCP 客户端是一个支持 HTTP 流的服务器。</li>
</ul>
</li>
</ul>
<h5 id="stdio-类型的-MCP-服务器配置"><a href="#stdio-类型的-MCP-服务器配置" class="headerlink" title="stdio 类型的 MCP 服务器配置"></a><code>stdio</code> 类型的 MCP 服务器配置</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;github&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;-y&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;@modelcontextprotocol/server-github&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;YOUR_TOKEN&gt;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;toolFilter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;block&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;create_or_update_file&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  <code>command</code>: 运行 MCP 客户端的命令。例如: <code>&quot;npx&quot;</code></li>
<li>  <code>args</code>: 传递给命令的参数。例如: <code>[&quot;-y&quot;, &quot;@modelcontextprotocol/server-github&quot;]</code></li>
<li>  <code>env</code>:  设置命令的环境变量。例如: <code>&#123;&quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;: &quot;&lt;YOUR_TOKEN&gt;&quot;&#125;</code></li>
<li>  <code>options</code>: 客户端特定的选项。</li>
</ul>
<h5 id="sse-类型的-MCP-服务器配置"><a href="#sse-类型的-MCP-服务器配置" class="headerlink" title="sse 类型的 MCP 服务器配置"></a><code>sse</code> 类型的 MCP 服务器配置</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;amap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.amap.com/sse?key=&lt;YOUR_TOKEN&gt;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  <code>url</code>: MCP 客户端的 URL。例如: <code>&quot;https://mcp.amap.com/sse?key=&lt;YOUR_TOKEN&gt;&quot;</code></li>
</ul>
<h5 id="streamable-http-类型的-MCP-服务器配置"><a href="#streamable-http-类型的-MCP-服务器配置" class="headerlink" title="streamable-http 类型的 MCP 服务器配置"></a><code>streamable-http</code> 类型的 MCP 服务器配置</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;fetch&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/fetch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;transportType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;streamable-http&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Authorization&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer &lt;YOUR_TOKEN&gt;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span> <span class="number">30</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  <code>url</code>: MCP 客户端的 URL。例如: <code>&quot;http://localhost:8080/fetch&quot;</code></li>
<li>  <code>transportType</code>: 必须设置为 <code>&quot;streamable-http&quot;</code>。</li>
<li>  <code>headers</code>:  随请求发送到 MCP 客户端的 Headers。例如: <code>&#123;&quot;Authorization&quot;: &quot;Bearer &lt;YOUR_TOKEN&gt;&quot;&#125;</code></li>
<li>  <code>timeout</code>: 请求超时时间，单位为秒。</li>
</ul>
<h4 id="options-配置项"><a href="#options-配置项" class="headerlink" title="options 配置项"></a><code>options</code> 配置项</h4><p><code>options</code> 部分包含 <code>mcpProxy</code> 和 <code>mcpServers</code> 的通用选项。</p>
<ul>
<li>  <code>panicIfInvalid</code>: 如果为 <code>true</code>，当客户端无效时，服务器会 panic。默认值为 <code>false</code>。</li>
<li>  <code>logEnabled</code>: 如果为 <code>true</code>，服务器会记录客户端的请求。默认值为 <code>false</code>。</li>
<li>  <code>authTokens</code>: 客户端的身份验证令牌列表。<code>Authorization</code> header 将根据此列表进行检查。例如: <code>[&quot;token1&quot;, &quot;token2&quot;]</code></li>
<li>  <code>toolFilter</code>: 可选的工具过滤配置。<strong>此配置仅在 <code>mcpServers</code> 中有效。</strong></li>
</ul>
<h5 id="toolFilter-配置"><a href="#toolFilter-配置" class="headerlink" title="toolFilter 配置"></a><code>toolFilter</code> 配置</h5><p><code>toolFilter</code> 允许你根据需要选择性地启用或禁用特定的工具。</p>
<ul>
<li><code>mode</code>: 指定过滤模式。必须显式设置为 <code>allow</code> 或 <code>block</code>。<ul>
<li>  <code>allow</code>: 只允许列表中的工具。</li>
<li>  <code>block</code>: 阻止列表中的工具。</li>
</ul>
</li>
<li>  <code>list</code>: 要过滤的工具名称列表。</li>
</ul>
<p>例如，以下配置只允许 <code>github</code> 服务器使用 <code>get_issue</code> 和 <code>create_issue</code> 工具：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;github&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;-y&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;@modelcontextprotocol/server-github&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;GITHUB_PERSONAL_ACCESS_TOKEN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;YOUR_TOKEN&gt;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;toolFilter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;get_issue&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;create_issue&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>启动 <code>mcp-proxy</code> 后，你可以通过以下 URL 访问代理的 MCP 服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http(s)://&#123;baseURL&#125;/&#123;clientName&#125;/sse</span><br></pre></td></tr></table></figure>

<ul>
<li>  <code>&#123;baseURL&#125;</code>:  <code>mcpProxy</code> 配置中的 <code>baseURL</code>。</li>
<li>  <code>&#123;clientName&#125;</code>:  <code>mcpServers</code> 中 MCP 服务器的名称。</li>
</ul>
<p>例如，如果你的 <code>baseURL</code> 是 <code>https://mcp.example.com</code>，并且你配置了一个名为 <code>github</code> 的 MCP 服务器，那么你可以通过以下 URL 访问该服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://mcp.example.com/github/sse</span><br></pre></td></tr></table></figure>

<h4 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h4><p><code>mcp-proxy</code> 支持以下命令行参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage of mcp-proxy:</span><br><span class="line">  -config string</span><br><span class="line">        path to config file or a http(s) url (default &quot;config.json&quot;)</span><br><span class="line">  -help</span><br><span class="line">        print help and exit</span><br><span class="line">  -version</span><br><span class="line">        print version and exit</span><br></pre></td></tr></table></figure>

<ul>
<li>  <code>-config</code>: 指定配置文件的路径。默认值为 <code>config.json</code>。你也可以使用一个 HTTP(S) URL 作为配置文件。</li>
<li>  <code>-help</code>: 打印帮助信息并退出。</li>
<li>  <code>-version</code>: 打印版本信息并退出。</li>
</ul>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li>  <strong>使用环境变量管理敏感信息:</strong>  不要将敏感信息（例如 API 密钥、访问令牌）直接Hardcode在配置文件中。而是使用环境变量来传递这些信息。</li>
<li>  <strong>配置日志记录:</strong> 启用日志记录可以帮助你诊断问题和监控系统性能。</li>
<li>  <strong>使用工具过滤:</strong>  只允许必要的工具，可以提高系统的安全性。</li>
<li>  <strong>定期更新:</strong>  定期更新 <code>mcp-proxy</code> 到最新版本，以获取最新的功能和安全补丁。</li>
<li>  <strong>监控系统资源:</strong> 监控 <code>mcp-proxy</code> 的 CPU、内存和网络使用情况，确保系统运行稳定。</li>
</ul>
<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><ul>
<li>  该项目受到了 <a href="https://github.com/adamwattis/mcp-proxy-server">adamwattis/mcp-proxy-server</a> 项目的启发。</li>
<li>  如果你对部署有任何疑问，可以参考 <a href="https://miantiao.me/posts/guide-to-running-mcp-server-in-a-sandbox/">《在 Docker 沙箱中运行 MCP Server》</a>(<a href="https://github.com/ccbikai">@ccbikai</a>)。</li>
</ul>
<h3 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h3><p>本项目使用 MIT 许可证。有关详细信息，请参阅 <a href="https://github.com/TBXark/mcp-proxy/blob/master/LICENSE">LICENSE</a> 文件。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>mcp-proxy</code> 是一个功能强大且易于使用的 MCP 代理服务器，可以帮助你更轻松地管理和使用多个 MCP 服务器。希望本教程能够帮助你快速上手 <code>mcp-proxy</code>，并将其应用到你的 AI 项目中。通过合理配置和使用 <code>mcp-proxy</code>，你可以构建更模块化、可扩展和安全的 AI 系统。</p>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>MCP-Proxy</category>
      </categories>
      <tags>
        <tag>MCP-Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>2025年PVE8最新安装使用指南|新手入门|安装|优化|Proxmox VE 8.3</title>
    <url>/2025/05/02/2025-05-01-pve/</url>
    <content><![CDATA[<h1 id="2025年PVE8最新安装使用指南-新手入门-安装-优化-Proxmox-VE-8-3"><a href="#2025年PVE8最新安装使用指南-新手入门-安装-优化-Proxmox-VE-8-3" class="headerlink" title="2025年PVE8最新安装使用指南|新手入门|安装|优化|Proxmox VE 8.3"></a>2025年PVE8最新安装使用指南|新手入门|安装|优化|Proxmox VE 8.3</h1><h2 id="PVE镜像下载"><a href="#PVE镜像下载" class="headerlink" title="PVE镜像下载"></a>PVE镜像下载</h2><ol>
<li> 在浏览器输入以下网址下载pve的iso安装镜像：<code>https://www.proxmox.com/en/downloads</code></li>
<li> 点击download进行下载。</li>
<li> 最新的pve8.3-1镜像大小为1.45GB，接下来制作引导U盘。</li>
</ol>
<h2 id="引导U盘制作"><a href="#引导U盘制作" class="headerlink" title="引导U盘制作"></a>引导U盘制作</h2><ol>
<li> 首先下载写盘工具，本文使用的写盘工具为Rufus，下载地址为<code>https://rufus.ie/downloads/</code>，选择最新版本的下载。</li>
<li> 下载完成后直接双击运行，无需安装，设备中选择U盘，引导类型选择PVE镜像，然后点击开始，注意U盘中的原有数据会被格式化，重要数据记得备份。</li>
<li> 当状态为准备就绪时，表示U盘写入成功，拔下U盘插入需要安装的机器的USB接口中（台式机推荐后置USB接口）。</li>
</ol>
<h2 id="PVE安装"><a href="#PVE安装" class="headerlink" title="PVE安装"></a>PVE安装</h2><ol>
<li> 打开主机电源，不断按键盘F12按键（不同主机的U启动按键不同，请自行百度或者询问卖家）进入PVE安装页面，选择第一个Install Proxmox VE （Graphical)，按回车。</li>
<li> 页面会进入如下的跑代码阶段，跑码时间看机器配置，跑码期间不要动键盘鼠标。</li>
<li> 进入下面页面安装正式开始，首先使用协议页面点击 I agree（我同意）。</li>
<li> 选择pve安装的硬盘，然后继续点击Next(下一步）。</li>
<li> 设置国家、时区、键盘布局，然后点击Next(下一步）。</li>
<li> 设置密码、和邮箱，继续点击Next(下一步）。</li>
<li> 设置网卡、域（保持默认即可）、PVE管理地址、网关、DNS等，继续点击Next(下一步）。</li>
<li> 在配置详情中检查配置信息是否有误，没有问题点击Install（安装）。</li>
<li> 移除U盘，然后点击Reboot重启机器。</li>
</ol>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ol>
<li> 重启完成之后出现如下页面，表示安装成功，记录下屏幕中出现的ip地址，接下来的配置无需使用PVE主机显示，单个显示器的朋友可以将显示器切换到主机了。</li>
<li> 在浏览器输入<code>https://192.168.100.100:8006</code>进入PVE配置页面，用户名为root，密码为在安装过程中设置的，语言为了方便设置为简体中文，然后点击登录。</li>
<li> 第一次登录会出现无效订阅不用管，直接点击确定，后续我们将通过设置去掉这个选项。</li>
<li> 首先我们需要配置一下pve的dns来保证pve可以正确访问到网络，这里我使用了阿里云公共的DNS，223.5.5.5，223.6.6.6，然后点击ok。</li>
<li> 使用pve自带的shell工具来ping百度，测试网络是否正常，出现正确的ping值表示外网访问通畅。</li>
<li> 接下来还涉及到pve的换源、系统更新、直通等操作，为了方便小白和第一次接触到pve的朋友们，这里我们将使用第三方工具来实现。</li>
</ol>
<h2 id="优化（PVE-Source）"><a href="#优化（PVE-Source）" class="headerlink" title="优化（PVE_Source）"></a>优化（PVE_Source）</h2><p>pve_source是老虎大佬开发的pve脚本（首发于X86派论坛），可以更方便的初始化PVE，无需使用复杂的命令，使用方法很简单，登录PVE，打开Shell粘贴如下命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -q -O /root/pve_source.tar.gz \&#x27;https://bbs.x86pi.cn/file/topic/2023-11-28/file/01ac88d7d2b840cb88c15cb5e19d4305b2.gz\&#x27; &amp;&amp; tar zxvf /root/pve_source.tar.gz &amp;&amp; /root/./pve_source</span><br></pre></td></tr></table></figure>

<ol>
<li> 脚本加载成功出现使用协议，输入Y，然后继续按回车。</li>
<li> 进入脚本优化选项，脚本覆盖了PVE的绝大部分必备优化选项，需要使用那个直接输入数字然后按回车即可。</li>
</ol>
<h3 id="更换-Proxmox-VE-源"><a href="#更换-Proxmox-VE-源" class="headerlink" title="更换 Proxmox VE 源"></a>更换 Proxmox VE 源</h3><ol start="3">
<li> 为了更方便了解脚本都干了什么，建议分步执行23456，输入数字2,然后再输入1更换 PVE 软件源 + Debian 源，分别输入列表前面的数字选择PVE版本和软件源镜像站（不清楚的直接都选择清华大学源就行）。</li>
<li> 选择软件源以后继续按回车执行，脚本将自动执行更换源成功后会给出提示。</li>
<li> 按照以上操作继续完成PVE Ceph 源 、PVE LXC 仓库源 的更新操作（在Shell页面输入<code>./pve_source</code>即可再次调出pve工具小技巧直接输入<code>./pve</code>然后按tab按键可自动补全后面）。</li>
</ol>
<h3 id="更新软件包系统"><a href="#更新软件包系统" class="headerlink" title="更新软件包系统"></a>更新软件包系统</h3><p>更新软件包有两种方法，一种是通过pve工具箱更新，另外一种因为在前面我们已经通过pve工具箱更新了软件源，所以直接在web页面更新也可以</p>
<ol>
<li> 点击pve节点→更新→刷新→升级，既可以完成最新软件包和组件的升级。</li>
<li> 通过pve工具升级，在Shell中输入<code>./pve_source</code>，然后使用脚本3、4来更新软件包和系统。</li>
</ol>
<h3 id="设置系统DNS"><a href="#设置系统DNS" class="headerlink" title="设置系统DNS"></a>设置系统DNS</h3><ol>
<li> 通过web页面修改，点击节点→DNS→编辑。</li>
<li> 通过pve工具箱修改。</li>
</ol>
<h3 id="去除无效订阅源提示"><a href="#去除无效订阅源提示" class="headerlink" title="去除无效订阅源提示"></a>去除无效订阅源提示</h3><p>每次在登录pve的时候会弹出企业订阅提示，对于普通用户我们直接去除掉弹窗即可，登录PVE，在Shell窗口中输入<code>./pve_source</code>，进入pve工具箱，输入6，系统会自动执行去除订阅脚本，脚本运行完成后请强制刷新浏览器缓存。</p>
<h3 id="修改PVE概要信息"><a href="#修改PVE概要信息" class="headerlink" title="修改PVE概要信息"></a>修改PVE概要信息</h3><ol>
<li> pve默认概要中不会显示cpu温度、硬盘信息等，通过pve工具箱可以修改信息概要页面，使其信息显示更加完善。</li>
<li> 登录PVE，在Shell窗口中输入<code>./pve_source</code>，进入pve工具箱，按7进入pve概要信息定制向导，根据自身喜好选择合适的版本，这里我使用推荐方案1：高大全版本。</li>
<li> 修改改完成后可以看到概要信息中显示的非常全面，包括CPU温度核心占用情况，以及硬盘的温度写入量等都可以很直观的显示。</li>
</ol>
<h2 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2><p>pve安装虚拟机还是非常简单的，本篇我们将使用pve安装win10来演示一下安装过程，其他系统安装大同小异。</p>
<ol>
<li> 首先需要上传安装镜像，通过local(pve)→ISO镜像→上传，将win10镜像上传到pve中。</li>
<li> 回到pve首页，点击右上角的创建虚拟机，常规中自定义虚拟机的名称。</li>
<li> 操作系统中选择windows10镜像，然后在类型中选择安装操作系统的类型，注意版本也要选择。</li>
<li> 系统保持默认即可。</li>
<li> 硬盘中总线选择sata，其他保持默认。</li>
<li> CPU根据机器配置选择，插槽表示cpu个数单CPU机器输入1，核心根据CPU选择，类别使用HOST系统性能最大化。</li>
<li> 内存根据机器配置设置。</li>
<li> 网络设置中选择兼容性最高的e1000即可。</li>
<li> 最后检查配置没有，确认无误后点击完成。</li>
<li>稍等几秒，机器创建成功。</li>
<li>点击控制台启动，按照正常windows系统或macOS安装流程安装即可。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>pve的安装过程还是比较简单的和一般的操作系统安装过程相同，安装完成后通过pve-source工具优化即可，后续我也会出一篇通过命令修改的教程，下一篇会讲一下PVE的显卡直通，并切在windows和群晖等系统中实现核显直通、解码等，本篇教程到此结束</p>
]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>PVE</tag>
        <tag>Proxmox VE</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenClash 与 MosDNS 配合实现 DNS 防泄漏配置教程</title>
    <url>/2025/05/11/2025-05-10-mosdns/</url>
    <content><![CDATA[<h1 id="OpenClash-与-MosDNS-配合实现-DNS-防泄漏配置教程"><a href="#OpenClash-与-MosDNS-配合实现-DNS-防泄漏配置教程" class="headerlink" title="OpenClash 与 MosDNS 配合实现 DNS 防泄漏配置教程"></a>OpenClash 与 MosDNS 配合实现 DNS 防泄漏配置教程</h1><p>在使用代理工具（如 OpenClash）时，正确的 DNS 配置对于确保网络安全和隐私（特别是防止 DNS 泄漏）至关重要。同时，结合 MosDNS 这样的 DNS 分流工具，可以实现更灵活和高效的 DNS 解析。</p>
<p>本文将介绍两种常见的 OpenClash 与 MosDNS 配合实现 DNS 防泄漏的配置方案。</p>
<h2 id="方案一：OpenClash-前置"><a href="#方案一：OpenClash-前置" class="headerlink" title="方案一：OpenClash 前置"></a>方案一：OpenClash 前置</h2><p><strong>核心思想：</strong> 让 OpenClash 作为主要的 DNS 入口，将 DNS 请求转发给 MosDNS 进行分流处理。MosDNS 根据规则将国内请求发往国内 DNS，国外请求发往国外 DNS，并在 MosDNS 中进行防泄漏处理。</p>
<p><strong>设置步骤：</strong></p>
<ol>
<li><p><strong>OpenClash 设置：</strong></p>
<ul>
<li>  在 OpenClash 的 DNS 设置中，将 <strong>Nameserver</strong> (主 DNS 服务器) 和 <strong>Fallback</strong> (备用 DNS 服务器) 都设置为 MosDNS 的监听地址和端口。</li>
<li>  <strong>Nameserver 设置值：</strong> <code>127.0.0.1:MosDNS的监听端口</code> (例如 <code>127.0.0.1:5335</code>)</li>
<li>  <strong>Fallback 设置值：</strong> <code>127.0.0.1:MosDNS的监听端口</code> (例如 <code>127.0.0.1:5335</code>)</li>
<li>  这样设置的目的是让所有 DNS 请求都先经过 OpenClash，然后由 OpenClash 统一转发给 MosDNS。</li>
</ul>
</li>
<li><p><strong>MosDNS 设置：</strong></p>
<ul>
<li>在 MosDNS 中，配置两个服务器组：<ul>
<li>  <strong>国内 DNS 服务器组：</strong> 正常设置国内的 DNS 服务器地址（例如 <code>223.5.5.5:53</code>, <code>119.29.29.29:53</code> 等）。</li>
<li>  <strong>国外 DNS 服务器组：</strong> 设置国外支持 DOT/DOH 的 DNS 服务器地址（例如 <code>tls://1.1.1.1:853</code>, <code>https://8.8.8.8/dns-query</code> 等）。</li>
</ul>
</li>
<li>  配置 MosDNS 的规则，将国内域名的 DNS 请求导向国内 DNS 服务器组，将国外域名的 DNS 请求导向国外 DNS 服务器组。</li>
<li>  在 MosDNS 的设置中，找到并<strong>勾选“防 DNS 泄漏”</strong>或类似的选项。这是确保 DNS 不泄漏的关键步骤。</li>
</ul>
</li>
</ol>
<p><strong>流程：</strong> 设备 -&gt; OpenClash -&gt; MosDNS -&gt; (国内域名) 国内 DNS / (国外域名) 国外 DNS</p>
<h2 id="方案二：MosDNS-前置"><a href="#方案二：MosDNS-前置" class="headerlink" title="方案二：MosDNS 前置"></a>方案二：MosDNS 前置</h2><p><strong>核心思想：</strong> 让 MosDNS 作为主要的 DNS 入口，根据规则将国内流量导向国内 DNS 服务器，将国外流量导向 OpenClash 的 DNS 服务端口，再由 OpenClash 通过代理处理国外 DNS 请求。MosDNS 负责防 DNS 泄漏。</p>
<p><strong>设置步骤：</strong></p>
<ol>
<li><p><strong>MosDNS 设置：</strong></p>
<ul>
<li>在 MosDNS 中，配置两个服务器组：<ul>
<li>  <strong>国内 DNS 服务器组：</strong> 正常设置国内的 DNS 服务器地址（例如 <code>223.5.5.5:53</code>, <code>119.29.29.29:53</code> 等）。</li>
<li>  <strong>远程/国外 DNS 服务器组：</strong> 将此服务器组设置为 OpenClash 的 DNS 监听地址和端口。</li>
<li>  <strong>远程/国外服务器组设置值：</strong> <code>127.0.0.1:OpenClash的DNS端口</code> (例如 <code>127.0.0.1:7874</code>)。</li>
</ul>
</li>
<li>  配置 MosDNS 的规则，将国内域名的 DNS 请求导向国内 DNS 服务器组，将国外域名的 DNS 请求导向远程/国外 DNS 服务器组（即 OpenClash 的 DNS 端口）。</li>
<li>  在 MosDNS 的设置中，找到并<strong>勾选“防 DNS 泄漏”</strong>或类似的选项。这是确保 DNS 不泄漏的关键步骤。</li>
</ul>
</li>
<li><p><strong>OpenClash 设置：</strong></p>
<ul>
<li>  在 OpenClash 的 DNS 设置中，将 <strong>Nameserver</strong> (主 DNS 服务器) 设置为 MosDNS 的监听地址和端口。</li>
<li>  <strong>Nameserver 设置值：</strong> <code>127.0.0.1:MosDNS的监听端口</code> (例如 <code>127.0.0.1:5335</code>)。</li>
<li>  将 <strong>Fallback</strong> (备用 DNS 服务器) 设置为一个或多个国外支持 DOT/DOH 的服务器地址。OpenClash 会将从 MosDNS 接收到的国外域名请求通过代理发送到这里。</li>
<li>  <strong>Fallback 设置值：</strong> 国外 DOT/DOH 服务器地址（例如 <code>tls://1.1.1.1:853</code>, <code>https://8.8.8.8/dns-query</code> 等）。</li>
<li>  <strong>禁用 OpenClash 的“本地 DNS 劫持”</strong>功能，确保 DNS 请求首先到达 MosDNS。</li>
</ul>
</li>
</ol>
<p><strong>流程：</strong> 设备 -&gt; MosDNS -&gt; (国内域名) 国内 DNS / (国外域名) OpenClash 的 DNS 端口 -&gt; OpenClash 通过代理 -&gt; 国外 DOT/DOH 服务器</p>
<h2 id="关于不介意-DNS-泄漏的方案-基于方案二修改"><a href="#关于不介意-DNS-泄漏的方案-基于方案二修改" class="headerlink" title="关于不介意 DNS 泄漏的方案 (基于方案二修改)"></a>关于不介意 DNS 泄漏的方案 (基于方案二修改)</h2><p>如果您不介意 DNS 泄漏问题，并且追求最快的速度和最好的效果，可以在方案二的基础上进行修改：</p>
<ul>
<li><strong>MosDNS 设置：</strong><ul>
<li>  <strong>不要勾选</strong> MosDNS 中的“防 DNS 泄漏”选项。</li>
<li>  国内服务器组正常设置。</li>
<li>  远程服务器组仍然设置为 OpenClash 的 DNS 服务端口（<code>127.0.0.1:OpenClash的DNS端口</code>）。</li>
</ul>
</li>
<li><strong>OpenClash 设置：</strong><ul>
<li>  <strong>Nameserver</strong> 设置为国内 DNS 地址（例如 <code>223.5.5.5:53</code>）。</li>
<li>  <strong>Fallback</strong> 组留空，不要设置。</li>
</ul>
</li>
</ul>
<p><strong>流程：</strong> 设备 -&gt; MosDNS -&gt; (国内域名) 国内 DNS / (国外域名) OpenClash 的 DNS 端口 -&gt; OpenClash 通过代理 -&gt; (此时 OpenClash 会使用其代理的上游 DNS 进行解析，可能存在泄漏)</p>
<p>这种方案下，国内 DNS 请求直接由 MosDNS 发往国内 DNS，速度快。国外 DNS 请求经过 MosDNS 转发到 OpenClash，再由 OpenClash 通过代理解析。由于 OpenClash 的 Nameserver 设置为国内 DNS 且 Fallback 为空，国外域名的解析可能会依赖 OpenClash 通过代理访问国内 DNS 或其他默认 DNS，存在 DNS 泄漏的风险。但理论上，如果代理链路稳定且快速，这种方式在不考虑泄漏的情况下可能提供较好的体验。</p>
<p><strong>重要提示：</strong></p>
<ul>
<li>  请根据您的实际安装和配置，确认 MosDNS 和 OpenClash 的监听地址和端口是否为 <code>127.0.0.1:5335</code> 和 <code>127.0.0.1:7874</code>，如果不是，请替换为实际的地址和端口。</li>
<li>  确保您的设备或路由器的 DNS 设置指向您选择的方案中作为第一跳的 DNS 服务器（方案一指向 OpenClash 的 DNS 监听地址，方案二指向 MosDNS 的监听地址）。</li>
<li>  配置完成后，建议进行 DNS 泄漏测试，以验证配置是否生效。</li>
</ul>
<p>希望这份 Markdown 文章能够帮助您理解和配置 OpenClash 与 MosDNS 的 DNS 设置！</p>
]]></content>
      <categories>
        <category>网络配置</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>OpenClash</tag>
        <tag>MosDNS</tag>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
